<!--[if IE]><![endif]-->
<!DOCTYPE html>
<!--[if IE 8]><html class="no-js ie8 oldie" lang="en" prefix="og: http://ogp.me/ns/# og:book: http://ogp.me/ns/book# og:video: http://ogp.me/ns/video#"

    
        itemscope itemtype="http://schema.org/Book http://schema.org/ItemPage"" data-login-url="/accounts/login/"
data-offline-url="/"
data-url="/library/view/software-architecture-in/9780132942799/copyright.html"
data-csrf-cookie="csrfsafari"
data-highlight-privacy=""


  data-user-id="640574"
  data-user-uuid="10f9e41b-1414-4ac1-bc80-973364aac808"
  data-username="aejunknaja"
  data-account-type="Trial"
  
  data-activated-trial-date="01/12/2016"
  


  data-archive="9780132942799"
  data-publishers="Addison-Wesley Professional"



  data-htmlfile-name="copyright.html"
  data-epub-title="Software Architecture in Practice, Third Edition" data-debug=0 data-testing=0><![endif]-->
<!--[if gt IE 8]><!-->
<html style="" class=" js flexbox flexboxlegacy no-touch no-websqldatabase indexeddb history csscolumns csstransforms localstorage sessionstorage applicationcache svg inlinesvg no-zoom" prefix="og: http://ogp.me/ns/# og:book: http://ogp.me/ns/book# og:video: http://ogp.me/ns/video#" itemscope="" itemtype="http://schema.org/Book http://schema.org/ItemPage" "="" data-login-url="/accounts/login/" data-offline-url="/" data-url="/library/view/software-architecture-in/9780132942799/copyright.html" data-csrf-cookie="csrfsafari" data-highlight-privacy="" data-user-id="640574" data-user-uuid="10f9e41b-1414-4ac1-bc80-973364aac808" data-username="aejunknaja" data-account-type="Trial" data-activated-trial-date="01/12/2016" data-archive="9780132942799" data-publishers="Addison-Wesley Professional" data-htmlfile-name="copyright.html" data-epub-title="Software Architecture in Practice, Third Edition" data-debug="0" data-testing="0" lang="en"><!--<![endif]--><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta charset="utf-8"><meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"><meta name="author" content="Safari Books Online"><meta name="format-detection" content="telephone=no"><meta http-equiv="cleartype" content="on"><meta name="HandheldFriendly" content="True"><meta name="MobileOptimized" content="320"><meta name="apple-itunes-app" content="app-id=881697395, app-argument=safaridetail://9780132942799"><meta name="viewport" content="width=device-width, minimum-scale=1.0, initial-scale=1.0, maximum-scale=1.0"><meta property="twitter:account_id" content="4503599627559754"><script src="Chapter1_files/510f1a6865" type="text/javascript"></script><script src="Chapter1_files/nr-768.js"></script><script src="Chapter1_files/linkid.js" async="" type="text/javascript"></script><script src="Chapter1_files/analytics.js" async=""></script><script type="text/javascript">(window.NREUM||(NREUM={})).loader_config={xpid:"VQQDUVVVGwACU1RUAQA="};window.NREUM||(NREUM={}),__nr_require=function(t,e,n){function r(n){if(!e[n]){var o=e[n]={exports:{}};t[n][0].call(o.exports,function(e){var o=t[n][1][e];return r(o||e)},o,o.exports)}return e[n].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<n.length;o++)r(n[o]);return r}({QJf3ax:[function(t,e){function n(t){function e(e,n,a){t&&t(e,n,a),a||(a={});for(var c=s(e),f=c.length,u=i(a,o,r),d=0;f>d;d++)c[d].apply(u,n);return u}function a(t,e){f[t]=s(t).concat(e)}function s(t){return f[t]||[]}function c(){return n(e)}var f={};return{on:a,emit:e,create:c,listeners:s,_events:f}}function r(){return{}}var o="nr@context",i=t("gos");e.exports=n()},{gos:"7eSDFh"}],ee:[function(t,e){e.exports=t("QJf3ax")},{}],3:[function(t){function e(t){try{i.console&&console.log(t)}catch(e){}}var n,r=t("ee"),o=t(1),i={};try{n=localStorage.getItem("__nr_flags").split(","),console&&"function"==typeof console.log&&(i.console=!0,-1!==n.indexOf("dev")&&(i.dev=!0),-1!==n.indexOf("nr_dev")&&(i.nrDev=!0))}catch(a){}i.nrDev&&r.on("internal-error",function(t){e(t.stack)}),i.dev&&r.on("fn-err",function(t,n,r){e(r.stack)}),i.dev&&(e("NR AGENT IN DEVELOPMENT MODE"),e("flags: "+o(i,function(t){return t}).join(", ")))},{1:24,ee:"QJf3ax"}],4:[function(t){function e(t,e,n,i,s){try{c?c-=1:r("err",[s||new UncaughtException(t,e,n)])}catch(f){try{r("ierr",[f,(new Date).getTime(),!0])}catch(u){}}return"function"==typeof a?a.apply(this,o(arguments)):!1}function UncaughtException(t,e,n){this.message=t||"Uncaught error with no additional information",this.sourceURL=e,this.line=n}function n(t){r("err",[t,(new Date).getTime()])}var r=t("handle"),o=t(6),i=t("ee"),a=window.onerror,s=!1,c=0;t("loader").features.err=!0,t(5),window.onerror=e;try{throw new Error}catch(f){"stack"in f&&(t(1),t(2),"addEventListener"in window&&t(3),window.XMLHttpRequest&&XMLHttpRequest.prototype&&XMLHttpRequest.prototype.addEventListener&&window.XMLHttpRequest&&XMLHttpRequest.prototype&&XMLHttpRequest.prototype.addEventListener&&!/CriOS/.test(navigator.userAgent)&&t(4),s=!0)}i.on("fn-start",function(){s&&(c+=1)}),i.on("fn-err",function(t,e,r){s&&(this.thrown=!0,n(r))}),i.on("fn-end",function(){s&&!this.thrown&&c>0&&(c-=1)}),i.on("internal-error",function(t){r("ierr",[t,(new Date).getTime(),!0])})},{1:11,2:10,3:8,4:12,5:3,6:25,ee:"QJf3ax",handle:"D5DuLP",loader:"G9z0Bl"}],5:[function(t){if(window.addEventListener){var e=t("handle"),n=t("ee");t(1),window.addEventListener("click",function(){e("inc",["ck"])},!1),window.addEventListener("hashchange",function(){e("inc",["hc"])},!1),n.on("pushState-start",function(){e("inc",["ps"])})}},{1:9,ee:"QJf3ax",handle:"D5DuLP"}],6:[function(t){t("loader").features.ins=!0},{loader:"G9z0Bl"}],7:[function(t){function e(){}if(window.performance&&window.performance.timing&&window.performance.getEntriesByType){var n=t("ee"),r=t("handle"),o=t(1),i=t(2);t("loader").features.stn=!0,t(3);var a=Event;n.on("fn-start",function(t){var e=t[0];e instanceof a&&(this.bstStart=Date.now())}),n.on("fn-end",function(t,e){var n=t[0];n instanceof a&&r("bst",[n,e,this.bstStart,Date.now()])}),o.on("fn-start",function(t,e,n){this.bstStart=Date.now(),this.bstType=n}),o.on("fn-end",function(t,e){r("bstTimer",[e,this.bstStart,Date.now(),this.bstType])}),i.on("fn-start",function(){this.bstStart=Date.now()}),i.on("fn-end",function(t,e){r("bstTimer",[e,this.bstStart,Date.now(),"requestAnimationFrame"])}),n.on("pushState-start",function(){this.time=Date.now(),this.startPath=location.pathname+location.hash}),n.on("pushState-end",function(){r("bstHist",[location.pathname+location.hash,this.startPath,this.time])}),"addEventListener"in window.performance&&(window.performance.addEventListener("webkitresourcetimingbufferfull",function(){r("bstResource",[window.performance.getEntriesByType("resource")]),window.performance.webkitClearResourceTimings()},!1),window.performance.addEventListener("resourcetimingbufferfull",function(){r("bstResource",[window.performance.getEntriesByType("resource")]),window.performance.clearResourceTimings()},!1)),document.addEventListener("scroll",e,!1),document.addEventListener("keypress",e,!1),document.addEventListener("click",e,!1)}},{1:11,2:10,3:9,ee:"QJf3ax",handle:"D5DuLP",loader:"G9z0Bl"}],8:[function(t,e){function n(t){i.inPlace(t,["addEventListener","removeEventListener"],"-",r)}function r(t){return t[1]}var o=t("ee").create(),i=t(1)(o),a=t("gos");if(e.exports=o,n(window),"getPrototypeOf"in Object){for(var s=document;s&&!s.hasOwnProperty("addEventListener");)s=Object.getPrototypeOf(s);s&&n(s);for(var c=XMLHttpRequest.prototype;c&&!c.hasOwnProperty("addEventListener");)c=Object.getPrototypeOf(c);c&&n(c)}else XMLHttpRequest.prototype.hasOwnProperty("addEventListener")&&n(XMLHttpRequest.prototype);o.on("addEventListener-start",function(t,e){function n(){return s}if(t[1]){var r=t[1];if("function"==typeof r){var s=a(r,"nr@wrapped",function(){return i(r,"fn-",n,r.name||"anonymous")});this.wrapped=t[1]=s,o.emit("initEventContext",[t,e],this.wrapped)}else"function"==typeof r.handleEvent&&i.inPlace(r,["handleEvent"],"fn-")}}),o.on("removeEventListener-start",function(t){var e=this.wrapped;e&&(t[1]=e)})},{1:26,ee:"QJf3ax",gos:"7eSDFh"}],9:[function(t,e){var n=t("ee").create(),r=t(1)(n);e.exports=n,r.inPlace(window.history,["pushState","replaceState"],"-")},{1:26,ee:"QJf3ax"}],10:[function(t,e){var n=t("ee").create(),r=t(1)(n);e.exports=n,r.inPlace(window,["requestAnimationFrame","mozRequestAnimationFrame","webkitRequestAnimationFrame","msRequestAnimationFrame"],"raf-"),n.on("raf-start",function(t){t[0]=r(t[0],"fn-")})},{1:26,ee:"QJf3ax"}],11:[function(t,e){function n(t,e,n){t[0]=i(t[0],"fn-",null,n)}function r(t,e,n){function r(){return a}this.ctx={};var a={"nr@context":this.ctx};o.emit("initTimerContext",[t,n],a),t[0]=i(t[0],"fn-",r,n)}var o=t("ee").create(),i=t(1)(o);e.exports=o,i.inPlace(window,["setTimeout","setImmediate"],"setTimer-"),i.inPlace(window,["setInterval"],"setInterval-"),i.inPlace(window,["clearTimeout","clearImmediate"],"clearTimeout-"),o.on("setInterval-start",n),o.on("setTimer-start",r)},{1:26,ee:"QJf3ax"}],12:[function(t,e){function n(){f.inPlace(this,p,"fn-",o)}function r(t,e){f.inPlace(e,["onreadystatechange"],"fn-")}function o(t,e){return e}function i(t,e){for(var n in t)e[n]=t[n];return e}var a=t("ee").create(),s=t(1),c=t(2),f=c(a),u=c(s),d=window.XMLHttpRequest,p=["onload","onerror","onabort","onloadstart","onloadend","onprogress","ontimeout"];e.exports=a,window.XMLHttpRequest=function(t){var e=new d(t);try{a.emit("new-xhr",[],e),e.hasOwnProperty("addEventListener")&&u.inPlace(e,["addEventListener","removeEventListener"],"-",o),e.addEventListener("readystatechange",n,!1)}catch(r){try{a.emit("internal-error",[r])}catch(i){}}return e},i(d,XMLHttpRequest),XMLHttpRequest.prototype=d.prototype,f.inPlace(XMLHttpRequest.prototype,["open","send"],"-xhr-",o),a.on("send-xhr-start",r),a.on("open-xhr-start",r)},{1:8,2:26,ee:"QJf3ax"}],13:[function(t){function e(t){var e=this.params,r=this.metrics;if(!this.ended){this.ended=!0;for(var i=0;c>i;i++)t.removeEventListener(s[i],this.listener,!1);if(!e.aborted){if(r.duration=(new Date).getTime()-this.startTime,4===t.readyState){e.status=t.status;var a=t.responseType,f="arraybuffer"===a||"blob"===a||"json"===a?t.response:t.responseText,u=n(f);if(u&&(r.rxSize=u),this.sameOrigin){var d=t.getResponseHeader("X-NewRelic-App-Data");d&&(e.cat=d.split(", ").pop())}}else e.status=0;r.cbTime=this.cbTime,o("xhr",[e,r,this.startTime])}}}function n(t){if("string"==typeof t&&t.length)return t.length;if("object"!=typeof t)return void 0;if("undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer&&t.byteLength)return t.byteLength;if("undefined"!=typeof Blob&&t instanceof Blob&&t.size)return t.size;if("undefined"!=typeof FormData&&t instanceof FormData)return void 0;try{return JSON.stringify(t).length}catch(e){return void 0}}function r(t,e){var n=i(e),r=t.params;r.host=n.hostname+":"+n.port,r.pathname=n.pathname,t.sameOrigin=n.sameOrigin}if(window.XMLHttpRequest&&XMLHttpRequest.prototype&&XMLHttpRequest.prototype.addEventListener&&!/CriOS/.test(navigator.userAgent)){t("loader").features.xhr=!0;var o=t("handle"),i=t(2),a=t("ee"),s=["load","error","abort","timeout"],c=s.length,f=t(1),u=window.XMLHttpRequest;t(4),t(3),a.on("new-xhr",function(){this.totalCbs=0,this.called=0,this.cbTime=0,this.end=e,this.ended=!1,this.xhrGuids={}}),a.on("open-xhr-start",function(t){this.params={method:t[0]},r(this,t[1]),this.metrics={}}),a.on("open-xhr-end",function(t,e){"loader_config"in NREUM&&"xpid"in NREUM.loader_config&&this.sameOrigin&&e.setRequestHeader("X-NewRelic-ID",NREUM.loader_config.xpid)}),a.on("send-xhr-start",function(t,e){var r=this.metrics,o=t[0],i=this;if(r&&o){var f=n(o);f&&(r.txSize=f)}this.startTime=(new Date).getTime(),this.listener=function(t){try{"abort"===t.type&&(i.params.aborted=!0),("load"!==t.type||i.called===i.totalCbs&&(i.onloadCalled||"function"!=typeof e.onload))&&i.end(e)}catch(n){try{a.emit("internal-error",[n])}catch(r){}}};for(var u=0;c>u;u++)e.addEventListener(s[u],this.listener,!1)}),a.on("xhr-cb-time",function(t,e,n){this.cbTime+=t,e?this.onloadCalled=!0:this.called+=1,this.called!==this.totalCbs||!this.onloadCalled&&"function"==typeof n.onload||this.end(n)}),a.on("xhr-load-added",function(t,e){var n=""+f(t)+!!e;this.xhrGuids&&!this.xhrGuids[n]&&(this.xhrGuids[n]=!0,this.totalCbs+=1)}),a.on("xhr-load-removed",function(t,e){var n=""+f(t)+!!e;this.xhrGuids&&this.xhrGuids[n]&&(delete this.xhrGuids[n],this.totalCbs-=1)}),a.on("addEventListener-end",function(t,e){e instanceof u&&"load"===t[0]&&a.emit("xhr-load-added",[t[1],t[2]],e)}),a.on("removeEventListener-end",function(t,e){e instanceof u&&"load"===t[0]&&a.emit("xhr-load-removed",[t[1],t[2]],e)}),a.on("fn-start",function(t,e,n){e instanceof u&&("onload"===n&&(this.onload=!0),("load"===(t[0]&&t[0].type)||this.onload)&&(this.xhrCbStart=(new Date).getTime()))}),a.on("fn-end",function(t,e){this.xhrCbStart&&a.emit("xhr-cb-time",[(new Date).getTime()-this.xhrCbStart,this.onload,e],e)})}},{1:"XL7HBI",2:14,3:12,4:8,ee:"QJf3ax",handle:"D5DuLP",loader:"G9z0Bl"}],14:[function(t,e){e.exports=function(t){var e=document.createElement("a"),n=window.location,r={};e.href=t,r.port=e.port;var o=e.href.split("://");return!r.port&&o[1]&&(r.port=o[1].split("/")[0].split("@").pop().split(":")[1]),r.port&&"0"!==r.port||(r.port="https"===o[0]?"443":"80"),r.hostname=e.hostname||n.hostname,r.pathname=e.pathname,r.protocol=o[0],"/"!==r.pathname.charAt(0)&&(r.pathname="/"+r.pathname),r.sameOrigin=!e.hostname||e.hostname===document.domain&&e.port===n.port&&e.protocol===n.protocol,r}},{}],15:[function(t,e){function n(t){return function(){r(t,[(new Date).getTime()].concat(i(arguments)))}}var r=t("handle"),o=t(1),i=t(2);"undefined"==typeof window.newrelic&&(newrelic=window.NREUM);var a=["setPageViewName","addPageAction","setCustomAttribute","finished","addToTrace","inlineHit","noticeError"];o(a,function(t,e){window.NREUM[e]=n("api-"+e)}),e.exports=window.NREUM},{1:24,2:25,handle:"D5DuLP"}],gos:[function(t,e){e.exports=t("7eSDFh")},{}],"7eSDFh":[function(t,e){function n(t,e,n){if(r.call(t,e))return t[e];var o=n();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(t,e,{value:o,writable:!0,enumerable:!1}),o}catch(i){}return t[e]=o,o}var r=Object.prototype.hasOwnProperty;e.exports=n},{}],D5DuLP:[function(t,e){function n(t,e,n){return r.listeners(t).length?r.emit(t,e,n):void(r.q&&(r.q[t]||(r.q[t]=[]),r.q[t].push(e)))}var r=t("ee").create();e.exports=n,n.ee=r,r.q={}},{ee:"QJf3ax"}],handle:[function(t,e){e.exports=t("D5DuLP")},{}],XL7HBI:[function(t,e){function n(t){var e=typeof t;return!t||"object"!==e&&"function"!==e?-1:t===window?0:i(t,o,function(){return r++})}var r=1,o="nr@id",i=t("gos");e.exports=n},{gos:"7eSDFh"}],id:[function(t,e){e.exports=t("XL7HBI")},{}],G9z0Bl:[function(t,e){function n(){var t=p.info=NREUM.info,e=f.getElementsByTagName("script")[0];if(t&&t.licenseKey&&t.applicationID&&e){s(d,function(e,n){e in t||(t[e]=n)});var n="https"===u.split(":")[0]||t.sslForHttp;p.proto=n?"https://":"http://",a("mark",["onload",i()]);var r=f.createElement("script");r.src=p.proto+t.agent,e.parentNode.insertBefore(r,e)}}function r(){"complete"===f.readyState&&o()}function o(){a("mark",["domContent",i()])}function i(){return(new Date).getTime()}var a=t("handle"),s=t(1),c=window,f=c.document;t(2);var u=(""+location).split("?")[0],d={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-768.min.js"},p=e.exports={offset:i(),origin:u,features:{}};f.addEventListener?(f.addEventListener("DOMContentLoaded",o,!1),c.addEventListener("load",n,!1)):(f.attachEvent("onreadystatechange",r),c.attachEvent("onload",n)),a("mark",["firstbyte",i()])},{1:24,2:15,handle:"D5DuLP"}],loader:[function(t,e){e.exports=t("G9z0Bl")},{}],24:[function(t,e){function n(t,e){var n=[],o="",i=0;for(o in t)r.call(t,o)&&(n[i]=e(o,t[o]),i+=1);return n}var r=Object.prototype.hasOwnProperty;e.exports=n},{}],25:[function(t,e){function n(t,e,n){e||(e=0),"undefined"==typeof n&&(n=t?t.length:0);for(var r=-1,o=n-e||0,i=Array(0>o?0:o);++r<o;)i[r]=t[e+r];return i}e.exports=n},{}],26:[function(t,e){function n(t){return!(t&&"function"==typeof t&&t.apply&&!t[i])}var r=t("ee"),o=t(1),i="nr@original",a=Object.prototype.hasOwnProperty;e.exports=function(t){function e(t,e,r,a){function nrWrapper(){var n,i,s,f;try{i=this,n=o(arguments),s=r&&r(n,i)||{}}catch(d){u([d,"",[n,i,a],s])}c(e+"start",[n,i,a],s);try{return f=t.apply(i,n)}catch(p){throw c(e+"err",[n,i,p],s),p}finally{c(e+"end",[n,i,f],s)}}return n(t)?t:(e||(e=""),nrWrapper[i]=t,f(t,nrWrapper),nrWrapper)}function s(t,r,o,i){o||(o="");var a,s,c,f="-"===o.charAt(0);for(c=0;c<r.length;c++)s=r[c],a=t[s],n(a)||(t[s]=e(a,f?s+o:o,i,s))}function c(e,n,r){try{t.emit(e,n,r)}catch(o){u([o,e,n,r])}}function f(t,e){if(Object.defineProperty&&Object.keys)try{var n=Object.keys(t);return n.forEach(function(n){Object.defineProperty(e,n,{get:function(){return t[n]},set:function(e){return t[n]=e,e}})}),e}catch(r){u([r])}for(var o in t)a.call(t,o)&&(e[o]=t[o]);return e}function u(e){try{t.emit("internal-error",e)}catch(n){}}return t||(t=r),e.inPlace=s,e.flag=i,e}},{1:25,ee:"QJf3ax"}]},{},["G9z0Bl",4,13,7,6,5]);</script><link rel="apple-touch-icon" href="https://www.safaribooksonline.com/static/images/apple-touch-icon.dc4dcf1f75e0.png"><link rel="shortcut icon" href="https://www.safaribooksonline.com/favicon.ico" type="image/x-icon"><link href="Chapter1_files/css.css" rel="stylesheet" type="text/css"><title>1. What Is Software Architecture? - Software Architecture in Practice, Third Edition</title><link rel="stylesheet" href="Chapter1_files/e4f5174e8e7b.css" type="text/css"><link rel="stylesheet" type="text/css" href="Chapter1_files/annotator.css"><link rel="stylesheet" href="Chapter1_files/font-awesome.css"><style type="text/css" title="ibis-book">#sbo-rt-content div{margin-top:4pt;margin-bottom:4pt;margin-right:15pt}#sbo-rt-content h1{margin-top:15pt;margin-bottom:12pt;text-align:center;font-weight:bold}#sbo-rt-content h2{margin-top:7pt;margin-bottom:25pt;text-align:left;font-weight:bold}#sbo-rt-content h3{margin-top:9pt;margin-bottom:8pt;font-weight:bold;text-align:left}#sbo-rt-content h4{margin-top:9pt;margin-bottom:6pt;text-align:left;font-weight:bold}#sbo-rt-content h5{margin-top:9pt;margin-bottom:6pt;font-weight:bold;text-align:left}#sbo-rt-content h6{margin-top:9pt;margin-bottom:6pt;font-weight:bold;text-align:left}#sbo-rt-content .cover{margin-top:2pt;margin-bottom:2pt;text-align:center}#sbo-rt-content .author{margin-top:40pt;font-weight:bold;text-align:center}#sbo-rt-content div.image,#sbo-rt-content img{max-width:99%;max-height:99%}#sbo-rt-content .image{margin-bottom:5pt;text-align:center}#sbo-rt-content .toc-part{margin-top:25pt;margin-bottom:5pt;margin-left:10pt;text-align:left}#sbo-rt-content .toc-chapter{margin-top:10pt;margin-bottom:5pt;margin-left:25pt;text-align:left}#sbo-rt-content .toc-chapter1{margin-top:10pt;margin-bottom:5pt;margin-left:18pt;text-align:left}#sbo-rt-content .toc-section{margin-top:4pt;margin-bottom:4pt;margin-left:55pt;text-align:left}#sbo-rt-content .indexmain{margin-top:2pt;margin-bottom:2pt;text-align:left}#sbo-rt-content .indexmain1{margin-top:18pt;margin-bottom:2pt;text-align:left}#sbo-rt-content .indexsub{margin-top:2pt;margin-bottom:2pt;margin-left:35pt;text-indent:-15pt;text-align:left}#sbo-rt-content .copy{margin-top:8pt;margin-bottom:8pt;text-indent:.024pt}#sbo-rt-content .indent{margin-top:4pt;margin-bottom:5pt;text-indent:18pt;text-align:left}#sbo-rt-content .indenthangingB{margin-top:4pt;margin-bottom:4pt;margin-left:40pt;text-indent:-7pt;text-align:left}#sbo-rt-content .indenthangingBB{margin-top:4pt;margin-bottom:4pt;margin-left:58pt;text-indent:-6.5pt;text-align:left}#sbo-rt-content .indenthangingBBB{margin-top:4pt;margin-bottom:4pt;margin-left:80pt;text-indent:-6pt;text-align:left}#sbo-rt-content .indenthangingBP{margin-top:4pt;margin-bottom:4pt;margin-left:40pt;text-align:left}#sbo-rt-content .indenthangingBP1{margin-top:4pt;margin-bottom:4pt;margin-left:30pt;text-indent:15pt;text-align:left}#sbo-rt-content .tab-caption{font-weight:bold;margin-top:14pt;margin-bottom:8pt;text-align:center;page-break-after:avoid;page-break-inside:avoid}#sbo-rt-content .source{font-size:medium;margin-top:2pt;margin-bottom:2pt;page-break-before:avoid;page-break-inside:avoid;text-align:center}#sbo-rt-content .fig-caption{font-weight:bold;margin-top:4pt;margin-bottom:14pt;text-align:center;page-break-before:avoid;page-break-inside:avoid}#sbo-rt-content .fig-caption2{font-weight:bold;margin-top:4pt;margin-bottom:14pt;text-align:left;page-break-before:avoid;page-break-inside:avoid}#sbo-rt-content .blockquote{margin-top:7pt;margin-bottom:2pt;margin-left:60pt;text-align:left}#sbo-rt-content .attribution{margin-top:2pt;margin-bottom:17pt;margin-right:40pt;text-align:right}#sbo-rt-content .attribution1{margin-top:2pt;margin-bottom:17pt;margin-right:15pt;text-align:right}#sbo-rt-content .attri{margin-left:100pt;margin-right:100pt}#sbo-rt-content .toc-preface{margin-top:5pt;margin-bottom:5pt;margin-left:65pt;text-align:left}#sbo-rt-content .toc-appendix{margin-top:10pt;margin-bottom:5pt;margin-left:55pt;text-align:left}#sbo-rt-content .toc-index{margin-top:10pt;margin-bottom:5pt;margin-left:55pt;text-align:left}#sbo-rt-content .bib{margin-top:10pt;margin-bottom:5pt;margin-left:15pt;text-align:left}#sbo-rt-content .footnote{font-size:small;margin-top:4pt;margin-bottom:4pt;margin-left:20pt;text-indent:-11pt;text-align:left}#sbo-rt-content .pre{font-family:"Courier New";font-size:small;margin-top:5pt;margin-bottom:5pt;margin-left:13pt}#sbo-rt-content .pre1{font-family:"Courier New";font-size:small;margin-top:5pt;margin-bottom:5pt;margin-left:25pt}#sbo-rt-content .codelink{font-size:small;margin-top:6pt;margin-bottom:6pt;font-weight:bold;page-break-after:avoid}#sbo-rt-content .image1{text-align:center;page-break-before:always}#sbo-rt-content div.image1,#sbo-rt-content img{max-width:99%;max-height:99%}#sbo-rt-content code{font-size:small}#sbo-rt-content .edition{font-size:15pt;margin-top:15pt;margin-bottom:15pt;text-align:center;font-weight:bold}#sbo-rt-content .equation{text-align:center}#sbo-rt-content .indenthangingN{margin-top:4pt;margin-bottom:4pt;margin-left:50pt;text-indent:-12pt;text-align:left}#sbo-rt-content .indenthangingNaa{margin-top:4pt;margin-bottom:4pt;margin-left:48pt;text-indent:-11pt;text-align:left}#sbo-rt-content .indenthangingNP1{margin-top:4pt;margin-bottom:4pt;margin-left:30pt;text-align:left}#sbo-rt-content .indenthangingNP{margin-top:4pt;margin-bottom:4pt;margin-left:30pt;text-indent:15pt;text-align:left}#sbo-rt-content .indenthangingN1{margin-top:4pt;margin-bottom:4pt;margin-left:50pt;text-indent:-17.5pt;text-align:left}#sbo-rt-content .indenthangingNB{margin-top:4pt;margin-bottom:4pt;margin-left:75pt;text-indent:-7.5pt;text-align:left}#sbo-rt-content .noindent{margin-top:4pt;margin-bottom:4pt;text-indent:.02pt}#sbo-rt-content .publisher{margin-top:130pt;margin-bottom:2pt;text-align:center}#sbo-rt-content .publishertext{margin-top:6pt;margin-bottom:2pt;text-align:center}#sbo-rt-content .sidebar{font-size:medium;margin-top:6pt;margin-bottom:12pt;margin-left:24pt;margin-right:24pt}#sbo-rt-content .sb-noindent{margin-top:4pt;margin-bottom:4pt;text-indent:.02pt;margin-left:15pt;margin-right:15pt}#sbo-rt-content .sb-indent{margin-top:4pt;margin-bottom:5pt;text-indent:15pt;margin-left:15pt;margin-right:15pt}#sbo-rt-content .title{font-size:110%;margin-top:4pt;margin-bottom:4pt;font-weight:bold;margin-left:7pt;page-break-inside:avoid;page-break-after:avoid}#sbo-rt-content .question{margin-top:4pt;margin-bottom:4pt;margin-left:30pt;text-indent:-12pt;text-align:left}#sbo-rt-content .questiona{margin-top:4pt;margin-bottom:4pt;margin-left:70pt;text-indent:-11.5pt;text-align:left}#sbo-rt-content .questionP{margin-top:4pt;margin-bottom:4pt;margin-left:30pt;text-align:left}#sbo-rt-content .step{margin-top:4pt;margin-bottom:4pt;margin-left:65pt;text-indent:-38pt;text-align:left}#sbo-rt-content .division{font-size:100%;margin-top:4pt;margin-bottom:4pt;font-weight:bold;margin-left:10pt}#sbo-rt-content .question1{margin-top:4pt;margin-bottom:4pt;margin-left:29pt;text-indent:-18pt;text-align:left}#sbo-rt-content .copy1{margin-top:8pt;margin-bottom:8pt;margin-left:24pt;text-align:left;text-indent:.024pt}#sbo-rt-content .copy2{margin-top:8pt;margin-bottom:8pt;font-size:140%;text-align:left;text-indent:.024pt}#sbo-rt-content .copy3{margin-top:8pt;margin-bottom:8pt;font-size:130%;text-align:left;text-indent:.024pt}#sbo-rt-content .imagefir{text-align:center}</style><link rel="canonical" href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/copyright.html"><meta name="description" content=" Software Engineering Institute | CarnegieMellon The SEI Series in Software Engineering Many of the designations used by manufacturers and sellers to distinguish their products are claimed as trademarks. Where those designations ... "><meta property="og:title" content="Copyright Page"><meta itemprop="isPartOf" content="/library/view/software-architecture-in/9780132942799/"><meta itemprop="name" content="Copyright Page"><meta property="og:url" itemprop="url" content="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/copyright.html"><meta property="og:site_name" content="Safari"><meta property="og:image" itemprop="thumbnailUrl" content="https://www.safaribooksonline.com/library/cover/9780132942799/"><meta property="og:description" itemprop="description" content=" Software Engineering Institute | CarnegieMellon The SEI Series in Software Engineering Many of the designations used by manufacturers and sellers to distinguish their products are claimed as trademarks. Where those designations ... "><meta itemprop="inLanguage" content="en"><meta itemprop="publisher" content="Addison-Wesley Professional"><meta property="og:type" content="book"><meta property="og:book:isbn" itemprop="isbn" content="9780132942799"><meta property="og:book:author" itemprop="author" content="Rick Kazman"><meta property="og:book:author" itemprop="author" content="Paul Clements"><meta property="og:book:author" itemprop="author" content="Len Bass"><meta property="og:book:tag" itemprop="about" content="Core Programming"><meta name="twitter:card" content="summary"><meta name="twitter:site" content="@safari"><style type="text/css" id="font-styles" data-template="#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-size: &lt;%= font_size %&gt; !important; }"></style><style type="text/css" id="font-family" data-template="#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-family: &lt;%= font_family %&gt; !important; }"></style><style type="text/css" id="column-width" data-template="#sbo-rt-content { max-width: &lt;%= column_width %&gt;% !important; margin: 0 auto !important; }"></style><!--[if lt IE 9]><script src="/static/js/src/respond.min.fa78ffe6f7ba.js"></script><![endif]--><script type="text/javascript" src="Chapter1_files/ecc99425e988.js" async=""></script><noscript><meta http-equiv="refresh" content="0; url=/library/no-js/" /></noscript><script type="text/javascript">
  (function(i,s,o,g,r,a,m) {
    i['GoogleAnalyticsObject']=r;
    i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();
    a=s.createElement(o),m=s.getElementsByTagName(o)[0];
    a.async=1;
    a.src=g;
    m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  var matches = document.cookie.match(/BrowserCookie\s*=\s*([a-f0-9\-]{36})/),
      user_uuid = null;

  if (matches && matches.length === 2) {
    user_uuid = matches[1];
  }


  ga('create', 'UA-39299553-7', {'userId': '10f9e41b-1414-4ac1-bc80-973364aac808' });


ga('set', 'dimension1', 'Trial');
ga('set', 'dimension6', user_uuid);


  ga('set', 'dimension2', '10f9e41b-1414-4ac1-bc80-973364aac808');
  




  //enable enhanced link tracking
  ga('require', 'linkid', 'linkid.js');

  // reading interface will track pageviews itself
  if (document.location.pathname.indexOf("/library/view") !== 0) {
    ga('send', 'pageview');
  }
</script><script src="Chapter1_files/_config.js" data-requiremodule="/static/js/pages/_config.1113c6153f5e.js" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Chapter1_files/_init.js" data-requiremodule="/static/js/nest/_init.1198db94d0a6.js" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><style id="annotator-dynamic-style">.annotator-adder, .annotator-outer, .annotator-notice {
  z-index: 100019;
}
.annotator-filter {
  z-index: 100009;
}</style></head>


<body class="reading sidenav nav-collapsed  js-show-related scalefonts subscribe-panel library">

    
      <div class="hide working" role="status">
        <div class="working-image"></div>
      </div>
      <div class="sbo-site-nav">
        



<a href="#container" class="skip">Skip to content</a><header class="topbar t-topbar"><nav role="navigation" class="js-site-nav"><ul class="topnav"><li class="logo t-logo"><a href="https://www.safaribooksonline.com/home/" class="l0 safari js-keyboard-nav-home"><em>Safari</em></a></li><li><a href="https://www.safaribooksonline.com/r/" class="t-recommendations-nav l0 ss-picks None"><span>Recommended</span></a></li><li><a href="https://www.safaribooksonline.com/s/" class="t-queue-nav l0 ss-queue None"><span>Queue</span></a></li><li class="search"><a href="#" class="t-search-nav trigger ss-search l0" data-dropdown-selector=".searchbox"><span>Search</span></a></li><li class="usermenu dropdown"><a href="#" class="trigger l0 ss-navigatedown nav-dropdown"><span>Expand Nav</span></a><div class="drop-content"><ul><li><a href="https://www.safaribooksonline.com/recent/" class="t-recent-nav l1 ss-recent None">Recent</a></li><li><a href="https://www.safaribooksonline.com/topics" class="t-topics-link l1 ss-hexbase None">Topics</a></li><li><a href="https://www.safaribooksonline.com/tutorials/" class="l1 ss-toots t-tutorials-nav js-toggle-menu-item None"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20" version="1.1"><title>icon for tutorials
  </title><desc></desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M15.8 18.2C15.8 18.2 15.9 18.2 16 18.2 16.1 18.2 16.2 18.2 16.4 18.2 16.5 18.2 16.7 18.1 16.9 18 17 17.9 17.1 17.8 17.2 17.7 17.3 17.6 17.4 17.5 17.4 17.4 17.5 17.2 17.6 16.9 17.6 16.7 17.6 16.6 17.6 16.5 17.6 16.4 17.5 16.2 17.5 16.1 17.4 15.9 17.3 15.8 17.2 15.6 17 15.5 16.8 15.3 16.6 15.3 16.4 15.2 16.2 15.2 16 15.2 15.8 15.2 15.7 15.2 15.5 15.3 15.3 15.4 15.2 15.4 15.1 15.5 15 15.7 14.9 15.8 14.8 15.9 14.7 16 14.7 16.1 14.6 16.3 14.6 16.4 14.6 16.5 14.6 16.6 14.6 16.6 14.6 16.7 14.6 16.9 14.6 17 14.6 17.1 14.7 17.3 14.7 17.4 14.8 17.6 15 17.7 15.1 17.9 15.2 18 15.3 18 15.5 18.1 15.5 18.1 15.6 18.2 15.7 18.2 15.7 18.2 15.7 18.2 15.8 18.2L15.8 18.2ZM9.4 11.5C9.5 11.5 9.5 11.5 9.6 11.5 9.7 11.5 9.9 11.5 10 11.5 10.2 11.5 10.3 11.4 10.5 11.3 10.6 11.2 10.8 11.1 10.9 11 10.9 10.9 11 10.8 11.1 10.7 11.2 10.5 11.2 10.2 11.2 10 11.2 9.9 11.2 9.8 11.2 9.7 11.2 9.5 11.1 9.4 11 9.2 10.9 9.1 10.8 8.9 10.6 8.8 10.5 8.7 10.3 8.6 10 8.5 9.9 8.5 9.7 8.5 9.5 8.5 9.3 8.5 9.1 8.6 9 8.7 8.8 8.7 8.7 8.8 8.6 9 8.5 9.1 8.4 9.2 8.4 9.3 8.2 9.5 8.2 9.8 8.2 10 8.2 10.1 8.2 10.2 8.2 10.3 8.2 10.5 8.3 10.6 8.4 10.7 8.5 10.9 8.6 11.1 8.7 11.2 8.9 11.3 9 11.4 9.1 11.4 9.2 11.4 9.3 11.5 9.3 11.5 9.3 11.5 9.4 11.5 9.4 11.5L9.4 11.5ZM3 4.8C3.1 4.8 3.1 4.8 3.2 4.8 3.4 4.8 3.5 4.8 3.7 4.8 3.8 4.8 4 4.7 4.1 4.6 4.3 4.5 4.4 4.4 4.5 4.3 4.6 4.2 4.6 4.1 4.7 4 4.8 3.8 4.8 3.5 4.8 3.3 4.8 3.1 4.8 3 4.8 2.9 4.7 2.8 4.7 2.6 4.6 2.5 4.5 2.3 4.4 2.2 4.2 2.1 4 1.9 3.8 1.9 3.6 1.8 3.5 1.8 3.3 1.8 3.1 1.8 2.9 1.8 2.7 1.9 2.6 2 2.4 2.1 2.3 2.2 2.2 2.3 2.1 2.4 2 2.5 2 2.6 1.8 2.8 1.8 3 1.8 3.3 1.8 3.4 1.8 3.5 1.8 3.6 1.8 3.8 1.9 3.9 2 4 2.1 4.2 2.2 4.4 2.4 4.5 2.5 4.6 2.6 4.7 2.7 4.7 2.8 4.7 2.9 4.8 2.9 4.8 3 4.8 3 4.8 3 4.8L3 4.8ZM13.1 15.2C13.2 15.1 13.2 15.1 13.2 15.1 13.3 14.9 13.4 14.7 13.6 14.5 13.8 14.2 14.1 14 14.4 13.8 14.7 13.6 15.1 13.5 15.5 13.4 15.9 13.4 16.3 13.4 16.7 13.5 17.2 13.5 17.6 13.7 17.9 13.9 18.2 14.1 18.5 14.4 18.7 14.7 18.9 15 19.1 15.3 19.2 15.6 19.3 15.9 19.4 16.1 19.4 16.4 19.4 17 19.3 17.5 19.1 18.1 19 18.3 18.9 18.5 18.7 18.7 18.5 19 18.3 19.2 18 19.4 17.7 19.6 17.3 19.8 16.9 19.9 16.6 20 16.3 20 16 20 15.8 20 15.6 20 15.4 19.9 15.4 19.9 15.4 19.9 15.4 19.9 15.2 19.9 15 19.8 14.9 19.8 14.8 19.7 14.7 19.7 14.6 19.7 14.4 19.6 14.3 19.5 14.1 19.3 13.7 19.1 13.4 18.7 13.2 18.4 13.1 18.1 12.9 17.8 12.9 17.5 12.8 17.3 12.8 17.1 12.8 16.9L3.5 14.9C3.3 14.9 3.1 14.8 3 14.8 2.7 14.7 2.4 14.5 2.1 14.3 1.7 14 1.4 13.7 1.2 13.3 1 13 0.9 12.6 0.8 12.3 0.7 12 0.7 11.7 0.7 11.4 0.7 11 0.8 10.5 1 10.1 1.1 9.8 1.3 9.5 1.6 9.2 1.8 8.9 2.1 8.7 2.4 8.5 2.8 8.3 3.2 8.1 3.6 8.1 3.9 8 4.2 8 4.5 8 4.6 8 4.8 8 4.9 8.1L6.8 8.5C6.8 8.4 6.8 8.4 6.8 8.4 6.9 8.2 7.1 8 7.2 7.8 7.5 7.5 7.7 7.3 8 7.1 8.4 6.9 8.7 6.8 9.1 6.7 9.5 6.7 10 6.7 10.4 6.8 10.8 6.8 11.2 7 11.5 7.2 11.8 7.5 12.1 7.7 12.4 8 12.6 8.3 12.7 8.6 12.8 8.9 12.9 9.2 13 9.4 13 9.7 13 9.7 13 9.8 13 9.8 13.6 9.9 14.2 10.1 14.9 10.2 15 10.2 15 10.2 15.1 10.2 15.3 10.2 15.4 10.2 15.6 10.2 15.8 10.1 16 10 16.2 9.9 16.4 9.8 16.5 9.6 16.6 9.5 16.8 9.2 16.9 8.8 16.9 8.5 16.9 8.3 16.9 8.2 16.8 8 16.8 7.8 16.7 7.7 16.6 7.5 16.5 7.3 16.3 7.2 16.2 7.1 16 7 15.9 6.9 15.8 6.9 15.7 6.9 15.6 6.8 15.5 6.8L6.2 4.8C6.2 5 6 5.2 5.9 5.3 5.7 5.6 5.5 5.8 5.3 6 4.9 6.2 4.5 6.4 4.1 6.5 3.8 6.6 3.5 6.6 3.2 6.6 3 6.6 2.8 6.6 2.7 6.6 2.6 6.6 2.6 6.5 2.6 6.5 2.5 6.5 2.3 6.5 2.1 6.4 1.8 6.3 1.6 6.1 1.3 6 1 5.7 0.7 5.4 0.5 5 0.3 4.7 0.2 4.4 0.1 4.1 0 3.8 0 3.6 0 3.3 0 2.8 0.1 2.2 0.4 1.7 0.5 1.5 0.7 1.3 0.8 1.1 1.1 0.8 1.3 0.6 1.6 0.5 2 0.3 2.3 0.1 2.7 0.1 3.1 0 3.6 0 4 0.1 4.4 0.2 4.8 0.3 5.1 0.5 5.5 0.8 5.7 1 6 1.3 6.2 1.6 6.3 1.9 6.4 2.3 6.5 2.5 6.6 2.7 6.6 3 6.6 3 6.6 3.1 6.6 3.1 9.7 3.8 12.8 4.4 15.9 5.1 16.1 5.1 16.2 5.2 16.4 5.2 16.7 5.3 16.9 5.5 17.2 5.6 17.5 5.9 17.8 6.2 18.1 6.5 18.3 6.8 18.4 7.2 18.6 7.5 18.6 7.9 18.7 8.2 18.7 8.6 18.7 9 18.6 9.4 18.4 9.8 18.3 10.1 18.2 10.3 18 10.6 17.8 10.9 17.5 11.1 17.3 11.3 16.9 11.6 16.5 11.8 16 11.9 15.7 12 15.3 12 15 12 14.8 12 14.7 12 14.5 11.9 13.9 11.8 13.3 11.7 12.6 11.5 12.5 11.7 12.4 11.9 12.3 12 12.1 12.3 11.9 12.5 11.7 12.7 11.3 12.9 10.9 13.1 10.5 13.2 10.2 13.3 9.9 13.3 9.6 13.3 9.4 13.3 9.2 13.3 9 13.2 9 13.2 9 13.2 9 13.2 8.8 13.2 8.7 13.2 8.5 13.1 8.2 13 8 12.8 7.7 12.6 7.4 12.4 7.1 12 6.8 11.7 6.7 11.4 6.6 11.1 6.5 10.8 6.4 10.6 6.4 10.4 6.4 10.2 5.8 10.1 5.2 9.9 4.5 9.8 4.4 9.8 4.4 9.8 4.3 9.8 4.1 9.8 4 9.8 3.8 9.8 3.6 9.9 3.4 10 3.2 10.1 3 10.2 2.9 10.4 2.8 10.5 2.6 10.8 2.5 11.1 2.5 11.5 2.5 11.6 2.5 11.8 2.6 12 2.6 12.1 2.7 12.3 2.8 12.5 2.9 12.6 3.1 12.8 3.2 12.9 3.3 13 3.5 13.1 3.6 13.1 3.7 13.1 3.8 13.2 3.9 13.2L13.1 15.2 13.1 15.2Z" fill="currentColor"></path></g></svg><em>Tutorials</em></a></li><li class="nav-highlights"><a href="https://www.safaribooksonline.com/u/001o000000ijSMHAA2/" class="t-highlights-nav l1 ss-highlights None">Highlights</a></li><li><a href="https://www.safaribooksonline.com/u/" class="t-settings-nav l1 js-settings ss-settings None">Settings</a></li><li><a href="https://community.safaribooksonline.com/" class="l1 no-icon">Feedback</a></li><li><a href="https://www.safaribooksonline.com/accounts/logout/" class="l1 no-icon">Sign Out</a></li></ul><ul class="profile"><li><a href="https://www.safaribooksonline.com/u/" class="l2 None">Settings</a><span class="l2 t-nag-notification" id="nav-nag"><strong class="trial-green">10</strong> days left in your trial.
  
  

  
    
      

<a class="" href="https://www.safaribooksonline.com/subscribe/">Subscribe</a>.


    
  

  

</span></li><li><a href="https://community.safaribooksonline.com/" class="l2">Feedback</a></li><li><a href="https://www.safaribooksonline.com/accounts/logout/" class="l2">Sign Out</a></li></ul></div></li></ul></nav></header>


      </div>
      <div style="height: auto;" id="container" class="application">
        
          <div class="nav-container clearfix">
            


            
            
          </div>

          

  <div class="js-toc">
    
      <div class="sbo-reading-menu sbo-menu-top"><section class="sbo-toc-container toc-menu"><a href="#" class="sbo-toc-thumb"><span class="sbo-title ss-list"><h1><div class="visuallyhidden">Table of Contents for </div>
      
      Software Architecture in Practice, Third Edition
      
    </h1></span></a><div class="toc-contents"></div></section></div>

    

    <div class="interface-controls interface-controls-top">
      <ul class="interface-control-btns js-bitlist js-reader">
        <li class="js-search-in-archive search-in-archive t-search-in-archive"><a href="#" title="Search in archive" class="js-search-controls search-controls"><span class="icon">Search in book...</span></a><form class="search-archive-bar js-search-form"><input name="q" placeholder="Search inside this book..." autocomplete="off" type="search"></form><div class="js-search-results search-archive-results"></div></li><li class="queue-control"><button title="Add to Queue" aria-label="Add to Queue" data-for-analytics="9780132942799:ch01.html" type="button" class="rec-fav ss-queue js-queue js-current-chapter-queue" data-queue-endpoint="/api/v1/book/9780132942799/chapter/ch01.html"><span>Add to Queue</span></button></li><li class="js-font-control-panel font-control-activator"><a href="#" data-push-state="false" id="font-controls" title="Change font size" aria-label="Change font size"><span class="icon">Toggle Font Controls</span></a></li><li class="dropdown sharing-controls"><a href="#" class="trigger" data-push-state="false" title="Share" aria-label="Share"><i class="fa fa-share"></i></a><ul class="social-sharing dropdown-menu"><li><a class="twitter share-button t-twitter" target="_blank" aria-label="Share this section on Twitter" title="Share this section on Twitter" href="https://twitter.com/share?url=https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/copyright.html&amp;text=Software%20Architecture%20in%20Practice%2C%20Third%20Edition&amp;via=safari"><span>Twitter</span></a></li><li><a class="facebook share-button t-facebook" target="_blank" aria-label="Share this section on Facebook" title="Share this section on Facebook" href="https://www.facebook.com/sharer/sharer.php?u=https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/copyright.html"><span>Facebook</span></a></li><li><a class="googleplus share-button t-googleplus" target="_blank" aria-label="Share this secton on Google Plus" title="Share this secton on Google Plus" href="https://plus.google.com/share?url=https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/copyright.html"><span>Google Plus</span></a></li><li><a class="email share-button t-email" aria-label="Share this section via email" title="Share this section via email" href="mailto:?subject=Safari:%20Copyright%20Page&amp;body=https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/copyright.html%0D%0Afrom%20Software%20Architecture%20in%20Practice%2C%20Third%20Edition%0D%0A"><span>Email</span></a></li></ul></li>
      </ul>
    </div>

    <section role="document">
	  <div class="t-sbo-prev sbo-prev sbo-nav-top">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/part01.html" class="prev nav-link">
      
          <span aria-hidden="true" class="pagination-label t-prev-label">Prev</span>
          <span class="visuallyhidden">Previous Chapter</span>
          <div class="pagination-title t-prev-title">Part One: Introduction</div>
        </a>
    
  
  </div>

  <div class="t-sbo-next sbo-next sbo-nav-top">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch02.html" class="next nav-link">
      
          <span aria-hidden="true" class="pagination-label t-next-label">Next</span>
          <span class="visuallyhidden">Next Chapter</span>
          <div class="pagination-title t-next-title">2. Why Is Software Architecture Important?</div>
        </a>
    
  
  </div>



<div id="sbo-rt-content"><div class="annotator-wrapper"><h2 id="ch01"><a id="page_3"></a>1. What Is Software Architecture?</h2>
<div class="attri">
<p class="blockquote"><em>Good judgment is usually the result of 
experience. And experience is frequently the result of bad judgment. But
 to learn from the experience of others requires those who have the 
experience to share the knowledge with those who follow.</em></p>
<p class="attribution">—Barry LePatner</p>
</div>
<p class="noindent">Writing (on our part) and reading (on your part) a 
book about software architecture, which distills the experience of many 
people, presupposes that</p>
<p class="indenthangingN"><strong>1.</strong> having a software architecture is important to the successful development of a software system and</p>
<p class="indenthangingN"><strong>2.</strong> there is a sufficient, and sufficiently generalizable, body of knowledge about software architecture to fill up a book.</p>
<p class="noindent">One purpose of this book is to convince you that 
both of these assumptions are true, and once you are convinced, give you
 a basic knowledge so that you can apply it yourself.</p>
<p class="indent">Software systems are constructed to satisfy 
organizations’ business goals. The architecture is a bridge between 
those (often abstract) business goals and the final (concrete) resulting
 system. While the path from abstract goals to concrete systems can be 
complex, the good news is that software architectures can be designed, 
analyzed, documented, and implemented using known techniques that will 
support the achievement of these business and mission goals. The 
complexity can be tamed, made tractable.</p>
<p class="indent">These, then, are the topics for this book: the design,
 analysis, documentation, and implementation of architectures. We will 
also examine the influences, principally in the form of business goals 
and quality attributes, which inform these activities.</p>
<p class="noindent"><a id="page_4"></a>In this chapter we will focus on 
architecture strictly from a software engineering point of view. That 
is, we will explore the value that a software architecture brings to a 
development project. (Later chapters will take a business and 
organizational perspective.)</p>
<h3 id="ch01lev1sec1">1.1. What Software Architecture Is and What It Isn’t</h3>
<p class="indent">There are many definitions of software architecture, easily discoverable with a web search, but the one we like is this one:</p>
<p class="blockquote">The software architecture of a system is the set 
of structures needed to reason about the system, which comprise software
 elements, relations among them, and properties of both.</p>
<p class="indent">This definition stands in contrast to other 
definitions that talk about the system’s “early” or “major” design 
decisions. While it is true that many architectural decisions are made 
early, not all are—especially in Agile or spiral-development projects. 
It’s also true that very many decisions are made early that are not 
architectural. Also, it’s hard to look at a decision and tell whether or
 not it’s “major.” Sometimes only time will tell. And since writing down
 an architecture is one of the architect’s most important obligations, 
we need to know now which decisions an architecture comprises.</p>
<p class="indent">Structures, on the other hand, are fairly easy to identify in software, and they form a powerful tool for system design.</p>
<p class="indent">Let us look at some of the implications of our definition.</p>
<h4 id="ch01lev2sec1">Architecture Is a Set of Software Structures</h4>
<p class="noindent">This is the first and most obvious implication of 
our definition. A structure is simply a set of elements held together by
 a relation. Software systems are composed of many structures, and no 
single structure holds claim to being <em>the</em> architecture. There 
are three categories of architectural structures, which will play an 
important role in the design, documentation, and analysis of 
architectures:</p>
<p class="indenthangingN"><strong>1.</strong> First, some structures partition systems into implementation units, which in this book we call <em>modules</em>.
 Modules are assigned specific computational responsibilities, and are 
the basis of work assignments for programming teams (Team A works on the
 database, Team B works on the business rules, Team C works on the user 
interface, etc.). In large projects, these elements (modules) are 
subdivided for assignment to subteams. For example, the database for a 
large enterprise resource planning (ERP) implementation might be so 
complex that its implementation is split into many parts. The structure 
that captures that decomposition is a kind of module structure, the <em>module <a id="page_5"></a>decomposition structure</em>
 in fact. Another kind of module structure emerges as an output of 
object-oriented analysis and design—class diagrams. If you aggregate 
your modules into layers, you’ve created another (and very useful) 
module structure. Module structures are static structures, in that they 
focus on the way the system’s functionality is divided up and assigned 
to implementation teams.</p>
<p class="indenthangingN"><strong>2.</strong> Other structures are 
dynamic, meaning that they focus on the way the elements interact with 
each other at runtime to carry out the system’s functions. Suppose the 
system is to be built as a set of services. The services, the 
infrastructure they interact with, and the synchronization and 
interaction relations among them form another kind of structure often 
used to describe a system. These services are made up of (compiled from)
 the programs in the various implementation units that we just 
described. In this book we will call runtime structures <em>component-and-connector</em> (C&amp;C) structures. The term <em>component</em> is overloaded in software engineering. In our use, a component is always a runtime entity.</p>
<p class="indenthangingN"><strong>3.</strong> A third kind of structure 
describes the mapping from software structures to the system’s 
organizational, developmental, installation, and execution environments.
 For example, modules are assigned to teams to develop, and assigned to 
places in a file structure for implementation, integration, and testing.
 Components are deployed onto hardware in order to execute. These 
mappings are called <em>allocation</em> structures.</p>
<p class="indent">Although software comprises an endless supply of 
structures, not all of them are architectural. For example, the set of 
lines of source code that contain the letter “z,” ordered by increasing 
length from shortest to longest, is a software structure. But it’s not a
 very interesting one, nor is it architectural. A structure is 
architectural if it supports reasoning about the system and the system’s
 properties. The reasoning should be about an attribute of the system 
that is important to some stakeholder. These include functionality 
achieved by the system, the availability of the system in the face of 
faults, the difficulty of making specific changes to the system, the 
responsiveness of the system to user requests, and many others. We will 
spend a great deal of time in this book on the relationship between 
architecture and quality attributes like these.</p>
<p class="indent">Thus, the set of architectural structures is not fixed
 or limited. What is architectural is what is useful in your context for
 your system.</p>
<h4 id="ch01lev2sec2">Architecture Is an Abstraction</h4>
<p class="noindent">Because architecture consists of structures and structures consist of elements<sup><a class="totri-footnote" id="ch01fn01" href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/footnotes.html#ch01fn01a">1</a></sup> and relations, it follows that an architecture comprises software elements and <a id="page_6"></a>how
 the elements relate to each other. This means that architecture 
specifically omits certain information about elements that is not useful
 for reasoning about the system—in particular, it omits information that
 has no ramifications outside of a single element. Thus, an architecture
 is foremost an <em>abstraction</em> of a system that selects certain 
details and suppresses others. In all modern systems, elements interact 
with each other by means of interfaces that partition details about an 
element into public and private parts. Architecture is concerned with 
the public side of this division; private details of elements—details 
having to do solely with internal implementation—are not architectural. 
Beyond just interfaces, though, the architectural abstraction lets us 
look at the system in terms of its elements, how they are arranged, how 
they interact, how they are composed, what their properties are that 
support our system reasoning, and so forth. This abstraction is 
essential to taming the complexity of a system—we simply cannot, and do 
not want to, deal with all of the complexity all of the time.</p>
<h4 id="ch01lev2sec3">Every Software System Has a Software Architecture</h4>
<p class="noindent">Every system can be shown to comprise elements and 
relations among them to support some type of reasoning. In the most 
trivial case, a system is itself a single element—an uninteresting and 
probably non-useful architecture, but an architecture nevertheless.</p>
<p class="indent">Even though every system has an architecture, it does 
not necessarily follow that the architecture is known to anyone. Perhaps
 all of the people who designed the system are long gone, the 
documentation has vanished (or was never produced), the source code has 
been lost (or was never delivered), and all we have is the executing 
binary code. This reveals the difference between the architecture of a 
system and the <em>representation</em> of that architecture. Because an 
architecture can exist independently of its description or 
specification, this raises the importance of <em>architecture documentation</em>, which is described in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch18.html#ch18">Chapter 18</a>, and <em>architecture reconstruction</em>, discussed in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch20.html#ch20">Chapter 20</a>.</p>
<h4 id="ch01lev2sec4">Architecture Includes Behavior</h4>
<p class="noindent">The behavior of each element is part of the 
architecture insofar as that behavior can be used to reason about the 
system. This behavior embodies how elements interact with each other, 
which is clearly part of our definition of architecture.</p>
<p class="indent">This tells us that box-and-line drawings that are 
passed off as architectures are in fact not architectures at all. When 
looking at the names of the boxes (database, graphical user interface, 
executive, etc.), a reader may well imagine the functionality and 
behavior of the corresponding elements. This mental image approaches an 
architecture, but it springs from the imagination of the observer’s mind
 and relies on information that is not present. This does not mean that 
the exact behavior and performance of every element must be documented 
in all circumstances—some aspects of behavior are fine-grained and below
 the <a id="page_7"></a>architect’s level of concern. But to the extent 
that an element’s behavior influences another element or influences the 
acceptability of the system as a whole, this behavior must be 
considered, and should be documented, as part of the software 
architecture.</p>
<h4 id="ch01lev2sec5">Not All Architectures Are Good Architectures</h4>
<p class="noindent">The definition is indifferent as to whether the 
architecture for a system is a good one or a bad one. An architecture 
may permit or preclude a system’s achievement of its behavioral, quality
 attribute, and life-cycle requirements. Assuming that we do not accept 
trial and error as the best way to choose an architecture for a 
system—that is, picking an architecture at random, building the system 
from it, and then hacking away and hoping for the best—this raises the 
importance of <em>architecture design</em>, which is treated in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch17.html#ch17">Chapter 17</a>, and <em>architecture evaluation</em>, which we deal with in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch21.html#ch21">Chapter 21</a>.</p>
<div class="sidebar"><hr>
<p class="title"><a id="ch01sb01"></a>System and Enterprise Architectures</p>
<p class="sb-noindent">Two disciplines related to software architecture 
are system architecture and enterprise architecture. Both of these 
disciplines have broader concerns than software and affect software 
architecture through the establishment of constraints within which a 
software system must live. In both cases, the software architect for a 
system should be on the team that provides input into the decisions made
 about the system or the enterprise.</p>
<p class="division">System architecture</p>
<p class="sb-noindent">A system’s architecture is a representation of a 
system in which there is a mapping of functionality onto hardware and 
software components, a mapping of the software architecture onto the 
hardware architecture, and a concern for the human interaction with 
these components. That is, system architecture is concerned with a total
 system, including hardware, software, and humans.</p>
<p class="sb-indent">A system architecture will determine, for example, 
the functionality that is assigned to different processors and the type 
of network that connects those processors. The software architecture on 
each of those processors will determine how this functionality is 
implemented and how the various processors interact through the exchange
 of messages on the network.</p>
<p class="sb-indent">A description of the software architecture, as it 
is mapped to hardware and networking components, allows reasoning about 
qualities such as performance and reliability. A description of the 
system architecture will allow reasoning about additional qualities such
 as power consumption, weight, and physical footprint.</p>
<p class="sb-indent">When a particular system is designed, there is 
frequently negotiation between the system architect and the software 
architect as to the distribution <a id="page_8"></a>of functionality and, consequently, the constraints placed on the software architecture.</p>
<p class="division">Enterprise architecture</p>
<p class="sb-noindent">Enterprise architecture is a description of the 
structure and behavior of an organization’s processes, information flow,
 personnel, and organizational subunits, aligned with the organization’s
 core goals and strategic direction. An enterprise architecture need not
 include information systems—clearly organizations had architectures 
that fit the preceding definition prior to the advent of computers—but 
these days, enterprise architectures for all but the smallest businesses
 are unthinkable without information system support. Thus, a modern 
enterprise architecture is concerned with how an enterprise’s software 
systems support the business processes and goals of the enterprise. 
Typically included in this set of concerns is a process for deciding 
which systems with which functionality should be supported by an 
enterprise.</p>
<p class="sb-indent">An enterprise architecture will specify the data 
model that various systems use to interact, for example. It will specify
 rules for how the enterprise’s systems interact with external systems.</p>
<p class="sb-indent">Software is only one concern of enterprise 
architecture. Two other common concerns addressed by enterprise 
architecture are how the software is used by humans to perform business 
processes, and the standards that determine the computational 
environment.</p>
<p class="sb-indent">Sometimes the software infrastructure that supports
 communication among systems and with the external world is considered a
 portion of the enterprise architecture; other times, this 
infrastructure is considered one of the systems within an enterprise. 
(In either case, the architecture of that infrastructure is a <em>software</em>
 architecture!) These two views will result in different management 
structures and spheres of influence for the individuals concerned with 
the infrastructure.</p>
<p class="sb-indent">The system and the enterprise provide environments 
for, and constraints on, the software architecture. The software 
architecture must live within the system and enterprise, and 
increasingly it is the focus for achieving the organization’s business 
goals. But all three forms of architecture share important 
commonalities: They are concerned with major elements taken as 
abstractions, the relationships among the elements, and how the elements
 together meet the behavioral and quality goals of the thing being 
built.</p>
<p class="division">Are these in scope for this book? Yes! (Well, no.)</p>
<p class="sb-noindent">System and enterprise architectures share a great
 deal with software architectures. All can be designed, evaluated, and 
documented; all answer to requirements; all are intended to satisfy 
stakeholders; all consist of structures, which in turn consist of 
elements and relationships; all have a repertoire of patterns and styles
 at their respective architects’ disposal; and the list goes on. So to 
the extent that these architectures share commonalities with software 
architecture, they are in the scope of this book. But like all technical
 disciplines, each has its own specialized vocabulary and techniques, 
and we won’t cover those. Copious other sources do.</p>
<hr></div>
<h3 id="ch01lev1sec2"><a id="page_9"></a>1.2. Architectural Structures and Views</h3>
<p class="noindent">The neurologist, the orthopedist, the hematologist, 
and the dermatologist all have different views of the structure of a 
human body. Ophthalmologists, cardiologists, and podiatrists concentrate
 on specific subsystems. And the kinesiologist and psychiatrist are 
concerned with different aspects of the entire arrangement’s behavior. 
Although these views are pictured differently and have very different 
properties, all are inherently related, interconnected: together they 
describe the architecture of the human body. <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch01.html#ch01fig01">Figure 1.1</a> shows several different views of the human body: the skeletal, the vascular, and the X-ray.</p>
<div class="image"><a id="ch01fig01"></a><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/01fig01.jpg" src="Chapter1_files/01fig01.jpg" alt="Image" height="453" width="611"></div>
<p class="fig-caption">Figure 1.1. Physiological structures (Getty images: Brand X Pictures [skeleton], Don Farrall [woman], Mads Abildgaard [man])</p>
<p class="indent">So it is with software. Modern systems are frequently 
too complex to grasp all at once. Instead, we restrict our attention at 
any one moment to one (or a small number) of the software system’s 
structures. To communicate meaningfully about an architecture, we must 
make clear which structure or structures we are discussing at the 
moment—which <em>view</em> we are taking of the architecture.</p>
<h4 id="ch01lev2sec6"><a id="page_10"></a>Structures and Views</h4>
<p class="noindent">We will be using the related terms <em>structure</em> and <em>view</em> when discussing architecture representation.</p>
<p class="indenthangingB">• A view is a representation of a coherent set
 of architectural elements, as written by and read by system 
stakeholders. It consists of a representation of a set of elements and 
the relations among them.</p>
<p class="indenthangingB">• A structure is the set of elements itself, as they exist in software or hardware.</p>
<p class="indent">In short, a view is a representation of a structure. For example, a module <em>structure</em> is the set of the system’s modules and their organization. A module <em>view</em>
 is the representation of that structure, documented according to a 
template in a chosen notation, and used by some system stakeholders.</p>
<p class="indent">So: Architects design structures. They document views of those structures.</p>
<h4 id="ch01lev2sec7">Three Kinds of Structures</h4>
<p class="noindent">As we saw in the previous section, architectural 
structures can be divided into three major categories, depending on the 
broad nature of the elements they show. These correspond to the three 
broad kinds of decisions that architectural design involves:</p>
<p class="indenthangingN"><strong>1.</strong> <em>Module structures</em>
 embody decisions as to how the system is to be structured as a set of 
code or data units that have to be constructed or procured. In any 
module structure, the elements are modules of some kind (perhaps 
classes, or layers, or merely divisions of functionality, all of which 
are units of implementation). Modules represent a static way of 
considering the system. Modules are assigned areas of functional 
responsibility; there is less emphasis in these structures on how the 
resulting software manifests itself at runtime. Module structures allow 
us to answer questions such as these:</p>
<p class="indenthangingNB">• What is the primary functional responsibility assigned to each module?</p>
<p class="indenthangingNB">• What other software elements is a module allowed to use?</p>
<p class="indenthangingNB">• What other software does it actually use and depend on?</p>
<p class="indenthangingNB">• What modules are related to other modules by generalization or specialization (i.e., inheritance) relationships?</p>
<p class="indenthangingNP">Module structures convey this information 
directly, but they can also be used by extension to ask questions about 
the impact on the system when the responsibilities assigned to each 
module change. In other words, examining a system’s module 
structures—that is, looking at its module views—is an excellent way to 
reason about a system’s modifiability.</p>
<p class="indenthangingN"><strong>2.</strong> <em>Component-and-connector structures</em>
 embody decisions as to how the system is to be structured as a set of 
elements that have runtime behavior (components) and interactions 
(connectors). In these structures, the <a id="page_11"></a>elements are 
runtime components (which are the principal units of computation and 
could be services, peers, clients, servers, filters, or many other types
 of runtime elements) and connectors (which are the communication 
vehicles among components, such as call-return, process synchronization 
operators, pipes, or others). Component-and-connector views help us 
answer questions such as these:</p>
<p class="indenthangingNB">• What are the major executing components and how do they interact at runtime?</p>
<p class="indenthangingNB">• What are the major shared data stores?</p>
<p class="indenthangingNB">• Which parts of the system are replicated?</p>
<p class="indenthangingNB">• How does data progress through the system?</p>
<p class="indenthangingNB">• What parts of the system can run in parallel?</p>
<p class="indenthangingNB">• Can the system’s structure change as it executes and, if so, how?</p>
<p class="indenthangingNP">By extension, component-and-connector views 
are crucially important for asking questions about the system’s runtime 
properties such as performance, security, availability, and more.</p>
<p class="indenthangingN"><strong>3.</strong> <em>Allocation structures</em>
 embody decisions as to how the system will relate to nonsoftware 
structures in its environment (such as CPUs, file systems, networks, 
development teams, etc.). These structures show the relationship between
 the software elements and elements in one or more external environments
 in which the software is created and executed. Allocation views help us
 answer questions such as these:</p>
<p class="indenthangingNB">• What processor does each software element execute on?</p>
<p class="indenthangingNB">• In what directories or files is each element stored during development, testing, and system building?</p>
<p class="indenthangingNB">• What is the assignment of each software element to development teams?</p>
<h4 id="ch01lev2sec8">Structures Provide Insight</h4>
<p class="noindent">Structures play such an important role in our 
perspective on software architecture because of the analytical and 
engineering power they hold. Each structure provides a perspective for 
reasoning about some of the relevant quality attributes. For example:</p>
<p class="indenthangingB">• The module “uses” structure, which embodies 
what modules use what other modules, is strongly tied to the ease with 
which a system can be extended or contracted.</p>
<p class="indenthangingB">• The concurrency structure, which embodies 
parallelism within the system, is strongly tied to the ease with which a
 system can be made free of deadlock and performance bottlenecks.</p>
<p class="indenthangingB">• The deployment structure is strongly tied to the achievement of performance, availability, and security goals.</p>
<p class="indent"><a id="page_12"></a>And so forth. Each structure 
provides the architect with a different insight into the design (that 
is, each structure can be analyzed for its ability to deliver a quality 
attribute). But perhaps more important, each structure presents the 
architect with an engineering leverage point: By designing the 
structures appropriately, the desired quality attributes emerge.</p>
<p class="indent">Scenarios, described in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch04.html#ch04">Chapter 4</a>,
 are useful for exercising a given structure as well as its connections 
to other structures. For example, a software engineer wanting to make a 
change to the concurrency structure of a system would need to consult 
the concurrency and deployment views, because the affected mechanisms 
typically involve processes and threads, and physical distribution might
 involve different control mechanisms than would be used if the 
processes were co-located on a single machine. If control mechanisms 
need to be changed, the module decomposition would need to be consulted 
to determine the extent of the changes.</p>
<h4 id="ch01lev2sec9">Some Useful Module Structures</h4>
<p class="noindent">Useful module structures include the following:</p>
<p class="indenthangingB">• <em>Decomposition structure.</em> The units are modules that are related to each other by the <em>is-a-submodule-of</em>
 relation, showing how modules are decomposed into smaller modules 
recursively until the modules are small enough to be easily understood. 
Modules in this structure represent a common starting point for design, 
as the architect enumerates what the units of software will have to do 
and assigns each item to a module for subsequent (more detailed) design 
and eventual implementation. Modules often have products (such as 
interface specifications, code, test plans, etc.) associated with them. 
The decomposition structure determines, to a large degree, the system’s 
modifiability, by assuring that likely changes are localized. That is, 
changes fall within the purview of at most a few (preferably small) 
modules. This structure is often used as the basis for the development 
project’s organization, including the structure of the documentation, 
and the project’s integration and test plans. The units in this 
structure tend to have names that are organization-specific such as 
“segment” or “subsystem.”</p>
<p class="indenthangingB">• <em>Uses structure.</em> In this important but overlooked structure, the units here are also modules, perhaps classes. The units are related by the <em>uses</em>
 relation, a specialized form of dependency. A unit of software uses 
another if the correctness of the first requires the presence of a 
correctly functioning version (as opposed to a stub) of the second. The 
uses structure is used to engineer systems that can be extended to add 
functionality, or from which useful functional subsets can be extracted.
 The ability to easily create a subset of a system allows for 
incremental development.</p>
<p class="indenthangingB"><a id="page_13"></a>• <em>Layer structure.</em>
 The modules in this structure are called layers. A layer is an abstract
 “virtual machine” that provides a cohesive set of services through a 
managed interface. Layers are allowed to use other layers in a strictly 
managed fashion; in strictly layered systems, a layer is only allowed to
 use the layer immediately below. This structure is used to imbue a 
system with portability, the ability to change the underlying computing 
platform.</p>
<p class="indenthangingB">• <em>Class (or generalization) structure</em>. The module units in this structure are called classes. The relation is <em>inherits from</em> or <em>is an instance of</em>.
 This view supports reasoning about collections of similar behavior or 
capability (e.g., the classes that other classes inherit from) and 
parameterized differences. The class structure allows one to reason 
about reuse and the incremental addition of functionality. If any 
documentation exists for a project that has followed an object-oriented 
analysis and design process, it is typically this structure.</p>
<p class="indenthangingB">• <em>Data model.</em> The data model 
describes the static information structure in terms of data entities and
 their relationships. For example, in a banking system, entities will 
typically include Account, Customer, and Loan. Account has several 
attributes, such as account number, type (savings or checking), status, 
and current balance. A relationship may dictate that one customer can 
have one or more accounts, and one account is associated to one or two 
customers.</p>
<h4 id="ch01lev2sec10">Some Useful C&amp;C Structures</h4>
<p class="noindent">Component-and-connector structures show a runtime 
view of the system. In these structures the modules described above have
 all been compiled into executable forms. All component-and-connector 
structures are thus orthogonal to the module-based structures and deal 
with the dynamic aspects of a running system. The relation in all 
component-and-connector structures is <em>attachment</em>, showing how 
the components and the connectors are hooked together. (The connectors 
themselves can be familiar constructs such as “invokes.”) Useful C&amp;C
 structures include the following:</p>
<p class="indenthangingB">• <em>Service structure</em>. The units here are services that interoperate with each other by service coordination mechanisms such as SOAP (see <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch06.html#ch06">Chapter 6</a>).
 The service structure is an important structure to help engineer a 
system composed of components that may have been developed anonymously 
and independently of each other.</p>
<p class="indenthangingB">• <em>Concurrency structure</em>. This 
component-and-connector structure allows the architect to determine 
opportunities for parallelism and the locations where resource 
contention may occur. The units are components and the connectors are 
their communication mechanisms. The components are arranged into <em>logical threads</em>; a logical thread is a sequence of computations that <a id="page_14"></a>could
 be allocated to a separate physical thread later in the design process.
 The concurrency structure is used early in the design process to 
identify the requirements to manage the issues associated with 
concurrent execution.</p>
<h4 id="ch01lev2sec11">Some Useful Allocation Structures</h4>
<p class="noindent">Allocation structures define how the elements from 
C&amp;C or module structures map onto things that are not software: 
typically hardware, teams, and file systems. Useful allocation 
structures include these:</p>
<p class="indenthangingB">• <em>Deployment structure</em>. The 
deployment structure shows how software is assigned to hardware 
processing and communication elements. The elements are software 
elements (usually a process from a C&amp;C view), hardware entities 
(processors), and communication pathways. Relations are <em>allocated-to</em>, showing on which physical units the software elements reside, and <em>migrates-to</em>
 if the allocation is dynamic. This structure can be used to reason 
about performance, data integrity, security, and availability. It is of 
particular interest in distributed and parallel systems.</p>
<p class="indenthangingB">• <em>Implementation structure</em>. This 
structure shows how software elements (usually modules) are mapped to 
the file structure(s) in the system’s development, integration, or 
configuration control environments. This is critical for the management 
of development activities and build processes. (In practice, a 
screenshot of your development environment tool, which manages the 
implementation environment, often makes a very useful and sufficient 
diagram of your implementation view.)</p>
<p class="indenthangingB">• <em>Work assignment structure.</em> This 
structure assigns responsibility for implementing and integrating the 
modules to the teams who will carry it out. Having a work assignment 
structure be part of the architecture makes it clear that the decision 
about who does the work has architectural as well as management 
implications. The architect will know the expertise required on each 
team. Also, on large multi-sourced distributed development projects, the
 work assignment structure is the means for calling out units of 
functional commonality and assigning those to a single team, rather than
 having them implemented by everyone who needs them. This structure will
 also determine the major communication pathways among the teams: 
regular teleconferences, wikis, email lists, and so forth.</p>
<p class="indent"><a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch01.html#ch01tab01">Table 1.1</a>
 summarizes these structures. The table lists the meaning of the 
elements and relations in each structure and tells what each might be 
used for.</p>
<p class="tab-caption"><a id="ch01tab01"></a>Table 1.1. Useful Architectural Structures</p>
<div class="image"><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/01tab01.jpg" src="Chapter1_files/01tab01.jpg" alt="Image" height="534" width="1018"></div>
<h4 id="ch01lev2sec12">Relating Structures to Each Other</h4>
<p class="noindent">Each of these structures provides a different 
perspective and design handle on a system, and each is valid and useful 
in its own right. Although the structures give different system 
perspectives, they are not independent. Elements of one structure will 
be related to elements of other structures, and we need to reason about 
these relations. For example, a module in a decomposition structure may 
be manifested as one, part of one, or several components in one of the 
component-and-connector structures, reflecting its runtime alter ego. In
 general, mappings between structures are many to many.</p>
<p class="indent"><a id="page_15"></a><a id="page_16"></a><a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch01.html#ch01fig02">Figure 1.2</a>
 shows a very simple example of how two structures might relate to each 
other. The figure on the left shows a module decomposition view of a 
tiny client-server system. In this system, two modules must be 
implemented: The client software and the server software. The figure on 
the right shows a component-and-connector view of the same system. At 
runtime there are ten clients running and accessing the server. Thus, 
this little system has two modules and eleven components (and ten 
connectors).</p>
<div class="image"><a id="ch01fig02"></a><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/01fig02.jpg" src="Chapter1_files/01fig02.jpg" alt="Image" height="277" width="630"></div>
<p class="fig-caption">Figure 1.2. Two views of a client-server system</p>
<p class="indent">Whereas the correspondence between the elements in the
 decomposition structure and the client-server structure is obvious, 
these two views are used for very different things. For example, the 
view on the right could be used for performance analysis, bottleneck 
prediction, and network traffic management, which would be extremely 
difficult or impossible to do with the view on the left.</p>
<p class="indent">(In <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13">Chapter 13</a>
 we’ll learn about the map-reduce pattern, in which copies of simple, 
identical functionality are distributed across hundreds or thousands of 
processing nodes—one module for the whole system, but one component per 
node.)</p>
<p class="indent">Individual projects sometimes consider one structure 
dominant and cast other structures, when possible, in terms of the 
dominant structure. Often the dominant structure is the module 
decomposition structure. This is for a good reason: it tends to spawn 
the project structure, because it mirrors the team structure of 
development. In other projects, the dominant structure might be a 
C&amp;C structure that shows how the system’s functionality and/or 
critical quality attributes are achieved.</p>
<h4 id="ch01lev2sec13"><a id="page_17"></a>Fewer Is Better</h4>
<p class="noindent">Not all systems warrant consideration of many 
architectural structures. The larger the system, the more dramatic the 
difference between these structures tends to be; but for small systems 
we can often get by with fewer. Instead of working with each of several 
component-and-connector structures, usually a single one will do. If 
there is only one process, then the process structure collapses to a 
single node and need not be explicitly represented in the design. If 
there is to be no distribution (that is, if the system is implemented on
 a single processor), then the deployment structure is trivial and need 
not be considered further. In general, design and document a structure 
only if doing so brings a positive return on the investment, usually in 
terms of decreased development or maintenance costs.</p>
<h4 id="ch01lev2sec14">Which Structures to Choose?</h4>
<p class="noindent">We have briefly described a number of useful 
architectural structures, and there are many more. Which ones shall an 
architect choose to work on? Which ones shall the architect choose to 
document? Surely not all of them. <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch18.html#ch18">Chapter 18</a>
 will treat this topic in more depth, but for now a good answer is that 
you should think about how the various structures available to you 
provide insight and leverage into the system’s most important quality 
attributes, and then choose the ones that will play the best role in 
delivering those attributes.</p>
<div class="sidebar"><hr>
<p class="title"><a id="ch01sb02"></a>Ask Cal</p>
<p class="sb-noindent">More than a decade ago I went to a customer site 
to do an architecture evaluation—one of the first instances of the 
Architecture Tradeoff Analysis Method (ATAM) that I had ever performed 
(you can read about the ATAM, and other architecture evaluation topics, 
in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch21.html#ch21">Chapter 21</a>).
 In those early days, we were still figuring out how to make 
architecture evaluations repeatable and predictable, and how to 
guarantee useful outcomes from them. One of the ways that we ensured 
useful outcomes was to enforce certain preconditions on the evaluation. A
 precondition that we figured out rather quickly was this: if the 
architecture has not been documented, we will not proceed with the 
evaluation. The reason for this precondition was simple: we could not 
evaluate the architecture by reading the code—we didn’t have the time 
for that—and we couldn’t just ask the architect to <a id="page_18"></a>sketch the architecture in real time, since that would produce vague and very likely erroneous representations.</p>
<p class="sb-indent">Okay, it’s not completely true to say that they had <em>no</em>
 architecture documentation. They did produce a single-page diagram, 
with a few boxes and lines. Some of those boxes were, however, clouds. 
Yes, they actually used a cloud as one of their icons. When I pressed 
them on the meaning of this icon—Was it a process? A class? A 
thread?—they waffled. This was not, in fact, architecture documentation.
 It was, at best, “marketecture.”</p>
<p class="sb-indent">But in those early days we had no preconditions and
 so we didn’t stop the evaluation there. We just blithely waded in to 
whatever swamp we found, and we enforced nothing. As I began this 
evaluation, I interviewed some of the key project stakeholders: the 
project manager and several of the architects (this was a large project 
with one lead architect and several subordinates). As it happens, the 
lead architect was away, and so I spent my time with the subordinate 
architects. Every time I asked the subordinates a tough question—“How do
 you ensure that you will meet your latency goal along this critical 
execution path?” or “What are your rules for layering?”—they would 
answer: “Ask Cal. Cal knows that.” Cal was the lead architect. 
Immediately I noted a risk for this system: What if Cal gets hit by a 
bus? What then?</p>
<p class="sb-indent">In the end, because of my pestering, the 
architecture team did in fact produce respectable architecture 
documentation. About halfway through the evaluation, the project manager
 came up to me and shook my hand and thanked me for the great job I had 
done. I was dumbstruck. In my mind I hadn’t done anything, at that 
point; the evaluation was only partially complete and I hadn’t produced a
 single report or finding. I said that to the manager and he said: “You 
got those guys to document the architecture. I’ve never been able to get
 them to do that. So . . . thanks!”</p>
<p class="sb-indent">If Cal had been hit by a bus or just left the 
company, they would have had a serious problem on their hands: all of 
that architectural knowledge located in one guy’s head and he is no 
longer with the organization. In can happen. It <em>does</em> happen.</p>
<p class="sb-indent">The moral of this story? An architecture that is 
not documented, and not communicated, may still be a good architecture, 
but the risks surrounding it are enormous.</p>
<p class="attribution">—<em>RK</em></p>
<hr></div>
<h3 id="ch01lev1sec3">1.3. Architectural Patterns</h3>
<p class="noindent">In some cases, architectural elements are composed 
in ways that solve particular problems. The compositions have been found
 useful over time, and over many different domains, and so they have 
been documented and disseminated. These compositions of architectural 
elements, called <em>architectural patterns</em>, provide packaged strategies for solving some of the problems facing a system.</p>
<p class="indent"><a id="page_19"></a>An architectural pattern 
delineates the element types and their forms of interaction used in 
solving the problem. Patterns can be characterized according to the type
 of architectural elements they use. For example, a common module type 
pattern is this:</p>
<p class="indenthangingB">• <em>Layered pattern</em>. When the <em>uses</em>
 relation among software elements is strictly unidirectional, a system 
of layers emerges. A layer is a coherent set of related functionality. 
In a <em>strictly</em> layered structure, a layer can only use the 
services of the layer immediately below it. Many variations of this 
pattern, lessening the structural restriction, occur in practice. Layers
 are often designed as abstractions (virtual machines) that hide 
implementation specifics below from the layers above, engendering 
portability.</p>
<p class="indenthangingBP">Common component-and-connector type patterns are these:</p>
<p class="indenthangingB">• <em>Shared-data (or repository) pattern.</em>
 This pattern comprises components and connectors that create, store, 
and access persistent data. The repository usually takes the form of a 
(commercial) database. The connectors are protocols for managing the 
data, such as SQL.</p>
<p class="indenthangingB">• <em>Client-server pattern.</em> The 
components are the clients and the servers, and the connectors are 
protocols and messages they share among each other to carry out the 
system’s work.</p>
<p class="indenthangingBP">Common allocation patterns include the following:</p>
<p class="indenthangingB">• <em>Multi-tier pattern</em>, which describes
 how to distribute and allocate the components of a system in distinct 
subsets of hardware and software, connected by some communication 
medium. This pattern specializes the generic deployment 
(software-to-hardware allocation) structure.</p>
<p class="indenthangingB">• <em>Competence center</em> and <em>platform</em>, which are patterns that specialize a software system’s work assignment structure. In <em>competence center</em>,
 work is allocated to sites depending on the technical or domain 
expertise located at a site. For example, user-interface design is done 
at a site where usability engineering experts are located. In <em>platform</em>, one site is tasked with developing reusable core assets of a software product line (see <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch25.html#ch25">Chapter 25</a>), and other sites develop applications that use the core assets.</p>
<p class="indenthangingBP">Architectural patterns will be investigated much further in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13">Chapter 13</a>.</p>
<h3 id="ch01lev1sec4">1.4. What Makes a “Good” Architecture?</h3>
<p class="noindent">There is no such thing as an inherently good or bad 
architecture. Architectures are either more or less fit for some 
purpose. A three-tier layered service-oriented architecture may be just 
the ticket for a large enterprise’s web-based B2B system <a id="page_20"></a>but
 completely wrong for an avionics application. An architecture carefully
 crafted to achieve high modifiability does not make sense for a 
throwaway prototype (and vice versa!). One of the messages of this book 
is that architectures can in fact be <em>evaluated</em>—one of the great benefits of paying attention to them—but only in the context of specific stated goals.</p>
<p class="indent">Nevertheless, there are rules of thumb that should be 
followed when designing most architectures. Failure to apply any of 
these does not automatically mean that the architecture will be fatally 
flawed, but it should at least serve as a warning sign that should be 
investigated.</p>
<p class="indent">We divide our observations into two clusters: process 
recommendations and product (or structural) recommendations. Our process
 recommendations are the following:</p>
<p class="indenthangingN"><strong>1.</strong> The architecture should be
 the product of a single architect or a small group of architects with 
an identified technical leader. This approach gives the architecture its
 conceptual integrity and technical consistency. This recommendation 
holds for Agile and open source projects as well as “traditional” ones. 
There should be a strong connection between the architect(s) and the 
development team, to avoid ivory tower designs that are impractical.</p>
<p class="indenthangingN"><strong>2.</strong> The architect (or 
architecture team) should, on an ongoing basis, base the architecture on
 a prioritized list of well-specified quality attribute requirements. 
These will inform the tradeoffs that always occur. Functionality matters
 less.</p>
<p class="indenthangingN"><strong>3.</strong> The architecture should be
 documented using views. The views should address the concerns of the 
most important stakeholders in support of the project timeline. This 
might mean minimal documentation at first, elaborated later. Concerns 
usually are related to construction, analysis, and maintenance of the 
system, as well as education of new stakeholders about the system.</p>
<p class="indenthangingN"><strong>4.</strong> The architecture should be
 evaluated for its ability to deliver the system’s important quality 
attributes. This should occur early in the life cycle, when it returns 
the most benefit, and repeated as appropriate, to ensure that changes to
 the architecture (or the environment for which it is intended) have not
 rendered the design obsolete.</p>
<p class="indenthangingN"><strong>5.</strong> The architecture should 
lend itself to incremental implementation, to avoid having to integrate 
everything at once (which almost never works) as well as to discover 
problems early. One way to do this is to create a “skeletal” system in 
which the communication paths are exercised but which at first has 
minimal functionality. This skeletal system can be used to “grow” the 
system incrementally, refactoring as necessary.</p>
<p class="indent">Our structural rules of thumb are as follows:</p>
<p class="indenthangingN"><strong>1.</strong> The architecture should 
feature well-defined modules whose functional responsibilities are 
assigned on the principles of information hiding and <a id="page_21"></a>separation
 of concerns. The information-hiding modules should encapsulate things 
likely to change, thus insulating the software from the effects of those
 changes. Each module should have a well-defined interface that 
encapsulates or “hides” the changeable aspects from other software that 
uses its facilities. These interfaces should allow their respective 
development teams to work largely independently of each other.</p>
<p class="indenthangingN"><strong>2.</strong> Unless your requirements 
are unprecedented—possible, but unlikely—your quality attributes should 
be achieved using well-known architectural patterns and tactics 
(described in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13">Chapter 13</a>) specific to each attribute.</p>
<p class="indenthangingN"><strong>3.</strong> The architecture should 
never depend on a particular version of a commercial product or tool. If
 it must, it should be structured so that changing to a different 
version is straightforward and inexpensive.</p>
<p class="indenthangingN"><strong>4.</strong> Modules that produce data 
should be separate from modules that consume data. This tends to 
increase modifiability because changes are frequently confined to either
 the production or the consumption side of data. If new data is added, 
both sides will have to change, but the separation allows for a staged 
(incremental) upgrade.</p>
<p class="indenthangingN"><strong>5.</strong> Don’t expect a one-to-one 
correspondence between modules and components. For example, in systems 
with concurrency, there may be multiple instances of a component running
 in parallel, where each component is built from the same module. For 
systems with multiple threads of concurrency, each thread may use 
services from several components, each of which was built from a 
different module.</p>
<p class="indenthangingN"><strong>6.</strong> Every process should be written so that its assignment to a specific processor can be easily changed, perhaps even at runtime.</p>
<p class="indenthangingN"><strong>7.</strong> The architecture should 
feature a small number of ways for components to interact. That is, the 
system should do the same things in the same way throughout. This will 
aid in understandability, reduce development time, increase reliability,
 and enhance modifiability.</p>
<p class="indenthangingN"><strong>8.</strong> The architecture should 
contain a specific (and small) set of resource contention areas, the 
resolution of which is clearly specified and maintained. For example, if
 network utilization is an area of concern, the architect should produce
 (and enforce) for each development team guidelines that will result in a
 minimum of network traffic. If performance is a concern, the architect 
should produce (and enforce) time budgets for the major threads.</p>
<h3 id="ch01lev1sec5">1.5. Summary</h3>
<p class="noindent"><a id="page_22"></a>The software architecture of a 
system is the set of structures needed to reason about the system, which
 comprise software elements, relations among them, and properties of 
both.</p>
<p class="indent">A structure is a set of elements and the relations among them.</p>
<p class="indent">A view is a representation of a coherent set of 
architectural elements, as written by and read by system stakeholders. A
 view is a representation of one or more structures.</p>
<p class="indent">There are three categories of structures:</p>
<p class="indenthangingB">• Module structures show how a system is to be
 structured as a set of code or data units that have to be constructed 
or procured.</p>
<p class="indenthangingB">• Component-and-connector structures show how 
the system is to be structured as a set of elements that have runtime 
behavior (components) and interactions (connectors).</p>
<p class="indenthangingB">• Allocation structures show how the system 
will relate to nonsoftware structures in its environment (such as CPUs, 
file systems, networks, development teams, etc.).</p>
<p class="indent">Structures represent the primary engineering leverage 
points of an architecture. Each structure brings with it the power to 
manipulate one or more quality attributes. They represent a powerful 
approach for creating the architecture (and later, for analyzing it and 
explaining it to its stakeholders). And as we will see in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch18.html#ch18">Chapter 18</a>,
 the structures that the architect has chosen as engineering leverage 
points are also the primary candidates to choose as the basis for 
architecture documentation.</p>
<p class="indent">Every system has a software architecture, but this architecture may be documented and disseminated, or it may not be.</p>
<p class="indent">There is no such thing as an inherently good or bad architecture. Architectures are either more or less fit for some purpose.</p>
<h3 id="ch01lev1sec6">1.6. For Further Reading</h3>
<p class="noindent">The early work of David Parnas laid much of the 
conceptual foundation for what became the study of software 
architecture. A quintessential Parnas reader would include his 
foundational article on information hiding <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_154">[Parnas 72]</a> as well as his works on program families <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_156">[Parnas 76]</a>, the structures inherent in software systems <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_155">[Parnas 74]</a>, and introduction of the uses structure to build subsets and supersets of systems <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_157">[Parnas 79]</a>. All of these papers can be found in the more easily accessible collection of his important papers <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_088">[Hoffman 00]</a>.</p>
<p class="indent">An early paper by Perry and Wolf <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_161">[Perry 92]</a>
 drew an analogy between software architecture views and structures and 
the structures one finds in a house (plumbing, electrical, and so 
forth).</p>
<p class="indent">Software architectural patterns have been extensively catalogued in the series <em>Pattern-Oriented Software Architecture</em> <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_039">[Buschmann 96]</a> and others. <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13">Chapter 13</a> of this book also deals with architectural patterns.</p>
<p class="indent"><a id="page_23"></a>Early papers on architectural views as used in industrial development projects are <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_177">[Soni 95]</a> and <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_115">[Kruchten 95]</a>. The former grew into a book <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_089">[Hofmeister 00]</a>
 that presents a comprehensive picture of using views in development and
 analysis. The latter grew into the Rational Unified Process, about 
which there is no shortage of references, both paper and online. A good 
one is <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_116">[Kruchten 03]</a>.</p>
<p class="indent">Cristina Gacek and her colleagues discuss the process issues surrounding software architecture in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_071">[Gacek 95]</a>.</p>
<p class="indent">Garlan and Shaw’s seminal work on software architecture <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_074">[Garlan 93]</a> provides many excellent examples of architectural styles (a concept similar to patterns).</p>
<p class="indent">In <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_051">[Clements 10a]</a>
 you can find an extended discussion on the difference between an 
architectural pattern and an architectural style. (It argues that a 
pattern is a context-problem-solution triple; a style is simply a 
condensation that focuses most heavily on the solution part.)</p>
<p class="indent">See <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_184">[Taylor 09]</a> for a definition of software architecture based on decisions rather than on structure.</p>
<h3 id="ch01lev1sec7">1.7. Discussion Questions</h3>
<p class="question"><strong>1.</strong> Software architecture is often 
compared to the architecture of buildings as a conceptual analogy. What 
are the strong points of that analogy? What is the correspondence in 
buildings to software architecture structures and views? To patterns? 
What are the weaknesses of the analogy? When does it break down?</p>
<p class="question"><strong>2.</strong> Do the architectures you’ve been
 exposed to document different structures and relations like those 
described in this chapter? If so, which ones? If not, why not?</p>
<p class="question"><strong>3.</strong> Is there a different definition 
of software architecture that you are familiar with? If so, compare and 
contrast it with the definition given in this chapter. Many definitions 
include considerations like “rationale” (stating the reasons why the 
architecture is what it is) or how the architecture will evolve over 
time. Do you agree or disagree that these considerations should be part 
of the definition of software architecture?</p>
<p class="question"><strong>4.</strong> Discuss how an architecture 
serves as a basis for analysis. What about decision-making? What kinds 
of decision-making does an architecture empower?</p>
<p class="question"><strong>5.</strong> What is architecture’s role in project risk reduction?</p>
<p class="question"><a id="page_24"></a><strong>6.</strong> Find a commonly accepted definition of <em>system architecture</em> and discuss what it has in common with software architecture. Do the same for <em>enterprise architecture</em>.</p>
<p class="question"><strong>7.</strong> Find a published example of an 
architecture. What structure or structures are shown? Given its purpose,
 what structure or structures <em>should</em> have been shown? What 
analysis does the architecture support? Critique it: What questions do 
you have that the representation does not answer?</p>
<p class="question"><strong>8.</strong> Sailing ships have 
architectures, which means they have “structures” that lend themselves 
to reasoning about the ship’s performance and other quality attributes. 
Look up the technical definitions for <em>barque</em>, <em>brig</em>, <em>cutter</em>, <em>frigate</em>, <em>ketch</em>, <em>schooner</em>, and <em>sloop</em>. Propose a useful set of “structures” for distinguishing and reasoning about ship architectures.</p>
<div class="annotator-outer annotator-viewer annotator-hide viewer">
  <ul class="annotator-widget annotator-listing"></ul>
</div><div class="annotator-editor-wrapper"><div class="annotator-outer annotator-editor annotator-hide">
  <h3 class="title">Highlight</h3><form class="annotator-widget">
    <ul class="annotator-listing"><li class="annotator-item"><textarea maxlength="750" placeholder="Add a note (optional)" id="annotator-field-11"></textarea></li></ul>
    <div class="annotator-controls">
      <a href="#cancel" class="annotator-cancel button">Cancel</a>
<a href="#save" class="annotator-save annotator-focus button positive">Save</a>
    </div>
  </form>
</div></div><div style="display: none;" class="annotator-adder"><button><span></span></button></div></div></div>



  <div class="t-sbo-prev sbo-prev sbo-nav-bottom">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/part01.html" class="prev nav-link">
      
          <span aria-hidden="true" class="pagination-label t-prev-label">Prev</span>
          <span class="visuallyhidden">Previous Chapter</span>
          <div class="pagination-title t-prev-title">Part One: Introduction</div>
        </a>
    
  
  </div>

  <div class="t-sbo-next sbo-next sbo-nav-bottom">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch02.html" class="next nav-link">
      
          <span aria-hidden="true" class="pagination-label t-next-label">Next</span>
          <span class="visuallyhidden">Next Chapter</span>
          <div class="pagination-title t-next-title">2. Why Is Software Architecture Important?</div>
        </a>
    
  
  </div>

</section>
    <div class="reading-controls-bottom">
      <ul class="interface-controls js-bitlist">
        <li class="queue-control">
            <button title="Add to Queue" aria-label="Add to Queue" data-for-analytics="9780132942799:ch01.html" type="button" class="rec-fav ss-queue js-queue js-current-chapter-queue" data-queue-endpoint="/api/v1/book/9780132942799/chapter/ch01.html">
      <span>Add to Queue</span>
  </button>
        </li>
      </ul>
    </div>
  </div>
  <div class="js-related-container related"><div>
  <h2 class="bitlist-header">People who finished this also enjoyed:</h2>
  <a href="#" class="js-disable-reader-recommendations disable-reader-recommendations-btn" title="Disable our reader recommendations, you can re-enable them in your preferences."></a>
<ul class="articlelist js-bitlist t-bitlist js-related"> 
  

    
      
        





<li class="js-bit format-book js-related js-card" data-api-url="/api/v1/book/9780132906135/chapter/ch30.html">
  <div class="info">

    
    <div class="controls">
      <span class="format-title">
        Book Section
      </span>

      
        <button title="Add to Queue" aria-label="Add to Queue" type="button" class="rec-fav ss-queue js-queue" data-queue-endpoint="/api/v1/book/9780132906135/chapter/ch30.html" data-for-analytics="9780132906135:ch30.html">
            <span>Add to Queue</span>
        </button>
      

      
    </div>
    

    <div class="main">
      <span class="cover">
        <a href="https://www.safaribooksonline.com/library/view/software-systems-architecture/9780132906135/ch30.html">
          
          <span><img src="Chapter1_files/a_009.jpg"></span>
         </a>
      </span>

      <a href="https://www.safaribooksonline.com/library/view/software-systems-architecture/9780132906135/ch30.html" class="next title-block js-bit-title t-bit-link">
        <span class="chapter-title t-bit-title">Working as a Software Architect</span>
      </a>
      <span class="book-title">from: <a href="https://www.safaribooksonline.com/library/view/software-systems-architecture/9780132906135/" class="t-book-title gray-link next">Software Systems Architecture: Working with Stakeholders Using Viewpoints and Perspectives, Second Edition</a>
        <span class="author">by Nick Rozanski</span>
        <span class="issued">Released: October 2011</span>
      </span>

      
  <div class="progress">
    
      <span class="t-time">25 mins</span>
    
  </div>




      
        


  

  <div class="book-topics">
  
    
      
        
        


<ul class="topic-display">

  
	  <li><a href="https://www.safaribooksonline.com/topics/enterprise-architecture" class="topic t-t-link" data-topic-slug="enterprise-architecture">Enterprise Architecture</a></li>
  

</ul>

      
    

  
  </div>

      
    </div>
    
  </div>

</li>


      
    

  

    
      
        





<li class="js-bit format-book js-related js-card" data-api-url="/api/v1/book/0131489062/chapter/ch08.html">
  <div class="info">

    
    <div class="controls">
      <span class="format-title">
        Book Section
      </span>

      
        <button title="Add to Queue" aria-label="Add to Queue" type="button" class="rec-fav ss-queue js-queue" data-queue-endpoint="/api/v1/book/0131489062/chapter/ch08.html" data-for-analytics="0131489062:ch08.html">
            <span>Add to Queue</span>
        </button>
      

      
    </div>
    

    <div class="main">
      <span class="cover">
        <a href="https://www.safaribooksonline.com/library/view/applying-uml-and/0131489062/ch08.html">
          
          <span><img src="Chapter1_files/a_004.jpg"></span>
         </a>
      </span>

      <a href="https://www.safaribooksonline.com/library/view/applying-uml-and/0131489062/ch08.html" class="next title-block js-bit-title t-bit-link">
        <span class="chapter-title t-bit-title">Iteration 1—Basics</span>
      </a>
      <span class="book-title">from: <a href="https://www.safaribooksonline.com/library/view/applying-uml-and/0131489062/" class="t-book-title gray-link next">Applying UML and Patterns: An Introduction to Object-Oriented Analysis and Design and Iterative Development, Third Edition</a>
        <span class="author">by Craig Larman</span>
        <span class="issued">Released: October 2004</span>
      </span>

      
  <div class="progress">
    
      <span class="t-time">10 mins</span>
    
  </div>




      
        


  

  <div class="book-topics">
  
    
      
        
        


<ul class="topic-display">

  
	  <li><a href="https://www.safaribooksonline.com/topics/design-patterns" class="topic t-t-link" data-topic-slug="design-patterns">Design Patterns</a></li>
  

</ul>

      
    

  
  </div>

      
    </div>
    
  </div>

</li>


      
    

  

    
      
        





<li class="js-bit format-book js-related js-card" data-api-url="/api/v1/book/9780132107549/chapter/ch41.html">
  <div class="info">

    
    <div class="controls">
      <span class="format-title">
        Book Section
      </span>

      
        <button title="Add to Queue" aria-label="Add to Queue" type="button" class="rec-fav ss-queue js-queue" data-queue-endpoint="/api/v1/book/9780132107549/chapter/ch41.html" data-for-analytics="9780132107549:ch41.html">
            <span>Add to Queue</span>
        </button>
      

      
    </div>
    

    <div class="main">
      <span class="cover">
        <a href="https://www.safaribooksonline.com/library/view/domain-specific-languages/9780132107549/ch41.html">
          
          <span><img src="Chapter1_files/a_010.jpg"></span>
         </a>
      </span>

      <a href="https://www.safaribooksonline.com/library/view/domain-specific-languages/9780132107549/ch41.html" class="next title-block js-bit-title t-bit-link">
        <span class="chapter-title t-bit-title">Chapter 41. Dynamic Reception</span>
      </a>
      <span class="book-title">from: <a href="https://www.safaribooksonline.com/library/view/domain-specific-languages/9780132107549/" class="t-book-title gray-link next">Domain Specific Languages</a>
        <span class="author">by Martin Fowler</span>
        <span class="issued">Released: September 2010</span>
      </span>

      
  <div class="progress">
    
      <span class="t-time">26 mins</span>
    
  </div>




      
        


  

  <div class="book-topics">
  
    
      
        
        


<ul class="topic-display">

  
	  <li><a href="https://www.safaribooksonline.com/topics/groovy" class="topic t-t-link" data-topic-slug="groovy">Groovy</a></li>
  

  
	  <li><a href="https://www.safaribooksonline.com/topics/software-development" class="topic t-t-link" data-topic-slug="software-development">Software Development</a></li>
  

</ul>

      
    

  
  </div>

      
    </div>
    
  </div>

</li>


      
    

  

    
      
        





<li class="js-bit format-book js-related js-card" data-api-url="/api/v1/book/0596007957/chapter/ch06.html">
  <div class="info">

    
    <div class="controls">
      <span class="format-title">
        Book Section
      </span>

      
        <button title="Add to Queue" aria-label="Add to Queue" type="button" class="rec-fav ss-queue js-queue" data-queue-endpoint="/api/v1/book/0596007957/chapter/ch06.html" data-for-analytics="0596007957:ch06.html">
            <span>Add to Queue</span>
        </button>
      

      
    </div>
    

    <div class="main">
      <span class="cover">
        <a href="https://www.safaribooksonline.com/library/view/uml-20-in/0596007957/ch06.html">
          
          <span><img src="Chapter1_files/a_006.jpg"></span>
         </a>
      </span>

      <a href="https://www.safaribooksonline.com/library/view/uml-20-in/0596007957/ch06.html" class="next title-block js-bit-title t-bit-link">
        <span class="chapter-title t-bit-title">Deployment Diagrams</span>
      </a>
      <span class="book-title">from: <a href="https://www.safaribooksonline.com/library/view/uml-20-in/0596007957/" class="t-book-title gray-link next">UML 2.0 in a Nutshell</a>
        <span class="author">by Dan Pilone...</span>
        <span class="issued">Released: June 2005</span>
      </span>

      
  <div class="progress">
    
      <span class="t-time">5 mins</span>
    
  </div>




      
        


  

  <div class="book-topics">
  
    
      
        
        


<ul class="topic-display">

  
	  <li><a href="https://www.safaribooksonline.com/topics/software-development" class="topic t-t-link" data-topic-slug="software-development">Software Development</a></li>
  

</ul>

      
    

  
  </div>

      
    </div>
    
  </div>

</li>


      
    

  

    
      
        





<li class="js-bit format-book js-related js-card" data-api-url="/api/v1/book/0672327988/chapter/ch15.html">
  <div class="info">

    
    <div class="controls">
      <span class="format-title">
        Book Section
      </span>

      
        <button title="Add to Queue" aria-label="Add to Queue" type="button" class="rec-fav ss-queue js-queue" data-queue-endpoint="/api/v1/book/0672327988/chapter/ch15.html" data-for-analytics="0672327988:ch15.html">
            <span>Add to Queue</span>
        </button>
      

      
    </div>
    

    <div class="main">
      <span class="cover">
        <a href="https://www.safaribooksonline.com/library/view/software-testing-second/0672327988/ch15.html">
          
          <span><img src="Chapter1_files/a_003.jpg"></span>
         </a>
      </span>

      <a href="https://www.safaribooksonline.com/library/view/software-testing-second/0672327988/ch15.html" class="next title-block js-bit-title t-bit-link">
        <span class="chapter-title t-bit-title">Automated Testing and Test Tools</span>
      </a>
      <span class="book-title">from: <a href="https://www.safaribooksonline.com/library/view/software-testing-second/0672327988/" class="t-book-title gray-link next">Software Testing, Second Edition</a>
        <span class="author">by Ron Patton</span>
        <span class="issued">Released: July 2005</span>
      </span>

      
  <div class="progress">
    
      <span class="t-time">38 mins</span>
    
  </div>




      
        


  

  <div class="book-topics">
  
    
      
        
        


<ul class="topic-display">

  
	  <li><a href="https://www.safaribooksonline.com/topics/software-development" class="topic t-t-link" data-topic-slug="software-development">Software Development</a></li>
  

</ul>

      
    

  
  </div>

      
    </div>
    
  </div>

</li>


      
    

  

    
      
        





<li class="js-bit format-book js-related js-card" data-api-url="/api/v1/book/0321127420/chapter/ch17.html">
  <div class="info">

    
    <div class="controls">
      <span class="format-title">
        Book Section
      </span>

      
        <button title="Add to Queue" aria-label="Add to Queue" type="button" class="rec-fav ss-queue js-queue" data-queue-endpoint="/api/v1/book/0321127420/chapter/ch17.html" data-for-analytics="0321127420:ch17.html">
            <span>Add to Queue</span>
        </button>
      

      
    </div>
    

    <div class="main">
      <span class="cover">
        <a href="https://www.safaribooksonline.com/library/view/patterns-of-enterprise/0321127420/ch17.html">
          
          <span><img src="Chapter1_files/a_007.jpg"></span>
         </a>
      </span>

      <a href="https://www.safaribooksonline.com/library/view/patterns-of-enterprise/0321127420/ch17.html" class="next title-block js-bit-title t-bit-link">
        <span class="chapter-title t-bit-title">Chapter 17. Session State Patterns</span>
      </a>
      <span class="book-title">from: <a href="https://www.safaribooksonline.com/library/view/patterns-of-enterprise/0321127420/" class="t-book-title gray-link next">Patterns of Enterprise Application Architecture</a>
        <span class="author">by Martin Fowler</span>
        <span class="issued">Released: November 2002</span>
      </span>

      
  <div class="progress">
    
      <span class="t-time">15 mins</span>
    
  </div>




      
        


  

  <div class="book-topics">
  
    
      
        
        


<ul class="topic-display">

  
	  <li><a href="https://www.safaribooksonline.com/topics/design-patterns" class="topic t-t-link" data-topic-slug="design-patterns">Design Patterns</a></li>
  

</ul>

      
    

  
  </div>

      
    </div>
    
  </div>

</li>


      
    

  

    
      
        





<li class="js-bit format-book js-related js-card" data-api-url="/api/v1/book/0321247140/chapter/ch17.html">
  <div class="info">

    
    <div class="controls">
      <span class="format-title">
        Book Section
      </span>

      
        <button title="Add to Queue" aria-label="Add to Queue" type="button" class="rec-fav ss-queue js-queue" data-queue-endpoint="/api/v1/book/0321247140/chapter/ch17.html" data-for-analytics="0321247140:ch17.html">
            <span>Add to Queue</span>
        </button>
      

      
    </div>
    

    <div class="main">
      <span class="cover">
        <a href="https://www.safaribooksonline.com/library/view/design-patterns-explained/0321247140/ch17.html">
          
          <span><img src="Chapter1_files/a_005.jpg"></span>
         </a>
      </span>

      <a href="https://www.safaribooksonline.com/library/view/design-patterns-explained/0321247140/ch17.html" class="next title-block js-bit-title t-bit-link">
        <span class="chapter-title t-bit-title">Chapter 17 The Decorator Pattern</span>
      </a>
      <span class="book-title">from: <a href="https://www.safaribooksonline.com/library/view/design-patterns-explained/0321247140/" class="t-book-title gray-link next">Design Patterns Explained: A New Perspective on Object-Oriented Design, Second Edition</a>
        <span class="author">by James R. Trott...</span>
        <span class="issued">Released: October 2004</span>
      </span>

      
  <div class="progress">
    
      <span class="t-time">16 mins</span>
    
  </div>




      
        


  

  <div class="book-topics">
  
    
      
        
        


<ul class="topic-display">

  
	  <li><a href="https://www.safaribooksonline.com/topics/design-patterns" class="topic t-t-link" data-topic-slug="design-patterns">Design Patterns</a></li>
  

</ul>

      
    

  
  </div>

      
    </div>
    
  </div>

</li>


      
    

  

    
      
        





<li class="js-bit format-book js-related js-card" data-api-url="/api/v1/book/0321439104/chapter/ch01.html">
  <div class="info">

    
    <div class="controls">
      <span class="format-title">
        Book Section
      </span>

      
        <button title="Add to Queue" aria-label="Add to Queue" type="button" class="rec-fav ss-queue js-queue" data-queue-endpoint="/api/v1/book/0321439104/chapter/ch01.html" data-for-analytics="0321439104:ch01.html">
            <span>Add to Queue</span>
        </button>
      

      
    </div>
    

    <div class="main">
      <span class="cover">
        <a href="https://www.safaribooksonline.com/library/view/practical-software-estimation/0321439104/ch01.html">
          
          <span><img src="Chapter1_files/a_002.jpg"></span>
         </a>
      </span>

      <a href="https://www.safaribooksonline.com/library/view/practical-software-estimation/0321439104/ch01.html" class="next title-block js-bit-title t-bit-link">
        <span class="chapter-title t-bit-title">Chapter 1: Introduction</span>
      </a>
      <span class="book-title">from: <a href="https://www.safaribooksonline.com/library/view/practical-software-estimation/0321439104/" class="t-book-title gray-link next">Practical Software Estimation: Function Point Methods for Insourced and Outsourced Projects</a>
        <span class="author">by M. A. Parthasarathy</span>
        <span class="issued">Released: February 2007</span>
      </span>

      
  <div class="progress">
    
      <span class="t-time">37 mins</span>
    
  </div>




      
        


  

  <div class="book-topics">
  
    
      
        
        


<ul class="topic-display">

  
	  <li><a href="https://www.safaribooksonline.com/topics/business-management" class="topic t-t-link" data-topic-slug="business-management">Business &amp; Management</a></li>
  

</ul>

      
    

  
  </div>

      
    </div>
    
  </div>

</li>


      
    

  

    
      
        





<li class="js-bit format-book js-related js-card" data-api-url="/api/v1/book/0321246942/chapter/ch01.html">
  <div class="info">

    
    <div class="controls">
      <span class="format-title">
        Book Section
      </span>

      
        <button title="Add to Queue" aria-label="Add to Queue" type="button" class="rec-fav ss-queue js-queue" data-queue-endpoint="/api/v1/book/0321246942/chapter/ch01.html" data-for-analytics="0321246942:ch01.html">
            <span>Add to Queue</span>
        </button>
      

      
    </div>
    

    <div class="main">
      <span class="cover">
        <a href="https://www.safaribooksonline.com/library/view/it-architectures-and/0321246942/ch01.html">
          
          <span><img src="Chapter1_files/a_008.jpg"></span>
         </a>
      </span>

      <a href="https://www.safaribooksonline.com/library/view/it-architectures-and/0321246942/ch01.html" class="next title-block js-bit-title t-bit-link">
        <span class="chapter-title t-bit-title">The Problem</span>
      </a>
      <span class="book-title">from: <a href="https://www.safaribooksonline.com/library/view/it-architectures-and/0321246942/" class="t-book-title gray-link next">IT Architectures and Middleware: Strategies for Building Large, Integrated Systems, Second Edition</a>
        <span class="author">by Chris Britton...</span>
        <span class="issued">Released: May 2004</span>
      </span>

      
  <div class="progress">
    
      <span class="t-time">31 mins</span>
    
  </div>




      
        


  

  <div class="book-topics">
  
    
      
        
        


<ul class="topic-display">

  
	  <li><a href="https://www.safaribooksonline.com/topics/enterprise-architecture" class="topic t-t-link" data-topic-slug="enterprise-architecture">Enterprise Architecture</a></li>
  

</ul>

      
    

  
  </div>

      
    </div>
    
  </div>

</li>


      
    

  

    
      
        





<li class="js-bit format-book js-related js-card" data-api-url="/api/v1/book/9780132119818/chapter/ch09.html">
  <div class="info">

    
    <div class="controls">
      <span class="format-title">
        Book Section
      </span>

      
        <button title="Add to Queue" aria-label="Add to Queue" type="button" class="rec-fav ss-queue js-queue" data-queue-endpoint="/api/v1/book/9780132119818/chapter/ch09.html" data-for-analytics="9780132119818:ch09.html">
            <span>Add to Queue</span>
        </button>
      

      
    </div>
    

    <div class="main">
      <span class="cover">
        <a href="https://www.safaribooksonline.com/library/view/100-soa-questions/9780132119818/ch09.html">
          
          <span><img src="Chapter1_files/a.jpg"></span>
         </a>
      </span>

      <a href="https://www.safaribooksonline.com/library/view/100-soa-questions/9780132119818/ch09.html" class="next title-block js-bit-title t-bit-link">
        <span class="chapter-title t-bit-title">Chapter 8. Information</span>
      </a>
      <span class="book-title">from: <a href="https://www.safaribooksonline.com/library/view/100-soa-questions/9780132119818/" class="t-book-title gray-link next">100 SOA Questions: Asked and Answered</a>
        <span class="author">by Kerrie Holley...</span>
        <span class="issued">Released: November 2010</span>
      </span>

      
  <div class="progress">
    
      <span class="t-time">29 mins</span>
    
  </div>




      
        


  

  <div class="book-topics">
  
    
      
        
        


<ul class="topic-display">

  
	  <li><a href="https://www.safaribooksonline.com/topics/enterprise-architecture" class="topic t-t-link" data-topic-slug="enterprise-architecture">Enterprise Architecture</a></li>
  

</ul>

      
    

  
  </div>

      
    </div>
    
  </div>

</li>


      
    

  
  
</ul></div></div>
<section class="sbo-saved-archives"></section>



          
          
  





    
    
      <div id="js-subscribe-nag" class="subscribe-nag clearfix trial-panel  collapsed slideUp">
        <a href="#" class="js-toggle-nag ss-navigateup" title="Toggle open or close footer"></a>
        <div class="sample-message">
          <p class="usage-data t-collapsed-text">Enjoy Safari? 
            <a href="https://www.safaribooksonline.com/subscribe/">
              Subscribe Today
              
            </a>
          </p>
          

        <div class="expanded">
          <h2>You have 10 days left in your trial, Aejunknaja. </h2>
          <p class="t-expanded-text">Safari is your trusted guide for building a remarkable career. We hope you've been enjoying your trial—ready to join?</p>
          <a href="https://www.safaribooksonline.com/subscribe/" class="bigbutton positive">
            Subscribe Today
            
          </a>
          
            <footer style="padding-bottom: 69.2px;" class="pagefoot js-pagefoot">
    <div class="wrapper">
      <a href="https://www.safaribooksonline.com/" id="logo">Safari</a>
      <nav>
        <a href="https://www.safaribooksonline.com/public/support" class="full-support">Support</a> /
        <a href="https://www.safaribooksonline.com/contact/">Contact Us</a> /
        <a href="https://www.safaribooksonline.com/blog/">Blog</a>
      </nav>
      <div id="legal">
        <ul>
          <li>© 2016 <a class="copyright" href="https://www.safaribooksonline.com/">Safari</a> <br class="mobile-support"> <a href="https://www.safaribooksonline.com/terms/">Terms of Service</a> </li>
          <li><a href="https://www.safaribooksonline.com/membership-agreement/">Membership Agreement</a></li>
          <li><a href="https://www.safaribooksonline.com/privacy/">Privacy Policy</a></li>
        </ul>
      </div>
    </div>
  </footer>

        </div>
      </div>
    </div>

    
    



        
      </div>
      



  <footer style="padding-bottom: 69.2px;" class="pagefoot t-pagefoot">
    <a style="display: block;" href="#" class="icon-up"><div class="visuallyhidden">Back to top</div></a>
    <ul class="js-footer-nav">
      
        <li><a class="t-recommendations-footer" href="https://www.safaribooksonline.com/r/">Recommended</a></li>
      
      <li><a class="t-queue-footer" href="https://www.safaribooksonline.com/s/">Queue</a></li>
      
        <li><a class="t-recent-footer" href="https://www.safaribooksonline.com/recent/">Recent</a></li>
        <li><a class="t-topics-footer" href="https://www.safaribooksonline.com/topics?q=*&amp;limit=21">Topics</a></li>
      
      
        <li><a class="t-tutorials-footer" href="https://www.safaribooksonline.com/tutorials/">Tutorials</a></li>
      
      <li><a class="t-settings-footer js-settings" href="https://www.safaribooksonline.com/u/">Settings</a></li>
      <li><a href="https://www.safaribooksonline.com/blog/">Blog</a></li>
      <li class="full-support"><a href="https://www.safaribooksonline.com/public/support">Support</a></li>
      <li><a href="https://community.safaribooksonline.com/">Feedback</a></li>
      <li><a href="https://www.safaribooksonline.com/accounts/logout/">Sign Out</a></li>
    </ul>
    <span class="copyright">© 2016 <a href="https://www.safaribooksonline.com/" target="_blank">Safari</a>.</span>
    <br class="mobile-support">
    <a href="https://www.safaribooksonline.com/terms/">Terms of Service</a> /
    <a href="https://www.safaribooksonline.com/privacy/">Privacy Policy</a>
  </footer>

<script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"applicationTime":79,"agent":"js-agent.newrelic.com/nr-768.min.js","applicationID":"3275661","licenseKey":"510f1a6865","queueTime":0,"beacon":"bam.nr-data.net","transactionName":"YgdaZ0NSW0cEB0RdWltNfkZfUEFdCgofXFBHDVYdR1pQQxZeRl1QQj1aWkU=","errorBeacon":"bam.nr-data.net"}</script>


    

    <script src="Chapter1_files/a_002" charset="utf-8"></script>
    <script src="Chapter1_files/a" charset="utf-8"></script>
    
      <script src="Chapter1_files/require.js"></script>
      <script>
        require(["/static/js/pages/_config.1113c6153f5e.js"], function (common) {
          require(["/static/js/nest/_init.1198db94d0a6.js"]);
        });
      </script>
    
    
  
  
  
  <script> // <![CDATA[
    var g = {
      position_cache: {
        
          "chapter": "/api/v1/book/9780132942799/chapter/copyright.html",
          "book_id": "9780132942799",
          "chapter_uri": "copyright.html",
          "position": 0,
          "user_uuid": "10f9e41b-1414-4ac1-bc80-973364aac808",
          "next_chapter_uri": "/library/view/software-architecture-in/9780132942799/pref01.html"
        
      },
      title: "Software Architecture in Practice, Third Edition",
      author_list: "Rick Kazman, Paul Clements, Len Bass",
      format: "book",
      source: "application/epub+zip",
      is_system_book: true,
      is_public: false,
      loaded_from_server: true,
      allow_scripts: false,
      has_mathml: false
    };
    // ]]>
  </script>
  
  


  
  <script>
    
      
        

        
          
            window.PUBLIC_ANNOTATIONS = true;
          
        

      

      
        window.MOBILE_PUBLIC_ANNOTATIONS = false;
      

    

  </script>

  
    
  


    
    


  

<div class="annotator-notice"></div><div style="top: 200px; left: 1450px;" class="font-flyout"><div class="font-controls-panel">
	<div class="nightmodes">
		<ul>
			<li class="day"><a href="#" id="day-mode" title="Day Mode">
				<i class="fa fa-sun-o"></i>
				<span>Day Mode</span></a></li>
			<li class="cloudy"><a href="#" id="cloudy-mode" title="Cloudy Mode">
				<i class="fa fa-cloud"></i>
				<span>Cloud Mode</span>
			</a></li>
			<li class="night"><a href="#" id="night-mode" title="Night Mode">
				<i class="fa fa-moon-o"></i>
				<span>Night Mode</span>
			</a></li>
		</ul>
	</div>

	<div class="font-resizer resizer">
		<div class="draggable-containment-wrapper">
			<i class="fa fa-font left"></i>
			<span style="width: 50%;" class="filler"></span>
			<div style="position: relative; left: 80px;" id="js-font-size-draggable" class="draggable ui-widget-content ui-draggable ui-draggable-handle"></div>
			<i class="fa fa-font right"></i>
		</div>
	</div>

	<div class="column-resizer resizer">
		<div class="draggable-containment-wrapper">
			<i class="fa fa-compress left"></i>
			<span style="width: 50%;" class="filler"></span>
			<div style="position: relative; left: 80px;" id="js-column-size-draggable" class="draggable ui-widget-content ui-draggable ui-draggable-handle"></div>
			<i class="fa fa-expand right"></i>
		</div>
	</div>

	<a id="reset" class="button" href="#">Reset</a>
</div>
</div></body></html>