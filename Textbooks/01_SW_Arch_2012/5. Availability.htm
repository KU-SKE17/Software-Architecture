<!--[if IE]><![endif]-->
<!DOCTYPE html>
<!--[if IE 8]><html class="no-js ie8 oldie" lang="en" prefix="og: http://ogp.me/ns/# og:book: http://ogp.me/ns/book# og:video: http://ogp.me/ns/video#"

    
        itemscope itemtype="http://schema.org/Book http://schema.org/ItemPage"" data-login-url="/accounts/login/"
data-offline-url="/"
data-url="/library/view/software-architecture-in/9780132942799/copyright.html"
data-csrf-cookie="csrfsafari"
data-highlight-privacy=""


  data-user-id="640574"
  data-user-uuid="10f9e41b-1414-4ac1-bc80-973364aac808"
  data-username="aejunknaja"
  data-account-type="Trial"
  
  data-activated-trial-date="01/12/2016"
  


  data-archive="9780132942799"
  data-publishers="Addison-Wesley Professional"



  data-htmlfile-name="copyright.html"
  data-epub-title="Software Architecture in Practice, Third Edition" data-debug=0 data-testing=0><![endif]-->
<!--[if gt IE 8]><!-->
<html style="" class=" js flexbox flexboxlegacy no-touch no-websqldatabase indexeddb history csscolumns csstransforms localstorage sessionstorage applicationcache svg inlinesvg no-zoom" prefix="og: http://ogp.me/ns/# og:book: http://ogp.me/ns/book# og:video: http://ogp.me/ns/video#" itemscope="" itemtype="http://schema.org/Book http://schema.org/ItemPage" "="" data-login-url="/accounts/login/" data-offline-url="/" data-url="/library/view/software-architecture-in/9780132942799/copyright.html" data-csrf-cookie="csrfsafari" data-highlight-privacy="" data-user-id="640574" data-user-uuid="10f9e41b-1414-4ac1-bc80-973364aac808" data-username="aejunknaja" data-account-type="Trial" data-activated-trial-date="01/12/2016" data-archive="9780132942799" data-publishers="Addison-Wesley Professional" data-htmlfile-name="copyright.html" data-epub-title="Software Architecture in Practice, Third Edition" data-debug="0" data-testing="0" lang="en"><!--<![endif]--><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta charset="utf-8"><meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"><meta name="author" content="Safari Books Online"><meta name="format-detection" content="telephone=no"><meta http-equiv="cleartype" content="on"><meta name="HandheldFriendly" content="True"><meta name="MobileOptimized" content="320"><meta name="apple-itunes-app" content="app-id=881697395, app-argument=safaridetail://9780132942799"><meta name="viewport" content="width=device-width, minimum-scale=1.0, initial-scale=1.0, maximum-scale=1.0"><meta property="twitter:account_id" content="4503599627559754"><script src="5.%20Availability_files/510f1a6865" type="text/javascript"></script><script src="5.%20Availability_files/nr-768.js"></script><script src="5.%20Availability_files/linkid.js" async="" type="text/javascript"></script><script src="5.%20Availability_files/analytics.js" async=""></script><script type="text/javascript">(window.NREUM||(NREUM={})).loader_config={xpid:"VQQDUVVVGwACU1RUAQA="};window.NREUM||(NREUM={}),__nr_require=function(t,e,n){function r(n){if(!e[n]){var o=e[n]={exports:{}};t[n][0].call(o.exports,function(e){var o=t[n][1][e];return r(o||e)},o,o.exports)}return e[n].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<n.length;o++)r(n[o]);return r}({QJf3ax:[function(t,e){function n(t){function e(e,n,a){t&&t(e,n,a),a||(a={});for(var c=s(e),f=c.length,u=i(a,o,r),d=0;f>d;d++)c[d].apply(u,n);return u}function a(t,e){f[t]=s(t).concat(e)}function s(t){return f[t]||[]}function c(){return n(e)}var f={};return{on:a,emit:e,create:c,listeners:s,_events:f}}function r(){return{}}var o="nr@context",i=t("gos");e.exports=n()},{gos:"7eSDFh"}],ee:[function(t,e){e.exports=t("QJf3ax")},{}],3:[function(t){function e(t){try{i.console&&console.log(t)}catch(e){}}var n,r=t("ee"),o=t(1),i={};try{n=localStorage.getItem("__nr_flags").split(","),console&&"function"==typeof console.log&&(i.console=!0,-1!==n.indexOf("dev")&&(i.dev=!0),-1!==n.indexOf("nr_dev")&&(i.nrDev=!0))}catch(a){}i.nrDev&&r.on("internal-error",function(t){e(t.stack)}),i.dev&&r.on("fn-err",function(t,n,r){e(r.stack)}),i.dev&&(e("NR AGENT IN DEVELOPMENT MODE"),e("flags: "+o(i,function(t){return t}).join(", ")))},{1:24,ee:"QJf3ax"}],4:[function(t){function e(t,e,n,i,s){try{c?c-=1:r("err",[s||new UncaughtException(t,e,n)])}catch(f){try{r("ierr",[f,(new Date).getTime(),!0])}catch(u){}}return"function"==typeof a?a.apply(this,o(arguments)):!1}function UncaughtException(t,e,n){this.message=t||"Uncaught error with no additional information",this.sourceURL=e,this.line=n}function n(t){r("err",[t,(new Date).getTime()])}var r=t("handle"),o=t(6),i=t("ee"),a=window.onerror,s=!1,c=0;t("loader").features.err=!0,t(5),window.onerror=e;try{throw new Error}catch(f){"stack"in f&&(t(1),t(2),"addEventListener"in window&&t(3),window.XMLHttpRequest&&XMLHttpRequest.prototype&&XMLHttpRequest.prototype.addEventListener&&window.XMLHttpRequest&&XMLHttpRequest.prototype&&XMLHttpRequest.prototype.addEventListener&&!/CriOS/.test(navigator.userAgent)&&t(4),s=!0)}i.on("fn-start",function(){s&&(c+=1)}),i.on("fn-err",function(t,e,r){s&&(this.thrown=!0,n(r))}),i.on("fn-end",function(){s&&!this.thrown&&c>0&&(c-=1)}),i.on("internal-error",function(t){r("ierr",[t,(new Date).getTime(),!0])})},{1:11,2:10,3:8,4:12,5:3,6:25,ee:"QJf3ax",handle:"D5DuLP",loader:"G9z0Bl"}],5:[function(t){if(window.addEventListener){var e=t("handle"),n=t("ee");t(1),window.addEventListener("click",function(){e("inc",["ck"])},!1),window.addEventListener("hashchange",function(){e("inc",["hc"])},!1),n.on("pushState-start",function(){e("inc",["ps"])})}},{1:9,ee:"QJf3ax",handle:"D5DuLP"}],6:[function(t){t("loader").features.ins=!0},{loader:"G9z0Bl"}],7:[function(t){function e(){}if(window.performance&&window.performance.timing&&window.performance.getEntriesByType){var n=t("ee"),r=t("handle"),o=t(1),i=t(2);t("loader").features.stn=!0,t(3);var a=Event;n.on("fn-start",function(t){var e=t[0];e instanceof a&&(this.bstStart=Date.now())}),n.on("fn-end",function(t,e){var n=t[0];n instanceof a&&r("bst",[n,e,this.bstStart,Date.now()])}),o.on("fn-start",function(t,e,n){this.bstStart=Date.now(),this.bstType=n}),o.on("fn-end",function(t,e){r("bstTimer",[e,this.bstStart,Date.now(),this.bstType])}),i.on("fn-start",function(){this.bstStart=Date.now()}),i.on("fn-end",function(t,e){r("bstTimer",[e,this.bstStart,Date.now(),"requestAnimationFrame"])}),n.on("pushState-start",function(){this.time=Date.now(),this.startPath=location.pathname+location.hash}),n.on("pushState-end",function(){r("bstHist",[location.pathname+location.hash,this.startPath,this.time])}),"addEventListener"in window.performance&&(window.performance.addEventListener("webkitresourcetimingbufferfull",function(){r("bstResource",[window.performance.getEntriesByType("resource")]),window.performance.webkitClearResourceTimings()},!1),window.performance.addEventListener("resourcetimingbufferfull",function(){r("bstResource",[window.performance.getEntriesByType("resource")]),window.performance.clearResourceTimings()},!1)),document.addEventListener("scroll",e,!1),document.addEventListener("keypress",e,!1),document.addEventListener("click",e,!1)}},{1:11,2:10,3:9,ee:"QJf3ax",handle:"D5DuLP",loader:"G9z0Bl"}],8:[function(t,e){function n(t){i.inPlace(t,["addEventListener","removeEventListener"],"-",r)}function r(t){return t[1]}var o=t("ee").create(),i=t(1)(o),a=t("gos");if(e.exports=o,n(window),"getPrototypeOf"in Object){for(var s=document;s&&!s.hasOwnProperty("addEventListener");)s=Object.getPrototypeOf(s);s&&n(s);for(var c=XMLHttpRequest.prototype;c&&!c.hasOwnProperty("addEventListener");)c=Object.getPrototypeOf(c);c&&n(c)}else XMLHttpRequest.prototype.hasOwnProperty("addEventListener")&&n(XMLHttpRequest.prototype);o.on("addEventListener-start",function(t,e){function n(){return s}if(t[1]){var r=t[1];if("function"==typeof r){var s=a(r,"nr@wrapped",function(){return i(r,"fn-",n,r.name||"anonymous")});this.wrapped=t[1]=s,o.emit("initEventContext",[t,e],this.wrapped)}else"function"==typeof r.handleEvent&&i.inPlace(r,["handleEvent"],"fn-")}}),o.on("removeEventListener-start",function(t){var e=this.wrapped;e&&(t[1]=e)})},{1:26,ee:"QJf3ax",gos:"7eSDFh"}],9:[function(t,e){var n=t("ee").create(),r=t(1)(n);e.exports=n,r.inPlace(window.history,["pushState","replaceState"],"-")},{1:26,ee:"QJf3ax"}],10:[function(t,e){var n=t("ee").create(),r=t(1)(n);e.exports=n,r.inPlace(window,["requestAnimationFrame","mozRequestAnimationFrame","webkitRequestAnimationFrame","msRequestAnimationFrame"],"raf-"),n.on("raf-start",function(t){t[0]=r(t[0],"fn-")})},{1:26,ee:"QJf3ax"}],11:[function(t,e){function n(t,e,n){t[0]=i(t[0],"fn-",null,n)}function r(t,e,n){function r(){return a}this.ctx={};var a={"nr@context":this.ctx};o.emit("initTimerContext",[t,n],a),t[0]=i(t[0],"fn-",r,n)}var o=t("ee").create(),i=t(1)(o);e.exports=o,i.inPlace(window,["setTimeout","setImmediate"],"setTimer-"),i.inPlace(window,["setInterval"],"setInterval-"),i.inPlace(window,["clearTimeout","clearImmediate"],"clearTimeout-"),o.on("setInterval-start",n),o.on("setTimer-start",r)},{1:26,ee:"QJf3ax"}],12:[function(t,e){function n(){f.inPlace(this,p,"fn-",o)}function r(t,e){f.inPlace(e,["onreadystatechange"],"fn-")}function o(t,e){return e}function i(t,e){for(var n in t)e[n]=t[n];return e}var a=t("ee").create(),s=t(1),c=t(2),f=c(a),u=c(s),d=window.XMLHttpRequest,p=["onload","onerror","onabort","onloadstart","onloadend","onprogress","ontimeout"];e.exports=a,window.XMLHttpRequest=function(t){var e=new d(t);try{a.emit("new-xhr",[],e),e.hasOwnProperty("addEventListener")&&u.inPlace(e,["addEventListener","removeEventListener"],"-",o),e.addEventListener("readystatechange",n,!1)}catch(r){try{a.emit("internal-error",[r])}catch(i){}}return e},i(d,XMLHttpRequest),XMLHttpRequest.prototype=d.prototype,f.inPlace(XMLHttpRequest.prototype,["open","send"],"-xhr-",o),a.on("send-xhr-start",r),a.on("open-xhr-start",r)},{1:8,2:26,ee:"QJf3ax"}],13:[function(t){function e(t){var e=this.params,r=this.metrics;if(!this.ended){this.ended=!0;for(var i=0;c>i;i++)t.removeEventListener(s[i],this.listener,!1);if(!e.aborted){if(r.duration=(new Date).getTime()-this.startTime,4===t.readyState){e.status=t.status;var a=t.responseType,f="arraybuffer"===a||"blob"===a||"json"===a?t.response:t.responseText,u=n(f);if(u&&(r.rxSize=u),this.sameOrigin){var d=t.getResponseHeader("X-NewRelic-App-Data");d&&(e.cat=d.split(", ").pop())}}else e.status=0;r.cbTime=this.cbTime,o("xhr",[e,r,this.startTime])}}}function n(t){if("string"==typeof t&&t.length)return t.length;if("object"!=typeof t)return void 0;if("undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer&&t.byteLength)return t.byteLength;if("undefined"!=typeof Blob&&t instanceof Blob&&t.size)return t.size;if("undefined"!=typeof FormData&&t instanceof FormData)return void 0;try{return JSON.stringify(t).length}catch(e){return void 0}}function r(t,e){var n=i(e),r=t.params;r.host=n.hostname+":"+n.port,r.pathname=n.pathname,t.sameOrigin=n.sameOrigin}if(window.XMLHttpRequest&&XMLHttpRequest.prototype&&XMLHttpRequest.prototype.addEventListener&&!/CriOS/.test(navigator.userAgent)){t("loader").features.xhr=!0;var o=t("handle"),i=t(2),a=t("ee"),s=["load","error","abort","timeout"],c=s.length,f=t(1),u=window.XMLHttpRequest;t(4),t(3),a.on("new-xhr",function(){this.totalCbs=0,this.called=0,this.cbTime=0,this.end=e,this.ended=!1,this.xhrGuids={}}),a.on("open-xhr-start",function(t){this.params={method:t[0]},r(this,t[1]),this.metrics={}}),a.on("open-xhr-end",function(t,e){"loader_config"in NREUM&&"xpid"in NREUM.loader_config&&this.sameOrigin&&e.setRequestHeader("X-NewRelic-ID",NREUM.loader_config.xpid)}),a.on("send-xhr-start",function(t,e){var r=this.metrics,o=t[0],i=this;if(r&&o){var f=n(o);f&&(r.txSize=f)}this.startTime=(new Date).getTime(),this.listener=function(t){try{"abort"===t.type&&(i.params.aborted=!0),("load"!==t.type||i.called===i.totalCbs&&(i.onloadCalled||"function"!=typeof e.onload))&&i.end(e)}catch(n){try{a.emit("internal-error",[n])}catch(r){}}};for(var u=0;c>u;u++)e.addEventListener(s[u],this.listener,!1)}),a.on("xhr-cb-time",function(t,e,n){this.cbTime+=t,e?this.onloadCalled=!0:this.called+=1,this.called!==this.totalCbs||!this.onloadCalled&&"function"==typeof n.onload||this.end(n)}),a.on("xhr-load-added",function(t,e){var n=""+f(t)+!!e;this.xhrGuids&&!this.xhrGuids[n]&&(this.xhrGuids[n]=!0,this.totalCbs+=1)}),a.on("xhr-load-removed",function(t,e){var n=""+f(t)+!!e;this.xhrGuids&&this.xhrGuids[n]&&(delete this.xhrGuids[n],this.totalCbs-=1)}),a.on("addEventListener-end",function(t,e){e instanceof u&&"load"===t[0]&&a.emit("xhr-load-added",[t[1],t[2]],e)}),a.on("removeEventListener-end",function(t,e){e instanceof u&&"load"===t[0]&&a.emit("xhr-load-removed",[t[1],t[2]],e)}),a.on("fn-start",function(t,e,n){e instanceof u&&("onload"===n&&(this.onload=!0),("load"===(t[0]&&t[0].type)||this.onload)&&(this.xhrCbStart=(new Date).getTime()))}),a.on("fn-end",function(t,e){this.xhrCbStart&&a.emit("xhr-cb-time",[(new Date).getTime()-this.xhrCbStart,this.onload,e],e)})}},{1:"XL7HBI",2:14,3:12,4:8,ee:"QJf3ax",handle:"D5DuLP",loader:"G9z0Bl"}],14:[function(t,e){e.exports=function(t){var e=document.createElement("a"),n=window.location,r={};e.href=t,r.port=e.port;var o=e.href.split("://");return!r.port&&o[1]&&(r.port=o[1].split("/")[0].split("@").pop().split(":")[1]),r.port&&"0"!==r.port||(r.port="https"===o[0]?"443":"80"),r.hostname=e.hostname||n.hostname,r.pathname=e.pathname,r.protocol=o[0],"/"!==r.pathname.charAt(0)&&(r.pathname="/"+r.pathname),r.sameOrigin=!e.hostname||e.hostname===document.domain&&e.port===n.port&&e.protocol===n.protocol,r}},{}],15:[function(t,e){function n(t){return function(){r(t,[(new Date).getTime()].concat(i(arguments)))}}var r=t("handle"),o=t(1),i=t(2);"undefined"==typeof window.newrelic&&(newrelic=window.NREUM);var a=["setPageViewName","addPageAction","setCustomAttribute","finished","addToTrace","inlineHit","noticeError"];o(a,function(t,e){window.NREUM[e]=n("api-"+e)}),e.exports=window.NREUM},{1:24,2:25,handle:"D5DuLP"}],gos:[function(t,e){e.exports=t("7eSDFh")},{}],"7eSDFh":[function(t,e){function n(t,e,n){if(r.call(t,e))return t[e];var o=n();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(t,e,{value:o,writable:!0,enumerable:!1}),o}catch(i){}return t[e]=o,o}var r=Object.prototype.hasOwnProperty;e.exports=n},{}],D5DuLP:[function(t,e){function n(t,e,n){return r.listeners(t).length?r.emit(t,e,n):void(r.q&&(r.q[t]||(r.q[t]=[]),r.q[t].push(e)))}var r=t("ee").create();e.exports=n,n.ee=r,r.q={}},{ee:"QJf3ax"}],handle:[function(t,e){e.exports=t("D5DuLP")},{}],XL7HBI:[function(t,e){function n(t){var e=typeof t;return!t||"object"!==e&&"function"!==e?-1:t===window?0:i(t,o,function(){return r++})}var r=1,o="nr@id",i=t("gos");e.exports=n},{gos:"7eSDFh"}],id:[function(t,e){e.exports=t("XL7HBI")},{}],G9z0Bl:[function(t,e){function n(){var t=p.info=NREUM.info,e=f.getElementsByTagName("script")[0];if(t&&t.licenseKey&&t.applicationID&&e){s(d,function(e,n){e in t||(t[e]=n)});var n="https"===u.split(":")[0]||t.sslForHttp;p.proto=n?"https://":"http://",a("mark",["onload",i()]);var r=f.createElement("script");r.src=p.proto+t.agent,e.parentNode.insertBefore(r,e)}}function r(){"complete"===f.readyState&&o()}function o(){a("mark",["domContent",i()])}function i(){return(new Date).getTime()}var a=t("handle"),s=t(1),c=window,f=c.document;t(2);var u=(""+location).split("?")[0],d={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-768.min.js"},p=e.exports={offset:i(),origin:u,features:{}};f.addEventListener?(f.addEventListener("DOMContentLoaded",o,!1),c.addEventListener("load",n,!1)):(f.attachEvent("onreadystatechange",r),c.attachEvent("onload",n)),a("mark",["firstbyte",i()])},{1:24,2:15,handle:"D5DuLP"}],loader:[function(t,e){e.exports=t("G9z0Bl")},{}],24:[function(t,e){function n(t,e){var n=[],o="",i=0;for(o in t)r.call(t,o)&&(n[i]=e(o,t[o]),i+=1);return n}var r=Object.prototype.hasOwnProperty;e.exports=n},{}],25:[function(t,e){function n(t,e,n){e||(e=0),"undefined"==typeof n&&(n=t?t.length:0);for(var r=-1,o=n-e||0,i=Array(0>o?0:o);++r<o;)i[r]=t[e+r];return i}e.exports=n},{}],26:[function(t,e){function n(t){return!(t&&"function"==typeof t&&t.apply&&!t[i])}var r=t("ee"),o=t(1),i="nr@original",a=Object.prototype.hasOwnProperty;e.exports=function(t){function e(t,e,r,a){function nrWrapper(){var n,i,s,f;try{i=this,n=o(arguments),s=r&&r(n,i)||{}}catch(d){u([d,"",[n,i,a],s])}c(e+"start",[n,i,a],s);try{return f=t.apply(i,n)}catch(p){throw c(e+"err",[n,i,p],s),p}finally{c(e+"end",[n,i,f],s)}}return n(t)?t:(e||(e=""),nrWrapper[i]=t,f(t,nrWrapper),nrWrapper)}function s(t,r,o,i){o||(o="");var a,s,c,f="-"===o.charAt(0);for(c=0;c<r.length;c++)s=r[c],a=t[s],n(a)||(t[s]=e(a,f?s+o:o,i,s))}function c(e,n,r){try{t.emit(e,n,r)}catch(o){u([o,e,n,r])}}function f(t,e){if(Object.defineProperty&&Object.keys)try{var n=Object.keys(t);return n.forEach(function(n){Object.defineProperty(e,n,{get:function(){return t[n]},set:function(e){return t[n]=e,e}})}),e}catch(r){u([r])}for(var o in t)a.call(t,o)&&(e[o]=t[o]);return e}function u(e){try{t.emit("internal-error",e)}catch(n){}}return t||(t=r),e.inPlace=s,e.flag=i,e}},{1:25,ee:"QJf3ax"}]},{},["G9z0Bl",4,13,7,6,5]);</script><link rel="apple-touch-icon" href="https://www.safaribooksonline.com/static/images/apple-touch-icon.dc4dcf1f75e0.png"><link rel="shortcut icon" href="https://www.safaribooksonline.com/favicon.ico" type="image/x-icon"><link href="5.%20Availability_files/css.css" rel="stylesheet" type="text/css"><title>5. Availability - Software Architecture in Practice, Third Edition</title><link rel="stylesheet" href="5.%20Availability_files/e4f5174e8e7b.css" type="text/css"><link rel="stylesheet" type="text/css" href="5.%20Availability_files/annotator.css"><link rel="stylesheet" href="5.%20Availability_files/font-awesome.css"><style type="text/css" title="ibis-book">#sbo-rt-content div{margin-top:4pt;margin-bottom:4pt;margin-right:15pt}#sbo-rt-content h1{margin-top:15pt;margin-bottom:12pt;text-align:center;font-weight:bold}#sbo-rt-content h2{margin-top:7pt;margin-bottom:25pt;text-align:left;font-weight:bold}#sbo-rt-content h3{margin-top:9pt;margin-bottom:8pt;font-weight:bold;text-align:left}#sbo-rt-content h4{margin-top:9pt;margin-bottom:6pt;text-align:left;font-weight:bold}#sbo-rt-content h5{margin-top:9pt;margin-bottom:6pt;font-weight:bold;text-align:left}#sbo-rt-content h6{margin-top:9pt;margin-bottom:6pt;font-weight:bold;text-align:left}#sbo-rt-content .cover{margin-top:2pt;margin-bottom:2pt;text-align:center}#sbo-rt-content .author{margin-top:40pt;font-weight:bold;text-align:center}#sbo-rt-content div.image,#sbo-rt-content img{max-width:99%;max-height:99%}#sbo-rt-content .image{margin-bottom:5pt;text-align:center}#sbo-rt-content .toc-part{margin-top:25pt;margin-bottom:5pt;margin-left:10pt;text-align:left}#sbo-rt-content .toc-chapter{margin-top:10pt;margin-bottom:5pt;margin-left:25pt;text-align:left}#sbo-rt-content .toc-chapter1{margin-top:10pt;margin-bottom:5pt;margin-left:18pt;text-align:left}#sbo-rt-content .toc-section{margin-top:4pt;margin-bottom:4pt;margin-left:55pt;text-align:left}#sbo-rt-content .indexmain{margin-top:2pt;margin-bottom:2pt;text-align:left}#sbo-rt-content .indexmain1{margin-top:18pt;margin-bottom:2pt;text-align:left}#sbo-rt-content .indexsub{margin-top:2pt;margin-bottom:2pt;margin-left:35pt;text-indent:-15pt;text-align:left}#sbo-rt-content .copy{margin-top:8pt;margin-bottom:8pt;text-indent:.024pt}#sbo-rt-content .indent{margin-top:4pt;margin-bottom:5pt;text-indent:18pt;text-align:left}#sbo-rt-content .indenthangingB{margin-top:4pt;margin-bottom:4pt;margin-left:40pt;text-indent:-7pt;text-align:left}#sbo-rt-content .indenthangingBB{margin-top:4pt;margin-bottom:4pt;margin-left:58pt;text-indent:-6.5pt;text-align:left}#sbo-rt-content .indenthangingBBB{margin-top:4pt;margin-bottom:4pt;margin-left:80pt;text-indent:-6pt;text-align:left}#sbo-rt-content .indenthangingBP{margin-top:4pt;margin-bottom:4pt;margin-left:40pt;text-align:left}#sbo-rt-content .indenthangingBP1{margin-top:4pt;margin-bottom:4pt;margin-left:30pt;text-indent:15pt;text-align:left}#sbo-rt-content .tab-caption{font-weight:bold;margin-top:14pt;margin-bottom:8pt;text-align:center;page-break-after:avoid;page-break-inside:avoid}#sbo-rt-content .source{font-size:medium;margin-top:2pt;margin-bottom:2pt;page-break-before:avoid;page-break-inside:avoid;text-align:center}#sbo-rt-content .fig-caption{font-weight:bold;margin-top:4pt;margin-bottom:14pt;text-align:center;page-break-before:avoid;page-break-inside:avoid}#sbo-rt-content .fig-caption2{font-weight:bold;margin-top:4pt;margin-bottom:14pt;text-align:left;page-break-before:avoid;page-break-inside:avoid}#sbo-rt-content .blockquote{margin-top:7pt;margin-bottom:2pt;margin-left:60pt;text-align:left}#sbo-rt-content .attribution{margin-top:2pt;margin-bottom:17pt;margin-right:40pt;text-align:right}#sbo-rt-content .attribution1{margin-top:2pt;margin-bottom:17pt;margin-right:15pt;text-align:right}#sbo-rt-content .attri{margin-left:100pt;margin-right:100pt}#sbo-rt-content .toc-preface{margin-top:5pt;margin-bottom:5pt;margin-left:65pt;text-align:left}#sbo-rt-content .toc-appendix{margin-top:10pt;margin-bottom:5pt;margin-left:55pt;text-align:left}#sbo-rt-content .toc-index{margin-top:10pt;margin-bottom:5pt;margin-left:55pt;text-align:left}#sbo-rt-content .bib{margin-top:10pt;margin-bottom:5pt;margin-left:15pt;text-align:left}#sbo-rt-content .footnote{font-size:small;margin-top:4pt;margin-bottom:4pt;margin-left:20pt;text-indent:-11pt;text-align:left}#sbo-rt-content .pre{font-family:"Courier New";font-size:small;margin-top:5pt;margin-bottom:5pt;margin-left:13pt}#sbo-rt-content .pre1{font-family:"Courier New";font-size:small;margin-top:5pt;margin-bottom:5pt;margin-left:25pt}#sbo-rt-content .codelink{font-size:small;margin-top:6pt;margin-bottom:6pt;font-weight:bold;page-break-after:avoid}#sbo-rt-content .image1{text-align:center;page-break-before:always}#sbo-rt-content div.image1,#sbo-rt-content img{max-width:99%;max-height:99%}#sbo-rt-content code{font-size:small}#sbo-rt-content .edition{font-size:15pt;margin-top:15pt;margin-bottom:15pt;text-align:center;font-weight:bold}#sbo-rt-content .equation{text-align:center}#sbo-rt-content .indenthangingN{margin-top:4pt;margin-bottom:4pt;margin-left:50pt;text-indent:-12pt;text-align:left}#sbo-rt-content .indenthangingNaa{margin-top:4pt;margin-bottom:4pt;margin-left:48pt;text-indent:-11pt;text-align:left}#sbo-rt-content .indenthangingNP1{margin-top:4pt;margin-bottom:4pt;margin-left:30pt;text-align:left}#sbo-rt-content .indenthangingNP{margin-top:4pt;margin-bottom:4pt;margin-left:30pt;text-indent:15pt;text-align:left}#sbo-rt-content .indenthangingN1{margin-top:4pt;margin-bottom:4pt;margin-left:50pt;text-indent:-17.5pt;text-align:left}#sbo-rt-content .indenthangingNB{margin-top:4pt;margin-bottom:4pt;margin-left:75pt;text-indent:-7.5pt;text-align:left}#sbo-rt-content .noindent{margin-top:4pt;margin-bottom:4pt;text-indent:.02pt}#sbo-rt-content .publisher{margin-top:130pt;margin-bottom:2pt;text-align:center}#sbo-rt-content .publishertext{margin-top:6pt;margin-bottom:2pt;text-align:center}#sbo-rt-content .sidebar{font-size:medium;margin-top:6pt;margin-bottom:12pt;margin-left:24pt;margin-right:24pt}#sbo-rt-content .sb-noindent{margin-top:4pt;margin-bottom:4pt;text-indent:.02pt;margin-left:15pt;margin-right:15pt}#sbo-rt-content .sb-indent{margin-top:4pt;margin-bottom:5pt;text-indent:15pt;margin-left:15pt;margin-right:15pt}#sbo-rt-content .title{font-size:110%;margin-top:4pt;margin-bottom:4pt;font-weight:bold;margin-left:7pt;page-break-inside:avoid;page-break-after:avoid}#sbo-rt-content .question{margin-top:4pt;margin-bottom:4pt;margin-left:30pt;text-indent:-12pt;text-align:left}#sbo-rt-content .questiona{margin-top:4pt;margin-bottom:4pt;margin-left:70pt;text-indent:-11.5pt;text-align:left}#sbo-rt-content .questionP{margin-top:4pt;margin-bottom:4pt;margin-left:30pt;text-align:left}#sbo-rt-content .step{margin-top:4pt;margin-bottom:4pt;margin-left:65pt;text-indent:-38pt;text-align:left}#sbo-rt-content .division{font-size:100%;margin-top:4pt;margin-bottom:4pt;font-weight:bold;margin-left:10pt}#sbo-rt-content .question1{margin-top:4pt;margin-bottom:4pt;margin-left:29pt;text-indent:-18pt;text-align:left}#sbo-rt-content .copy1{margin-top:8pt;margin-bottom:8pt;margin-left:24pt;text-align:left;text-indent:.024pt}#sbo-rt-content .copy2{margin-top:8pt;margin-bottom:8pt;font-size:140%;text-align:left;text-indent:.024pt}#sbo-rt-content .copy3{margin-top:8pt;margin-bottom:8pt;font-size:130%;text-align:left;text-indent:.024pt}#sbo-rt-content .imagefir{text-align:center}</style><link rel="canonical" href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/copyright.html"><meta name="description" content=" Software Engineering Institute | CarnegieMellon The SEI Series in Software Engineering Many of the designations used by manufacturers and sellers to distinguish their products are claimed as trademarks. Where those designations ... "><meta property="og:title" content="Copyright Page"><meta itemprop="isPartOf" content="/library/view/software-architecture-in/9780132942799/"><meta itemprop="name" content="Copyright Page"><meta property="og:url" itemprop="url" content="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/copyright.html"><meta property="og:site_name" content="Safari"><meta property="og:image" itemprop="thumbnailUrl" content="https://www.safaribooksonline.com/library/cover/9780132942799/"><meta property="og:description" itemprop="description" content=" Software Engineering Institute | CarnegieMellon The SEI Series in Software Engineering Many of the designations used by manufacturers and sellers to distinguish their products are claimed as trademarks. Where those designations ... "><meta itemprop="inLanguage" content="en"><meta itemprop="publisher" content="Addison-Wesley Professional"><meta property="og:type" content="book"><meta property="og:book:isbn" itemprop="isbn" content="9780132942799"><meta property="og:book:author" itemprop="author" content="Rick Kazman"><meta property="og:book:author" itemprop="author" content="Paul Clements"><meta property="og:book:author" itemprop="author" content="Len Bass"><meta property="og:book:tag" itemprop="about" content="Core Programming"><meta name="twitter:card" content="summary"><meta name="twitter:site" content="@safari"><style type="text/css" id="font-styles" data-template="#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-size: &lt;%= font_size %&gt; !important; }"></style><style type="text/css" id="font-family" data-template="#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-family: &lt;%= font_family %&gt; !important; }"></style><style type="text/css" id="column-width" data-template="#sbo-rt-content { max-width: &lt;%= column_width %&gt;% !important; margin: 0 auto !important; }"></style><!--[if lt IE 9]><script src="/static/js/src/respond.min.fa78ffe6f7ba.js"></script><![endif]--><script type="text/javascript" src="5.%20Availability_files/ecc99425e988.js" async=""></script><noscript><meta http-equiv="refresh" content="0; url=/library/no-js/" /></noscript><script type="text/javascript">
  (function(i,s,o,g,r,a,m) {
    i['GoogleAnalyticsObject']=r;
    i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();
    a=s.createElement(o),m=s.getElementsByTagName(o)[0];
    a.async=1;
    a.src=g;
    m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  var matches = document.cookie.match(/BrowserCookie\s*=\s*([a-f0-9\-]{36})/),
      user_uuid = null;

  if (matches && matches.length === 2) {
    user_uuid = matches[1];
  }


  ga('create', 'UA-39299553-7', {'userId': '10f9e41b-1414-4ac1-bc80-973364aac808' });


ga('set', 'dimension1', 'Trial');
ga('set', 'dimension6', user_uuid);


  ga('set', 'dimension2', '10f9e41b-1414-4ac1-bc80-973364aac808');
  




  //enable enhanced link tracking
  ga('require', 'linkid', 'linkid.js');

  // reading interface will track pageviews itself
  if (document.location.pathname.indexOf("/library/view") !== 0) {
    ga('send', 'pageview');
  }
</script><script src="5.%20Availability_files/_config.js" data-requiremodule="/static/js/pages/_config.1113c6153f5e.js" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="5.%20Availability_files/_init.js" data-requiremodule="/static/js/nest/_init.1198db94d0a6.js" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><style id="annotator-dynamic-style">.annotator-adder, .annotator-outer, .annotator-notice {
  z-index: 100019;
}
.annotator-filter {
  z-index: 100009;
}</style></head>


<body class="reading sidenav  js-show-related scalefonts subscribe-panel library nav-collapsed">

    
      <div class="hide working" role="status">
        <div class="working-image"></div>
      </div>
      <div class="sbo-site-nav">
        



<a href="#container" class="skip">Skip to content</a><header class="topbar t-topbar"><nav role="navigation" class="js-site-nav"><ul class="topnav"><li class="logo t-logo"><a href="https://www.safaribooksonline.com/home/" class="l0 safari js-keyboard-nav-home"><em>Safari</em></a></li><li><a href="https://www.safaribooksonline.com/r/" class="t-recommendations-nav l0 ss-picks None"><span>Recommended</span></a></li><li><a href="https://www.safaribooksonline.com/s/" class="t-queue-nav l0 ss-queue None"><span>Queue</span></a></li><li class="search"><a href="#" class="t-search-nav trigger ss-search l0" data-dropdown-selector=".searchbox"><span>Search</span></a></li><li class="usermenu dropdown"><a href="#" class="trigger l0 ss-navigatedown nav-dropdown"><span>Expand Nav</span></a><div class="drop-content"><ul><li><a href="https://www.safaribooksonline.com/recent/" class="t-recent-nav l1 ss-recent None">Recent</a></li><li><a href="https://www.safaribooksonline.com/topics" class="t-topics-link l1 ss-hexbase None">Topics</a></li><li><a href="https://www.safaribooksonline.com/tutorials/" class="l1 ss-toots t-tutorials-nav js-toggle-menu-item None"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20" version="1.1"><title>icon for tutorials
  </title><desc></desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M15.8 18.2C15.8 18.2 15.9 18.2 16 18.2 16.1 18.2 16.2 18.2 16.4 18.2 16.5 18.2 16.7 18.1 16.9 18 17 17.9 17.1 17.8 17.2 17.7 17.3 17.6 17.4 17.5 17.4 17.4 17.5 17.2 17.6 16.9 17.6 16.7 17.6 16.6 17.6 16.5 17.6 16.4 17.5 16.2 17.5 16.1 17.4 15.9 17.3 15.8 17.2 15.6 17 15.5 16.8 15.3 16.6 15.3 16.4 15.2 16.2 15.2 16 15.2 15.8 15.2 15.7 15.2 15.5 15.3 15.3 15.4 15.2 15.4 15.1 15.5 15 15.7 14.9 15.8 14.8 15.9 14.7 16 14.7 16.1 14.6 16.3 14.6 16.4 14.6 16.5 14.6 16.6 14.6 16.6 14.6 16.7 14.6 16.9 14.6 17 14.6 17.1 14.7 17.3 14.7 17.4 14.8 17.6 15 17.7 15.1 17.9 15.2 18 15.3 18 15.5 18.1 15.5 18.1 15.6 18.2 15.7 18.2 15.7 18.2 15.7 18.2 15.8 18.2L15.8 18.2ZM9.4 11.5C9.5 11.5 9.5 11.5 9.6 11.5 9.7 11.5 9.9 11.5 10 11.5 10.2 11.5 10.3 11.4 10.5 11.3 10.6 11.2 10.8 11.1 10.9 11 10.9 10.9 11 10.8 11.1 10.7 11.2 10.5 11.2 10.2 11.2 10 11.2 9.9 11.2 9.8 11.2 9.7 11.2 9.5 11.1 9.4 11 9.2 10.9 9.1 10.8 8.9 10.6 8.8 10.5 8.7 10.3 8.6 10 8.5 9.9 8.5 9.7 8.5 9.5 8.5 9.3 8.5 9.1 8.6 9 8.7 8.8 8.7 8.7 8.8 8.6 9 8.5 9.1 8.4 9.2 8.4 9.3 8.2 9.5 8.2 9.8 8.2 10 8.2 10.1 8.2 10.2 8.2 10.3 8.2 10.5 8.3 10.6 8.4 10.7 8.5 10.9 8.6 11.1 8.7 11.2 8.9 11.3 9 11.4 9.1 11.4 9.2 11.4 9.3 11.5 9.3 11.5 9.3 11.5 9.4 11.5 9.4 11.5L9.4 11.5ZM3 4.8C3.1 4.8 3.1 4.8 3.2 4.8 3.4 4.8 3.5 4.8 3.7 4.8 3.8 4.8 4 4.7 4.1 4.6 4.3 4.5 4.4 4.4 4.5 4.3 4.6 4.2 4.6 4.1 4.7 4 4.8 3.8 4.8 3.5 4.8 3.3 4.8 3.1 4.8 3 4.8 2.9 4.7 2.8 4.7 2.6 4.6 2.5 4.5 2.3 4.4 2.2 4.2 2.1 4 1.9 3.8 1.9 3.6 1.8 3.5 1.8 3.3 1.8 3.1 1.8 2.9 1.8 2.7 1.9 2.6 2 2.4 2.1 2.3 2.2 2.2 2.3 2.1 2.4 2 2.5 2 2.6 1.8 2.8 1.8 3 1.8 3.3 1.8 3.4 1.8 3.5 1.8 3.6 1.8 3.8 1.9 3.9 2 4 2.1 4.2 2.2 4.4 2.4 4.5 2.5 4.6 2.6 4.7 2.7 4.7 2.8 4.7 2.9 4.8 2.9 4.8 3 4.8 3 4.8 3 4.8L3 4.8ZM13.1 15.2C13.2 15.1 13.2 15.1 13.2 15.1 13.3 14.9 13.4 14.7 13.6 14.5 13.8 14.2 14.1 14 14.4 13.8 14.7 13.6 15.1 13.5 15.5 13.4 15.9 13.4 16.3 13.4 16.7 13.5 17.2 13.5 17.6 13.7 17.9 13.9 18.2 14.1 18.5 14.4 18.7 14.7 18.9 15 19.1 15.3 19.2 15.6 19.3 15.9 19.4 16.1 19.4 16.4 19.4 17 19.3 17.5 19.1 18.1 19 18.3 18.9 18.5 18.7 18.7 18.5 19 18.3 19.2 18 19.4 17.7 19.6 17.3 19.8 16.9 19.9 16.6 20 16.3 20 16 20 15.8 20 15.6 20 15.4 19.9 15.4 19.9 15.4 19.9 15.4 19.9 15.2 19.9 15 19.8 14.9 19.8 14.8 19.7 14.7 19.7 14.6 19.7 14.4 19.6 14.3 19.5 14.1 19.3 13.7 19.1 13.4 18.7 13.2 18.4 13.1 18.1 12.9 17.8 12.9 17.5 12.8 17.3 12.8 17.1 12.8 16.9L3.5 14.9C3.3 14.9 3.1 14.8 3 14.8 2.7 14.7 2.4 14.5 2.1 14.3 1.7 14 1.4 13.7 1.2 13.3 1 13 0.9 12.6 0.8 12.3 0.7 12 0.7 11.7 0.7 11.4 0.7 11 0.8 10.5 1 10.1 1.1 9.8 1.3 9.5 1.6 9.2 1.8 8.9 2.1 8.7 2.4 8.5 2.8 8.3 3.2 8.1 3.6 8.1 3.9 8 4.2 8 4.5 8 4.6 8 4.8 8 4.9 8.1L6.8 8.5C6.8 8.4 6.8 8.4 6.8 8.4 6.9 8.2 7.1 8 7.2 7.8 7.5 7.5 7.7 7.3 8 7.1 8.4 6.9 8.7 6.8 9.1 6.7 9.5 6.7 10 6.7 10.4 6.8 10.8 6.8 11.2 7 11.5 7.2 11.8 7.5 12.1 7.7 12.4 8 12.6 8.3 12.7 8.6 12.8 8.9 12.9 9.2 13 9.4 13 9.7 13 9.7 13 9.8 13 9.8 13.6 9.9 14.2 10.1 14.9 10.2 15 10.2 15 10.2 15.1 10.2 15.3 10.2 15.4 10.2 15.6 10.2 15.8 10.1 16 10 16.2 9.9 16.4 9.8 16.5 9.6 16.6 9.5 16.8 9.2 16.9 8.8 16.9 8.5 16.9 8.3 16.9 8.2 16.8 8 16.8 7.8 16.7 7.7 16.6 7.5 16.5 7.3 16.3 7.2 16.2 7.1 16 7 15.9 6.9 15.8 6.9 15.7 6.9 15.6 6.8 15.5 6.8L6.2 4.8C6.2 5 6 5.2 5.9 5.3 5.7 5.6 5.5 5.8 5.3 6 4.9 6.2 4.5 6.4 4.1 6.5 3.8 6.6 3.5 6.6 3.2 6.6 3 6.6 2.8 6.6 2.7 6.6 2.6 6.6 2.6 6.5 2.6 6.5 2.5 6.5 2.3 6.5 2.1 6.4 1.8 6.3 1.6 6.1 1.3 6 1 5.7 0.7 5.4 0.5 5 0.3 4.7 0.2 4.4 0.1 4.1 0 3.8 0 3.6 0 3.3 0 2.8 0.1 2.2 0.4 1.7 0.5 1.5 0.7 1.3 0.8 1.1 1.1 0.8 1.3 0.6 1.6 0.5 2 0.3 2.3 0.1 2.7 0.1 3.1 0 3.6 0 4 0.1 4.4 0.2 4.8 0.3 5.1 0.5 5.5 0.8 5.7 1 6 1.3 6.2 1.6 6.3 1.9 6.4 2.3 6.5 2.5 6.6 2.7 6.6 3 6.6 3 6.6 3.1 6.6 3.1 9.7 3.8 12.8 4.4 15.9 5.1 16.1 5.1 16.2 5.2 16.4 5.2 16.7 5.3 16.9 5.5 17.2 5.6 17.5 5.9 17.8 6.2 18.1 6.5 18.3 6.8 18.4 7.2 18.6 7.5 18.6 7.9 18.7 8.2 18.7 8.6 18.7 9 18.6 9.4 18.4 9.8 18.3 10.1 18.2 10.3 18 10.6 17.8 10.9 17.5 11.1 17.3 11.3 16.9 11.6 16.5 11.8 16 11.9 15.7 12 15.3 12 15 12 14.8 12 14.7 12 14.5 11.9 13.9 11.8 13.3 11.7 12.6 11.5 12.5 11.7 12.4 11.9 12.3 12 12.1 12.3 11.9 12.5 11.7 12.7 11.3 12.9 10.9 13.1 10.5 13.2 10.2 13.3 9.9 13.3 9.6 13.3 9.4 13.3 9.2 13.3 9 13.2 9 13.2 9 13.2 9 13.2 8.8 13.2 8.7 13.2 8.5 13.1 8.2 13 8 12.8 7.7 12.6 7.4 12.4 7.1 12 6.8 11.7 6.7 11.4 6.6 11.1 6.5 10.8 6.4 10.6 6.4 10.4 6.4 10.2 5.8 10.1 5.2 9.9 4.5 9.8 4.4 9.8 4.4 9.8 4.3 9.8 4.1 9.8 4 9.8 3.8 9.8 3.6 9.9 3.4 10 3.2 10.1 3 10.2 2.9 10.4 2.8 10.5 2.6 10.8 2.5 11.1 2.5 11.5 2.5 11.6 2.5 11.8 2.6 12 2.6 12.1 2.7 12.3 2.8 12.5 2.9 12.6 3.1 12.8 3.2 12.9 3.3 13 3.5 13.1 3.6 13.1 3.7 13.1 3.8 13.2 3.9 13.2L13.1 15.2 13.1 15.2Z" fill="currentColor"></path></g></svg><em>Tutorials</em></a></li><li class="nav-highlights"><a href="https://www.safaribooksonline.com/u/001o000000ijSMHAA2/" class="t-highlights-nav l1 ss-highlights None">Highlights</a></li><li><a href="https://www.safaribooksonline.com/u/" class="t-settings-nav l1 js-settings ss-settings None">Settings</a></li><li><a href="https://community.safaribooksonline.com/" class="l1 no-icon">Feedback</a></li><li><a href="https://www.safaribooksonline.com/accounts/logout/" class="l1 no-icon">Sign Out</a></li></ul><ul class="profile"><li><a href="https://www.safaribooksonline.com/u/" class="l2 None">Settings</a><span class="l2 t-nag-notification" id="nav-nag"><strong class="trial-green">10</strong> days left in your trial.
  
  

  
    
      

<a class="" href="https://www.safaribooksonline.com/subscribe/">Subscribe</a>.


    
  

  

</span></li><li><a href="https://community.safaribooksonline.com/" class="l2">Feedback</a></li><li><a href="https://www.safaribooksonline.com/accounts/logout/" class="l2">Sign Out</a></li></ul></div></li></ul></nav></header>


      </div>
      <div style="height: auto;" id="container" class="application">
        
          <div class="nav-container clearfix">
            


            
            
          </div>

          

  <div class="js-toc">
    
      <div class="sbo-reading-menu sbo-menu-top"><section class="sbo-toc-container toc-menu"><a href="#" class="sbo-toc-thumb"><span class="sbo-title ss-list"><h1><div class="visuallyhidden">Table of Contents for </div>
      
      Software Architecture in Practice, Third Edition
      
    </h1></span></a><div class="toc-contents"></div></section></div>

    

    <div class="interface-controls interface-controls-top">
      <ul class="interface-control-btns js-bitlist js-reader">
        <li class="js-search-in-archive search-in-archive t-search-in-archive"><a href="#" title="Search in archive" class="js-search-controls search-controls"><span class="icon">Search in book...</span></a><form class="search-archive-bar js-search-form"><input name="q" placeholder="Search inside this book..." autocomplete="off" type="search"></form><div class="js-search-results search-archive-results"></div></li><li class="queue-control"><button title="Add to Queue" aria-label="Add to Queue" data-for-analytics="9780132942799:ch05.html" type="button" class="rec-fav ss-queue js-queue js-current-chapter-queue" data-queue-endpoint="/api/v1/book/9780132942799/chapter/ch05.html"><span>Add to Queue</span></button></li><li class="js-font-control-panel font-control-activator"><a href="#" data-push-state="false" id="font-controls" title="Change font size" aria-label="Change font size"><span class="icon">Toggle Font Controls</span></a></li><li class="dropdown sharing-controls"><a href="#" class="trigger" data-push-state="false" title="Share" aria-label="Share"><i class="fa fa-share"></i></a><ul class="social-sharing dropdown-menu"><li><a class="twitter share-button t-twitter" target="_blank" aria-label="Share this section on Twitter" title="Share this section on Twitter" href="https://twitter.com/share?url=https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/copyright.html&amp;text=Software%20Architecture%20in%20Practice%2C%20Third%20Edition&amp;via=safari"><span>Twitter</span></a></li><li><a class="facebook share-button t-facebook" target="_blank" aria-label="Share this section on Facebook" title="Share this section on Facebook" href="https://www.facebook.com/sharer/sharer.php?u=https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/copyright.html"><span>Facebook</span></a></li><li><a class="googleplus share-button t-googleplus" target="_blank" aria-label="Share this secton on Google Plus" title="Share this secton on Google Plus" href="https://plus.google.com/share?url=https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/copyright.html"><span>Google Plus</span></a></li><li><a class="email share-button t-email" aria-label="Share this section via email" title="Share this section via email" href="mailto:?subject=Safari:%20Copyright%20Page&amp;body=https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/copyright.html%0D%0Afrom%20Software%20Architecture%20in%20Practice%2C%20Third%20Edition%0D%0A"><span>Email</span></a></li></ul></li>
      </ul>
    </div>

    <section role="document">
	  <div class="t-sbo-prev sbo-prev sbo-nav-top">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch04.html" class="prev nav-link">
      
          <span aria-hidden="true" class="pagination-label t-prev-label">Prev</span>
          <span class="visuallyhidden">Previous Chapter</span>
          <div class="pagination-title t-prev-title">4. Understanding Quality Attributes</div>
        </a>
    
  
  </div>

  <div class="t-sbo-next sbo-next sbo-nav-top">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch06.html" class="next nav-link">
      
          <span aria-hidden="true" class="pagination-label t-next-label">Next</span>
          <span class="visuallyhidden">Next Chapter</span>
          <div class="pagination-title t-next-title">6. Interoperability</div>
        </a>
    
  
  </div>



<div id="sbo-rt-content"><div class="annotator-wrapper"><h2 id="ch05"><a id="page_79"></a>5. Availability</h2>
<p class="indent"><strong><em>With James Scott</em></strong></p>
<div class="attri">
<p class="blockquote"><em>Ninety percent of life is just showing up.</em></p>
<p class="attribution">—Woody Allen</p>
</div>
<p class="noindent">Availability refers to a property of software that 
it is there and ready to carry out its task when you need it to be. This
 is a broad perspective and encompasses what is normally called 
reliability (although it may encompass additional considerations such as
 downtime due to periodic maintenance). In fact, availability builds 
upon the concept of reliability by adding the notion of recovery—that 
is, when the system breaks, it repairs itself. Repair may be 
accomplished by various means, which we’ll see in this chapter. More 
precisely, Avižienis and his colleagues have defined dependability:</p>
<p class="blockquote">Dependability is the ability to avoid failures that are more frequent and more severe than is acceptable.</p>
<p class="indent">Our definition of availability as an aspect of 
dependability is this: “Availability refers to the ability of a system 
to mask or repair faults such that the cumulative service outage period 
does not exceed a required value over a specified time interval.” These 
definitions make the concept of failure subject to the judgment of an 
external agent, possibly a human. They also subsume concepts of 
reliability, confidentiality, integrity, and any other quality attribute
 that involves a concept of unacceptable failure.</p>
<p class="indent">Availability is closely related to security. A 
denial-of-service attack is explicitly designed to make a system 
fail—that is, to make it unavailable. Availability is also closely 
related to performance, because it may be difficult to tell when a 
system has failed and when it is simply being outrageously slow to 
respond. Finally, availability is closely allied with safety, which is 
concerned with keeping <a id="page_80"></a>the system from entering a hazardous state and recovering or limiting the damage when it does.</p>
<p class="indent">Fundamentally, availability is about minimizing 
service outage time by mitigating faults. Failure implies visibility to a
 system or human observer in the environment. That is, a failure is the 
deviation of the system from its specification, where the deviation is 
externally visible. One of the most demanding tasks in building a 
high-availability, fault-tolerant system is to understand the nature of 
the failures that can arise during operation (see the sidebar “<a href="#ch05sb01">Planning for Failure</a>”). Once those are understood, mitigation strategies can be designed into the software.</p>
<p class="indent">A failure’s cause is called a fault. A fault can be 
either internal or external to the system under consideration. 
Intermediate states between the occurrence of a fault and the occurrence
 of a failure are called errors. Faults can be prevented, tolerated, 
removed, or forecast. In this way a system becomes “resilient” to 
faults.</p>
<p class="indent">Among the areas with which we are concerned are how 
system faults are detected, how frequently system faults may occur, what
 happens when a fault occurs, how long a system is allowed to be out of 
operation, when faults or failures may occur safely, how faults or 
failures can be prevented, and what kinds of notifications are required 
when a failure occurs.</p>
<p class="indent">Because a system failure is observable by users, the 
time to repair is the time until the failure is no longer observable. 
This may be a brief delay in the response time or it may be the time it 
takes someone to fly to a remote location in the Andes to repair a piece
 of mining machinery (as was recounted to us by a person responsible for
 repairing the software in a mining machine engine). The notion of 
“observability” can be a tricky one: the Stuxnet virus, as an example, 
went unobserved for a very long time even though it was doing damage. In
 addition, we are often concerned with the level of capability that 
remains when a failure has occurred—a degraded operating mode.</p>
<p class="indent">The distinction between faults and failures allows 
discussion of automatic repair strategies. That is, if code containing a
 fault is executed but the system is able to recover from the fault 
without any deviation from specified behavior being observable, there is
 no failure.</p>
<p class="indent">The availability of a system can be calculated as the 
probability that it will provide the specified services within required 
bounds over a specified time interval. When referring to hardware, there
 is a well-known expression used to derive steady-state availability:</p>
<div class="image"><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/080fig01.jpg" src="5.%20Availability_files/080fig01.jpg" alt="Image" height="42" width="130"></div>
<p class="noindent">where <em>MTBF</em> refers to the mean time between failures and <em>MTTR</em>
 refers to the mean time to repair. In the software world, this formula 
should be interpreted to mean that when thinking about availability, you
 should think about what will make your system fail, how likely that is 
to occur, and that there will be some time required to repair it.</p>
<p class="indent"><a id="page_81"></a>From this formula it is possible 
to calculate probabilities and make claims like “99.999 percent 
availability,” or a 0.001 percent probability that the system will not 
be operational when needed. Scheduled downtimes (when the system is 
intentionally taken out of service) may not be considered when 
calculating availability, because the system is deemed “not needed” 
then; of course, this depends on the specific requirements for the 
system, often encoded in service-level agreements (SLAs). This 
arrangement may lead to seemingly odd situations where the system is 
down and users are waiting for it, but the downtime is scheduled and so 
is not counted against any availability requirements.</p>
<p class="indent">In operational systems, faults are detected and 
correlated prior to being reported and repaired. Fault correlation logic
 will categorize a fault according to its severity (critical, major, or 
minor) and service impact (service-affecting or non-service-affecting) 
in order to provide the system operator with timely and accurate system 
status and allow for the appropriate repair strategy to be employed. The
 repair strategy may be automated or may require manual intervention.</p>
<p class="indent">The availability provided by a computer system or 
hosting service is frequently expressed as a service-level agreement. 
This SLA specifies the availability level that is guaranteed and, 
usually, the penalties that the computer system or hosting service will 
suffer if the SLA is violated. The SLA that Amazon provides for its EC2 
cloud service is</p>
<p class="blockquote">AWS will use commercially reasonable efforts to 
make Amazon EC2 available with an Annual Uptime Percentage [defined 
elsewhere] of at least 99.95% during the Service Year. In the event 
Amazon EC2 does not meet the Annual Uptime Percentage commitment, you 
will be eligible to receive a Service Credit as described below.</p>
<p class="noindent"><a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch05.html#ch05tab01">Table 5.1</a>
 provides examples of system availability requirements and associated 
threshold values for acceptable system downtime, measured over 
observation periods of 90 days and one year. The term <em>high availability</em>
 typically refers to designs targeting availability of 99.999 percent 
(“5 nines”) or greater. By definition or convention, only unscheduled 
outages contribute to system downtime.</p>
<p class="tab-caption"><a id="ch05tab01"></a>Table 5.1. System Availability Requirements</p>
<div class="image"><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/05tab01.jpg" src="5.%20Availability_files/05tab01.jpg" alt="Image" height="181" width="631"></div>
<div class="sidebar"><a id="page_82"></a><hr>
<p class="title"><a id="ch05sb01"></a>Planning for Failure</p>
<p class="sb-noindent">When designing a high-availability or 
safety-critical system, it’s tempting to say that failure is not an 
option. It’s a catchy phrase, but it’s a lousy design philosophy. In 
fact, failure is not only an option, it’s almost inevitable. What will 
make your system safe and available is planning for the occurrence of 
failure or (more likely) failures, and handling them with aplomb. The 
first step is to understand what kinds of failures your system is prone 
to, and what the consequences of each will be. Here are three well-known
 techniques for getting a handle on this.</p>
<p class="division">Hazard analysis</p>
<p class="sb-noindent"><em>Hazard analysis</em> is a technique that 
attempts to catalog the hazards that can occur during the operation of a
 system. It categorizes each hazard according to its severity. For 
example, the DO-178B standard used in the aeronautics industry defines 
these failure condition levels in terms of their effects on the 
aircraft, crew, and passengers:</p>
<p class="indenthangingB">• <em>Catastrophic.</em> This kind of failure 
may cause a crash. This failure represents the loss of critical function
 required to safely fly and land aircraft.</p>
<p class="indenthangingB">• <em>Hazardous.</em> This kind of failure has
 a large negative impact on safety or performance, or reduces the 
ability of the crew to operate the aircraft due to physical distress or a
 higher workload, or causes serious or fatal injuries among the 
passengers.</p>
<p class="indenthangingB">• <em>Major.</em> This kind of failure is 
significant, but has a lesser impact than a Hazardous failure (for 
example, leads to passenger discomfort rather than injuries) or 
significantly increases crew workload to the point where safety is 
affected.</p>
<p class="indenthangingB">• <em>Minor.</em> This kind of failure is 
noticeable, but has a lesser impact than a Major failure (for example, 
causing passenger inconvenience or a routine flight plan change).</p>
<p class="indenthangingB">• <em>No effect.</em> This kind of failure has no impact on safety, aircraft operation, or crew workload.</p>
<p class="sb-indent">Other domains have their own categories and 
definitions. Hazard analysis also assesses the probability of each 
hazard occurring. Hazards for which the product of cost and probability 
exceed some threshold are then made the subject of mitigation 
activities.</p>
<p class="division">Fault tree analysis</p>
<p class="sb-noindent"><em>Fault tree analysis</em> is an analytical 
technique that specifies a state of the system that negatively impacts 
safety or reliability, and then analyzes the system’s context and 
operation to find all the ways that the undesired state could occur. The
 technique uses a graphic construct (the fault tree) that helps identify
 all sequential and parallel sequences of contributing faults that will 
result in the occurrence of the undesired state, which is listed at the 
top of the tree (the “top event”). The contributing faults might be 
hardware failures, human errors, software errors, or any other pertinent
 events that can lead to the undesired state.</p>
<p class="sb-indent"><a id="page_83"></a><a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch05.html#ch05fig01">Figure 5.1</a>,
 taken from a NASA handbook on fault tree analysis, shows a very simple 
fault tree for which the top event is failure of component D. It shows 
that component D can fail if A fails <em>and</em> either B or C fails.</p>
<div class="image"><a id="ch05fig01"></a><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/05fig01.jpg" src="5.%20Availability_files/05fig01.jpg" alt="Image" height="390" width="584"></div>
<p class="fig-caption">Figure 5.1. A simple fault tree. D fails if A fails and either B or C fails.</p>
<p class="sb-indent">The symbols that connect the events in a fault tree are called gate symbols, and are taken from Boolean logic diagrams. <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch05.html#ch05fig02">Figure 5.2</a> illustrates the notation.</p>
<div class="image"><a id="ch05fig02"></a><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/05fig02.jpg" src="5.%20Availability_files/05fig02.jpg" alt="Image" height="449" width="588"></div>
<p class="fig-caption">Figure 5.2. Fault tree gate symbols</p>
<p class="sb-indent">A fault tree lends itself to static analysis in 
various ways. For example, a “minimal cut set” is the smallest 
combination of events along the bottom of the tree that together can 
cause the top event. The set of minimal cut sets shows all the ways the 
bottom events can combine to cause the overarching failure. Any 
singleton minimal cut set reveals a single point of failure, which 
should be carefully scrutinized. Also, the probabilities of various 
contributing failures can be combined to come up with a probability of 
the top event occurring. Dynamic analysis occurs when the order of 
contributing failures matters. In this case, techniques such as Markov 
analysis can be used to calculate probability of failure over different 
failure sequences.</p>
<p class="sb-indent">Fault trees aid in system design, but they can also
 be used to diagnose failures at runtime. If the top event has occurred,
 then (assuming the fault tree model is complete) one or more of the 
contributing failures has occurred, and the fault tree can be used to 
track it down and initiate repairs.</p>
<p class="sb-indent">Failure Mode, Effects, and Criticality Analysis 
(FMECA) catalogs the kinds of failures that systems of a given type are 
prone to, along with how severe the effects of each one can be. FMECA 
relies on the history of failure of similar systems in the past. <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch05.html#ch05tab02">Table 5.2</a>,
 also taken from the NASA handbook, shows the data for a system of 
redundant amplifiers. Historical data shows that amplifiers fail most 
often when there is a short circuit or the circuit is left open, but 
there are several other failure modes as well (lumped together as 
“Other”).</p>
<p class="tab-caption"><a id="page_84"></a><a id="ch05tab02"></a>Table 5.2. Failure Probabilities and Effects</p>
<div class="image"><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/05tab02.jpg" src="5.%20Availability_files/05tab02.jpg" alt="Image" height="229" width="588"></div>
<p class="sb-indent"><a id="page_85"></a>Adding up the critical column gives us the probability of a critical system failure: 5 × 10<sup>–5</sup> + 5 × 10<sup>–5</sup> + 5 × 10<sup>–5</sup> + 5 × 10<sup>–5</sup> = 2 × 10<sup>–4</sup>.</p>
<p class="sb-indent">These techniques, and others, are only as good as 
the knowledge and experience of the people who populate their respective
 data structures. One of the worst mistakes you can make, according to 
the NASA handbook, is to let form take priority over substance. That is,
 don’t let safety engineering become a matter of just filling out the 
tables. Instead, keep pressing to find out what else can go wrong, and 
then plan for it.</p>
<hr></div>
<h3 id="ch05lev1sec1">5.1. Availability General Scenario</h3>
<p class="noindent">From these considerations we can now describe the 
individual portions of an availability general scenario. These are 
summarized in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch05.html#ch05tab03">Table 5.3</a>:</p>
<p class="indenthangingB">• <em>Source of stimulus</em>. We 
differentiate between internal and external origins of faults or failure
 because the desired system response may be different.</p>
<p class="indenthangingB">• <em>Stimulus</em>. A fault of one of the following classes occurs:</p>
<p class="indenthangingBB">• <em>Omission</em>. A component fails to respond to an input.</p>
<p class="indenthangingBB">• <em>Crash</em>. The component repeatedly suffers omission faults.</p>
<p class="indenthangingBB">• <em>Timing</em>. A component responds but the response is early or late.</p>
<p class="indenthangingBB">• <em>Response</em>. A component responds with an incorrect value.</p>
<p class="indenthangingB">• <em>Artifact.</em> This specifies the 
resource that is required to be highly available, such as a processor, 
communication channel, process, or storage.</p>
<p class="indenthangingB">• <em>Environment</em>. The state of the 
system when the fault or failure occurs may also affect the desired 
system response. For example, if the system has already seen some faults
 and is operating in other than normal mode, it may be desirable to shut
 it down totally. However, if this is the first fault observed, some 
degradation of response time or function may be preferred.</p>
<p class="indenthangingB">• <em>Response</em>. There are a number of 
possible reactions to a system fault. First, the fault must be detected 
and isolated (correlated) before any other response is possible. (One 
exception to this is when the fault is prevented before it occurs.) 
After the fault is detected, the system must recover from it. Actions 
associated with these possibilities include logging the failure, 
notifying selected users or other systems, taking actions to limit the 
damage caused by the fault, switching to a degraded mode with either 
less capacity or less function, shutting down external systems, or 
becoming unavailable during repair.</p>
<p class="indenthangingB">• <em>Response measure</em>. The response 
measure can specify an availability percentage, or it can specify a time
 to detect the fault, time to repair the fault, times or time intervals 
during which the system must be available, or the duration for which the
 system must be available.</p>
<p class="tab-caption"><a id="page_86"></a><a id="ch05tab03"></a>Table 5.3. Availability General Scenario</p>
<div class="image"><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/05tab03.jpg" src="5.%20Availability_files/05tab03.jpg" alt="Image" height="520" width="630"></div>
<p class="indent"><a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch05.html#ch05fig03">Figure 5.3</a>
 shows a concrete scenario generated from the general scenario: The 
heartbeat monitor determines that the server is nonresponsive during 
normal operations. The system informs the operator and continues to 
operate with no downtime.</p>
<div class="image"><a id="ch05fig03"></a><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/05fig03.jpg" src="5.%20Availability_files/05fig03.jpg" alt="Image" height="237" width="539"></div>
<p class="fig-caption">Figure 5.3. Sample concrete availability scenario</p>
<h3 id="ch05lev1sec2"><a id="page_87"></a>5.2. Tactics for Availability</h3>
<p class="noindent">A failure occurs when the system no longer delivers a
 service that is consistent with its specification; this failure is 
observable by the system’s actors. A fault (or combination of faults) 
has the potential to cause a failure. Availability tactics, therefore, 
are designed to enable a system to endure system faults so that a 
service being delivered by the system remains compliant with its 
specification. The tactics we discuss in this section will keep faults 
from becoming failures or at least bound the effects of the fault and 
make repair possible. We illustrate this approach in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch05.html#ch05fig04">Figure 5.4</a>.</p>
<div class="image"><a id="ch05fig04"></a><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/05fig04.jpg" src="5.%20Availability_files/05fig04.jpg" alt="Image" height="200" width="630"></div>
<p class="fig-caption">Figure 5.4. Goal of availability tactics</p>
<p class="indent">Availability tactics may be categorized as addressing 
one of three categories: fault detection, fault recovery, and fault 
prevention. The tactics categorization for availability is shown in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch05.html#ch05fig05">Figure 5.5</a>
 (on the next page). Note that it is often the case that these tactics 
will be provided for you by a software infrastructure, such as a 
middleware package, so your job as an architect is often one of choosing
 and assessing (rather than implementing) the right availability tactics
 and the right combination of tactics.</p>
<div class="image"><a id="ch05fig05"></a><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/05fig05.jpg" src="5.%20Availability_files/05fig05.jpg" alt="Image" height="611" width="584"></div>
<p class="fig-caption">Figure 5.5. Availability tactics</p>
<h4 id="ch05lev2sec1">Detect Faults</h4>
<p class="noindent">Before any system can take action regarding a fault,
 the presence of the fault must be detected or anticipated. Tactics in 
this category include the following:</p>
<p class="indenthangingB">• <em>Ping/echo</em> refers to an asynchronous
 request/response message pair exchanged between nodes, used to 
determine reachability and the round-trip delay through the associated 
network path. But the echo also determines that the pinged component is 
alive and responding correctly. The ping is <a id="page_88"></a>often 
sent by a system monitor. Ping/echo requires a time threshold to be set;
 this threshold tells the pinging component how long to wait for the 
echo before considering the pinged component to have failed (“timed 
out”). Standard implementations of ping/echo are available for nodes 
interconnected via IP.</p>
<p class="indenthangingB">• <em>Monitor</em>. A monitor is a component 
that is used to monitor the state of health of various other parts of 
the system: processors, processes, I/O, memory, and so on. A system 
monitor can detect failure or congestion in the network or other shared 
resources, such as from a denial-of-service attack. It orchestrates 
software using other tactics in this category to detect malfunctioning 
components. For example, the system monitor can initiate self-tests, or 
be the component that detects faulty time stamps or missed heartbeats.<sup><a class="totri-footnote" id="ch05fn01" href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/footnotes.html#ch05fn01a">1</a></sup></p>
<p class="indenthangingB"><a id="page_89"></a>• <em>Heartbeat</em> is a 
fault detection mechanism that employs a periodic message exchange 
between a system monitor and a process being monitored. A special case 
of heartbeat is when the process being monitored periodically resets the
 watchdog timer in its monitor to prevent it from expiring and thus 
signaling a fault. For systems where scalability is a concern, transport
 and processing overhead can be reduced by piggybacking heartbeat 
messages on to other control messages being exchanged between the 
process being monitored and the distributed system controller. The big 
difference between heartbeat and ping/echo is who holds the 
responsibility for initiating the health check—the monitor or the 
component itself.</p>
<p class="indenthangingB">• <em>Time stamp.</em> This tactic is used to 
detect incorrect sequences of events, primarily in distributed 
message-passing systems. A time stamp of an event can be established by 
assigning the state of a local clock to the event immediately after the 
event occurs. Simple sequence numbers can also be used for this purpose,
 if time information is not important.</p>
<p class="indenthangingB">• <em>Sanity checking</em> checks the validity
 or reasonableness of specific operations or outputs of a component. 
This tactic is typically based on a knowledge of the internal design, 
the state of the system, or the nature of the information under 
scrutiny. It is most often employed at interfaces, to examine a specific
 information flow.</p>
<p class="indenthangingB">• <em>Condition monitoring</em> involves 
checking conditions in a process or device, or validating assumptions 
made during the design. By monitoring conditions, this tactic prevents a
 system from producing faulty behavior. The computation of checksums is a
 common example of this tactic. However, the monitor must itself be 
simple (and, ideally, provable) to ensure that it does not introduce new
 software errors.</p>
<p class="indenthangingB">• <em>Voting.</em> The most common realization
 of this tactic is referred to as triple modular redundancy (TMR), which
 employs three components that do the same thing, each of which receives
 identical inputs, and forwards their output to voting logic, used to 
detect any inconsistency among the three output states. Faced with an 
inconsistency, the voter reports a fault. It must also decide what 
output to use. It can let the majority rule, or choose some computed 
average of the disparate outputs. This tactic depends critically on the 
voting logic, which is usually realized as a simple, rigorously reviewed
 and tested singleton so that the probability of error is low.</p>
<p class="indenthangingBB"><a id="page_90"></a>• <em>Replication</em> is
 the simplest form of voting; here, the components are exact clones of 
each other. Having multiple copies of identical components can be 
effective in protecting against random failures of hardware, but this 
cannot protect against design or implementation errors, in hardware or 
software, because there is no form of diversity embedded in this tactic.</p>
<p class="indenthangingBB">• <em>Functional redundancy</em> is a form of
 voting intended to address the issue of common-mode failures (design or
 implementation faults) in hardware or software components. Here, the 
components must always give the same output given the same input, but 
they are diversely designed and diversely implemented.</p>
<p class="indenthangingBB">• <em>Analytic redundancy</em> permits not 
only diversity among components’ private sides, but also diversity among
 the components’ inputs and outputs. This tactic is intended to tolerate
 specification errors by using separate requirement specifications. In 
embedded systems, analytic redundancy also helps when some input sources
 are likely to be unavailable at times. For example, avionics programs 
have multiple ways to compute aircraft altitude, such as using 
barometric pressure, the radar altimeter, and geometrically using the 
straight-line distance and look-down angle of a point ahead on the 
ground. The voter mechanism used with analytic redundancy needs to be 
more sophisticated than just letting majority rule or computing a simple
 average. It may have to understand which sensors are currently reliable
 or not, and it may be asked to produce a higher-fidelity value than any
 individual component can, by blending and smoothing individual values 
over time.</p>
<p class="indenthangingB">• <em>Exception detection</em> refers to the 
detection of a system condition that alters the normal flow of 
execution. The exception detection tactic can be further refined:</p>
<p class="indenthangingBB">• <em>System exceptions</em> will vary 
according to the processor hardware architecture employed and include 
faults such as divide by zero, bus and address faults, illegal program 
instructions, and so forth.</p>
<p class="indenthangingBB">• The <em>parameter fence</em> tactic incorporates an <em>a priori</em>
 data pattern (such as 0xDEADBEEF) placed immediately after any 
variable-length parameters of an object. This allows for runtime 
detection of overwriting the memory allocated for the object’s 
variable-length parameters.</p>
<p class="indenthangingBB">• <em>Parameter typing</em> employs a base 
class that defines functions that add, find, and iterate over 
type-length-value (TLV) formatted message parameters. Derived classes 
use the base class functions to implement functions that provide 
parameter typing according to each parameter’s structure. Use of strong 
typing to build and parse messages results in higher availability than 
implementations that simply treat messages as byte buckets. Of course, 
all design involves tradeoffs. When you employ strong typing, you 
typically trade higher availability against ease of evolution.</p>
<p class="indenthangingBB"><a id="page_91"></a>• <em>Timeout</em> is a 
tactic that raises an exception when a component detects that it or 
another component has failed to meet its timing constraints. For 
example, a component awaiting a response from another component can 
raise an exception if the wait time exceeds a certain value.</p>
<p class="indenthangingB">• <em>Self-test.</em> Components (or, more 
likely, whole subsystems) can run procedures to test themselves for 
correct operation. Self-test procedures can be initiated by the 
component itself, or invoked from time to time by a system monitor. 
These may involve employing some of the techniques found in condition 
monitoring, such as checksums.</p>
<h4 id="ch05lev2sec2">Recover from Faults</h4>
<p class="noindent">Recover-from-faults tactics are refined into <em>preparation-and-repair</em> tactics and <em>reintroduction</em> tactics. The latter are concerned with reintroducing a failed (but rehabilitated) component back into normal operation.</p>
<p class="indent">Preparation-and-repair tactics are based on a variety 
of combinations of retrying a computation or introducing redundancy. 
They include the following:</p>
<p class="indenthangingB">• <em>Active redundancy (hot spare).</em> This refers to a configuration where all of the nodes (active or redundant spare) in a protection group<sup><a class="totri-footnote" id="ch05fn02" href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/footnotes.html#ch05fn02a">2</a></sup>
 receive and process identical inputs in parallel, allowing the 
redundant spare(s) to maintain synchronous state with the active 
node(s). Because the redundant spare possesses an identical state to the
 active processor, it can take over from a failed component in a matter 
of milliseconds. The simple case of one active node and one redundant 
spare node is commonly referred to as 1+1 (“one plus one”) redundancy. 
Active redundancy can also be used for facilities protection, where 
active and standby network links are used to ensure highly available 
network connectivity.</p>
<p class="indenthangingB">• <em>Passive redundancy (warm spare).</em> 
This refers to a configuration where only the active members of the 
protection group process input traffic; one of their duties is to 
provide the redundant spare(s) with periodic state updates. Because the 
state maintained by the redundant spares is only loosely coupled with 
that of the active node(s) in the protection group (with the looseness 
of the coupling being a function of the checkpointing mechanism employed
 between active and redundant nodes), the redundant nodes are referred 
to as warm spares. Depending on a system’s availability requirements, 
passive redundancy provides a solution that achieves a balance between 
the more highly available but more compute-intensive (and expensive) 
active redundancy tactic and the less available but significantly less 
complex cold spare tactic (which is also significantly cheaper). (For an
 <a id="page_92"></a>example of implementing passive redundancy, see the section on code templates in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch19.html#ch19">Chapter 19</a>.)</p>
<p class="indenthangingB">• <em>Spare (cold spare).</em> Cold sparing 
refers to a configuration where the redundant spares of a protection 
group remain out of service until a fail-over occurs, at which point a 
power-on-reset procedure is initiated on the redundant spare prior to 
its being placed in service. Due to its poor recovery performance, cold 
sparing is better suited for systems having only high-reliability (MTBF)
 requirements as opposed to those also having high-availability 
requirements.</p>
<p class="indenthangingB">• <em>Exception handling.</em> Once an 
exception has been detected, the system must handle it in some fashion. 
The easiest thing it can do is simply to crash, but of course that’s a 
terrible idea from the point of availability, usability, testability, 
and plain good sense. There are much more productive possibilities. The 
mechanism employed for exception handling depends largely on the 
programming environment employed, ranging from simple function return 
codes (error codes) to the use of exception classes that contain 
information helpful in fault correlation, such as the name of the 
exception thrown, the origin of the exception, and the cause of the 
exception thrown. Software can then use this information to mask the 
fault, usually by correcting the cause of the exception and retrying the
 operation.</p>
<p class="indenthangingB">• <em>Rollback.</em> This tactic permits the 
system to revert to a previous known good state, referred to as the 
“rollback line”—rolling back time—upon the detection of a failure. Once 
the good state is reached, then execution can continue. This tactic is 
often combined with active or passive redundancy tactics so that after a
 rollback has occurred, a standby version of the failed component is 
promoted to active status. Rollback depends on a copy of a previous good
 state (a checkpoint) being available to the components that are rolling
 back. Checkpoints can be stored in a fixed location and updated at 
regular intervals, or at convenient or significant times in the 
processing, such as at the completion of a complex operation.</p>
<p class="indenthangingB">• <em>Software upgrade</em> is another 
preparation-and-repair tactic whose goal is to achieve in-service 
upgrades to executable code images in a non-service-affecting manner. 
This may be realized as a function patch, a class patch, or a hitless 
in-service software upgrade (ISSU). A function patch is used in 
procedural programming and employs an incremental linker/loader to store
 an updated software function into a pre-allocated segment of target 
memory. The new version of the software function will employ the entry 
and exit points of the deprecated function. Also, upon loading the new 
software function, the symbol table must be updated and the instruction 
cache invalidated. The class patch tactic is applicable for targets 
executing object-oriented code, where the class definitions include a 
back-door mechanism that enables the runtime addition of member data and
 functions. Hitless in-service software upgrade leverages the active 
redundancy or passive <a id="page_93"></a>redundancy tactics to achieve 
non-service-affecting upgrades to software and associated schema. In 
practice, the function patch and class patch are used to deliver bug 
fixes, while the hitless in-service software upgrade is used to deliver 
new features and capabilities.</p>
<p class="indenthangingB">• <em>Retry.</em> The retry tactic assumes 
that the fault that caused a failure is transient and retrying the 
operation may lead to success. This tactic is used in networks and in 
server farms where failures are expected and common. There should be a 
limit on the number of retries that are attempted before a permanent 
failure is declared.</p>
<p class="indenthangingB">• <em>Ignore faulty behavior.</em> This tactic
 calls for ignoring messages sent from a particular source when we 
determine that those messages are spurious. For example, we would like 
to ignore the messages of an external component launching a 
denial-of-service attack by establishing Access Control List filters, 
for example.</p>
<p class="indenthangingB">• The <em>degradation</em> tactic maintains 
the most critical system functions in the presence of component 
failures, dropping less critical functions. This is done in 
circumstances where individual component failures gracefully reduce 
system functionality rather than causing a complete system failure.</p>
<p class="indenthangingB">• <em>Reconfiguration</em> attempts to recover
 from component failures by reassigning responsibilities to the 
(potentially restricted) resources left functioning, while maintaining 
as much functionality as possible.</p>
<p class="indent">Reintroduction is where a failed component is 
reintroduced after it has been corrected. Reintroduction tactics include
 the following:</p>
<p class="indenthangingB">• The <em>shadow</em> tactic refers to 
operating a previously failed or in-service upgraded component in a 
“shadow mode” for a predefined duration of time prior to reverting the 
component back to an active role. During this duration its behavior can 
be monitored for correctness and it can repopulate its state 
incrementally.</p>
<p class="indenthangingB">• <em>State resynchronization</em> is a 
reintroduction partner to the active redundancy and passive redundancy 
preparation-and-repair tactics. When used alongside the active 
redundancy tactic, the state resynchronization occurs organically, 
because the active and standby components each receive and process 
identical inputs in parallel. In practice, the states of the active and 
standby components are periodically compared to ensure synchronization. 
This comparison may be based on a cyclic redundancy check calculation 
(checksum) or, for systems providing safety-critical services, a message
 digest calculation (a one-way hash function). When used alongside the 
passive redundancy (warm spare) tactic, state resynchronization is based
 solely on periodic state information transmitted from the active 
component(s) to the standby component(s), typically via checkpointing. A
 special case of this tactic is found in stateless services, whereby any
 resource can handle a request from another (failed) resource.</p>
<p class="indenthangingB"><a id="page_94"></a>• <em>Escalating restart</em>
 is a reintroduction tactic that allows the system to recover from 
faults by varying the granularity of the component(s) restarted and 
minimizing the level of service affected. For example, consider a system
 that supports four levels of restart, as follows. The lowest level of 
restart (call it Level 0), and hence having the least impact on 
services, employs passive redundancy (warm spare), where all child 
threads of the faulty component are killed and recreated. In this way, 
only data associated with the child threads is freed and reinitialized. 
The next level of restart (Level 1) frees and reinitializes all 
unprotected memory (protected memory would remain untouched). The next 
level of restart (Level 2) frees and reinitializes all memory, both 
protected and unprotected, forcing all applications to reload and 
reinitialize. And the final level of restart (Level 3) would involve 
completely reloading and reinitializing the executable image and 
associated data segments. Support for the escalating restart tactic is 
particularly useful for the concept of graceful degradation, where a 
system is able to degrade the services it provides while maintaining 
support for mission-critical or safety-critical applications.</p>
<p class="indenthangingB">• <em>Non-stop forwarding</em> (NSF) is a 
concept that originated in router design. In this design functionality 
is split into two parts: supervisory, or control plane (which manages 
connectivity and routing information), and data plane (which does the 
actual work of routing packets from sender to receiver). If a router 
experiences the failure of an active supervisor, it can continue 
forwarding packets along known routes—with neighboring routers—while the
 routing protocol information is recovered and validated. When the 
control plane is restarted, it implements what is sometimes called 
“graceful restart,” incrementally rebuilding its routing protocol 
database even as the data plane continues to operate.</p>
<h4 id="ch05lev2sec3">Prevent Faults</h4>
<p class="noindent">Instead of detecting faults and then trying to 
recover from them, what if your system could prevent them from occurring
 in the first place? Although this sounds like some measure of 
clairvoyance might be required, it turns out that in many cases it is 
possible to do just that.<sup><a class="totri-footnote" id="ch05fn03" href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/footnotes.html#ch05fn03a">3</a></sup></p>
<p class="indenthangingB">• <em>Removal from service.</em> This tactic 
refers to temporarily placing a system component in an out-of-service 
state for the purpose of mitigating potential system failures. One 
example involves taking a component of a system out of service and 
resetting the component in order to scrub latent faults (such <a id="page_95"></a>as
 memory leaks, fragmentation, or soft errors in an unprotected cache) 
before the accumulation of faults affects service (resulting in system 
failure). Another term for this tactic is <em>software rejuvenation</em>.</p>
<p class="indenthangingB">• <em>Transactions</em>. Systems targeting 
high-availability services leverage transactional semantics to ensure 
that asynchronous messages exchanged between distributed components are <em>atomic</em>, <em>consistent</em>, <em>isolated</em>, and <em>durable</em>.
 These four properties are called the “ACID properties.” The most common
 realization of the transactions tactic is “two-phase commit” (a.k.a. 
2PC) protocol. This tactic prevents race conditions caused by two 
processes attempting to update the same data item.</p>
<p class="indenthangingB">• <em>Predictive model</em>. A predictive 
model, when combined with a monitor, is employed to monitor the state of
 health of a system process to ensure that the system is operating 
within its nominal operating parameters, and to take corrective action 
when conditions are detected that are predictive of likely future 
faults. The operational performance metrics monitored are used to 
predict the onset of faults; examples include session establishment rate
 (in an HTTP server), threshold crossing (monitoring high and low water 
marks for some constrained, shared resource), or maintaining statistics 
for process state (in service, out of service, under maintenance, idle),
 message queue length statistics, and so on.</p>
<p class="indenthangingB">• <em>Exception prevention.</em> This tactic 
refers to techniques employed for the purpose of preventing system 
exceptions from occurring. The use of exception classes, which allows a 
system to transparently recover from system exceptions, was discussed 
previously. Other examples of exception prevention include abstract data
 types, such as smart pointers, and the use of wrappers to prevent 
faults, such as dangling pointers and semaphore access violations from 
occurring. Smart pointers prevent exceptions by doing bounds checking on
 pointers, and by ensuring that resources are automatically deallocated 
when no data refers to it. In this way resource leaks are avoided.</p>
<p class="indenthangingB">• <em>Increase competence set.</em> A 
program’s competence set is the set of states in which it is “competent”
 to operate. For example, the state when the denominator is zero is 
outside the competence set of most divide programs. When a component 
raises an exception, it is signaling that it has discovered itself to be
 outside its competence set; in essence, it doesn’t know what to do and 
is throwing in the towel. Increasing a component’s competence set means 
designing it to handle more cases—faults—as part of its normal 
operation. For example, a component that assumes it has access to a 
shared resource might throw an exception if it discovers that access is 
blocked. Another component might simply wait for access, or return 
immediately with an indication that it will complete its operation on 
its own the next time it does have access. In this example, the second 
component has a larger competence set than the first.</p>
<h3 id="ch05lev1sec3"><a id="page_96"></a>5.3. A Design Checklist for Availability</h3>
<p class="noindent"><a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch05.html#ch05tab04">Table 5.4</a> is a checklist to support the design and analysis process for availability.</p>
<p class="tab-caption"><a id="ch05tab04"></a>Table 5.4. Checklist to Support the Design and Analysis Process for Availability</p>
<div class="image"><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/05tab04.jpg" src="5.%20Availability_files/05tab04.jpg" alt="Image" height="574" width="630"></div>
<div class="image"><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/05tab04a.jpg" src="5.%20Availability_files/05tab04a.jpg" alt="Image" height="559" width="630"></div>
<div class="image"><a id="page_97"></a><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/05tab04b.jpg" src="5.%20Availability_files/05tab04b.jpg" alt="Image" height="523" width="630"></div>
<div class="image"><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/05tab04c.jpg" src="5.%20Availability_files/05tab04c.jpg" alt="Image" height="487" width="630"></div>
<h3 id="ch05lev1sec4"><a id="page_98"></a>5.4. Summary</h3>
<p class="noindent">Availability refers to the ability of the system to 
be available for use, especially after a fault occurs. The fault must be
 recognized (or prevented) and then the system must respond in some 
fashion. The response desired will depend on the criticality of the 
application and the type of fault and can range from “ignore it” to 
“keep on going as if it didn’t occur.”</p>
<p class="indent">Tactics for availability are categorized into detect 
faults, recover from faults and prevent faults. Detection tactics 
depend, essentially, on detecting signs of life from various components.
 Recovery tactics are some combination of retrying an operation or 
maintaining redundant data or computations. Prevention tactics depend 
either on removing elements from service or utilizing mechanisms to 
limit the scope of faults.</p>
<p class="indent"><a id="page_99"></a>All of the availability tactics 
involve the coordination model because the coordination model must be 
aware of faults that occur to generate an appropriate response.</p>
<h3 id="ch05lev1sec5">5.5. For Further Reading</h3>
<p class="noindent">Patterns for availability:</p>
<p class="indenthangingB">• You can find patterns for fault tolerance in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_084">[Hanmer 07]</a>.</p>
<p class="noindent">Tactics for availability, overall:</p>
<p class="indenthangingB">• A more detailed discussion of some of the availability tactics in this chapter is given in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_171">[Scott 09]</a>. This is the source of much of the material in this chapter.</p>
<p class="indenthangingB">• The Internet Engineering Task Force has 
promulgated a number of standards supporting availability tactics. These
 standards include non-stop forwarding <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_094">[IETF 04]</a>, ping/echo ICMPv6 <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_097">[IETF 06b]</a>, echo request/response), and MPLS (LSP Ping) networks <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_096">[IETF 06a]</a>.</p>
<p class="noindent">Tactics for availability, fault detection:</p>
<p class="indenthangingB">• The parameter fence tactic was first used (to our knowledge) in the Control Data Series computers of the late 1960s.</p>
<p class="indenthangingB">• Triple modular redundancy (TMR), part of the voting tactic, was developed in the early 1960s by Lyons <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_129">[Lyons 62]</a>.</p>
<p class="indenthangingB">• The fault detection tactic of voting is 
based on the fundamental contributions to automata theory by Von 
Neumann, who demonstrated how systems having a prescribed reliability 
could be built from unreliable components <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_196">[Von Neumann 56]</a>.</p>
<p class="noindent">Tactics for availability, fault recovery:</p>
<p class="indenthangingB">• Standards-based realizations of active 
redundancy exist for protecting network links (i.e., facilities) at both
 the physical layer [<a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_018">Bellcore 99</a>, <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_185">Telcordia 00</a>] and the network/link layer <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_095">[IETF 05]</a>.</p>
<p class="indenthangingB">• Exception handlinghas been written about by <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_163">[Powel Douglass 99]</a>.
 Software can then use this information to mask the fault, usually by 
correcting the cause of the exception and retrying the operation.</p>
<p class="indenthangingB">• <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_139">[Morelos-Zaragoza 06]</a> and <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_168">[Schneier 96]</a> have written about the comparison of state during resynchronization.</p>
<p class="indenthangingB">• Some examples of how a system can degrade through use (degradation) are given in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_149">[Nygard 07]</a>.</p>
<p class="indenthangingB">• <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_187">[Utas 05]</a> has written about escalating restart.</p>
<p class="indenthangingB"><a id="page_100"></a>• Mountains of papers have been written about parameter typing, but <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_187">[Utas 05]</a> writes about it in the context of availability (as opposed to bug prevention, its usual context).</p>
<p class="indenthangingB">• Hardware engineers often use 
preparation-and-repair tactics. Examples include error detection and 
correction (EDAC) coding, forward error correction (FEC), and temporal 
redundancy. EDAC coding is typically used to protect control memory 
structures in high-availability distributed real-time embedded systems <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_083">[Hamming 80]</a>.
 Conversely, FEC coding is typically employed to recover from 
physical-layer errors occurring on external network links 
Morelos-Zaragoza 06]. Temporal redundancy involves sampling spatially 
redundant clock or data lines at time intervals that exceed the pulse 
width of any transient pulse to be tolerated, and then voting out any 
defects detected <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_134">[Mavis 02]</a>.</p>
<p class="noindent">Tactics for availability, fault prevention:</p>
<p class="indenthangingB">• Parnas and Madey have written about increasing an element’s competence set <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_158">[Parnas 95]</a>.</p>
<p class="indenthangingB">• The ACID properties, important in the transactions tactic, were introduced by Gray in the 1970s and discussed in depth in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_080">[Gray 93]</a>.</p>
<p class="noindent">Analysis:</p>
<p class="indenthangingB">• Fault tree analysis dates from the early 
1960s, but the granddaddy of resources for it is the U.S. Nuclear 
Regulatory Commission’s “Fault Tree Handbook,” published in 1981 <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_192">[Vesely 81]</a>. NASA’s 2002 “Fault Tree Handbook with Aerospace Applications” <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_193">[Vesely 02]</a>
 is an updated comprehensive primer of the NRC handbook, and the source 
for the notation used in this chapter. Both are available online as 
downloadable PDF files.</p>
<h3 id="ch05lev1sec6">5.6. Discussion Questions</h3>
<p class="question"><strong>1.</strong> Write a set of concrete scenarios for availability using each of the possible responses in the general scenario.</p>
<p class="question"><strong>2.</strong> Write a concrete availability scenario for the software for a (hypothetical) pilotless passenger aircraft.</p>
<p class="question"><strong>3.</strong> Write a concrete availability scenario for a program like Microsoft Word.</p>
<p class="question"><strong>4.</strong> Redundancy is often cited as a 
key strategy for achieving high availability. Look at the tactics 
presented in this chapter and decide how many of them exploit some form 
of redundancy and how many do not.</p>
<p class="question"><strong>5.</strong> How does availability trade off 
against modifiability? How would you make a change to a system that is 
required to have “24/7” availability (no scheduled or unscheduled 
downtime, ever)?</p>
<p class="question"><a id="page_101"></a><strong>6.</strong> Create a 
fault tree for an automatic teller machine. Include faults dealing with 
hardware component failure, communications failure, software failure, 
running out of supplies, user errors, and security attacks. How would 
you modify your automatic teller machine design to accommodate these 
faults?</p>
<p class="question"><strong>7.</strong> Consider the fault detection 
tactics (ping/echo, heartbeat, system monitor, voting, and exception 
detection). What are the performance implications of using these 
tactics?</p>
<div class="annotator-outer annotator-viewer annotator-hide viewer">
  <ul class="annotator-widget annotator-listing"></ul>
</div><div class="annotator-editor-wrapper"><div class="annotator-outer annotator-editor annotator-hide">
  <h3 class="title">Highlight</h3><form class="annotator-widget">
    <ul class="annotator-listing"><li class="annotator-item"><textarea maxlength="750" placeholder="Add a note (optional)" id="annotator-field-16"></textarea></li></ul>
    <div class="annotator-controls">
      <a href="#cancel" class="annotator-cancel button">Cancel</a>
<a href="#save" class="annotator-save annotator-focus button positive">Save</a>
    </div>
  </form>
</div></div><div style="display: none;" class="annotator-adder"><button><span></span></button></div></div></div>



  <div class="t-sbo-prev sbo-prev sbo-nav-bottom">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch04.html" class="prev nav-link">
      
          <span aria-hidden="true" class="pagination-label t-prev-label">Prev</span>
          <span class="visuallyhidden">Previous Chapter</span>
          <div class="pagination-title t-prev-title">4. Understanding Quality Attributes</div>
        </a>
    
  
  </div>

  <div class="t-sbo-next sbo-next sbo-nav-bottom">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch06.html" class="next nav-link">
      
          <span aria-hidden="true" class="pagination-label t-next-label">Next</span>
          <span class="visuallyhidden">Next Chapter</span>
          <div class="pagination-title t-next-title">6. Interoperability</div>
        </a>
    
  
  </div>

</section>
    <div class="reading-controls-bottom">
      <ul class="interface-controls js-bitlist">
        <li class="queue-control">
            <button title="Add to Queue" aria-label="Add to Queue" data-for-analytics="9780132942799:ch05.html" type="button" class="rec-fav ss-queue js-queue js-current-chapter-queue" data-queue-endpoint="/api/v1/book/9780132942799/chapter/ch05.html">
      <span>Add to Queue</span>
  </button>
        </li>
      </ul>
    </div>
  </div>
  <div class="js-related-container related"></div>
<section class="sbo-saved-archives"></section>



          
          
  





    
    
      <div id="js-subscribe-nag" class="subscribe-nag clearfix trial-panel  collapsed slideUp">
        <a href="#" class="js-toggle-nag ss-navigateup" title="Toggle open or close footer"></a>
        <div class="sample-message">
          <p class="usage-data t-collapsed-text">Enjoy Safari? 
            <a href="https://www.safaribooksonline.com/subscribe/">
              Subscribe Today
              
            </a>
          </p>
          

        <div class="expanded">
          <h2>You have 10 days left in your trial, Aejunknaja. </h2>
          <p class="t-expanded-text">Safari is your trusted guide for building a remarkable career. We hope you've been enjoying your trial—ready to join?</p>
          <a href="https://www.safaribooksonline.com/subscribe/" class="bigbutton positive">
            Subscribe Today
            
          </a>
          
            <footer style="padding-bottom: 69.2px;" class="pagefoot js-pagefoot">
    <div class="wrapper">
      <a href="https://www.safaribooksonline.com/" id="logo">Safari</a>
      <nav>
        <a href="https://www.safaribooksonline.com/public/support" class="full-support">Support</a> /
        <a href="https://www.safaribooksonline.com/contact/">Contact Us</a> /
        <a href="https://www.safaribooksonline.com/blog/">Blog</a>
      </nav>
      <div id="legal">
        <ul>
          <li>© 2016 <a class="copyright" href="https://www.safaribooksonline.com/">Safari</a> <br class="mobile-support"> <a href="https://www.safaribooksonline.com/terms/">Terms of Service</a> </li>
          <li><a href="https://www.safaribooksonline.com/membership-agreement/">Membership Agreement</a></li>
          <li><a href="https://www.safaribooksonline.com/privacy/">Privacy Policy</a></li>
        </ul>
      </div>
    </div>
  </footer>

        </div>
      </div>
    </div>

    
    



        
      </div>
      



  <footer style="padding-bottom: 69.2px;" class="pagefoot t-pagefoot">
    <a style="display: none;" href="#" class="icon-up"><div class="visuallyhidden">Back to top</div></a>
    <ul class="js-footer-nav">
      
        <li><a class="t-recommendations-footer" href="https://www.safaribooksonline.com/r/">Recommended</a></li>
      
      <li><a class="t-queue-footer" href="https://www.safaribooksonline.com/s/">Queue</a></li>
      
        <li><a class="t-recent-footer" href="https://www.safaribooksonline.com/recent/">Recent</a></li>
        <li><a class="t-topics-footer" href="https://www.safaribooksonline.com/topics?q=*&amp;limit=21">Topics</a></li>
      
      
        <li><a class="t-tutorials-footer" href="https://www.safaribooksonline.com/tutorials/">Tutorials</a></li>
      
      <li><a class="t-settings-footer js-settings" href="https://www.safaribooksonline.com/u/">Settings</a></li>
      <li><a href="https://www.safaribooksonline.com/blog/">Blog</a></li>
      <li class="full-support"><a href="https://www.safaribooksonline.com/public/support">Support</a></li>
      <li><a href="https://community.safaribooksonline.com/">Feedback</a></li>
      <li><a href="https://www.safaribooksonline.com/accounts/logout/">Sign Out</a></li>
    </ul>
    <span class="copyright">© 2016 <a href="https://www.safaribooksonline.com/" target="_blank">Safari</a>.</span>
    <br class="mobile-support">
    <a href="https://www.safaribooksonline.com/terms/">Terms of Service</a> /
    <a href="https://www.safaribooksonline.com/privacy/">Privacy Policy</a>
  </footer>

<script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"applicationTime":79,"agent":"js-agent.newrelic.com/nr-768.min.js","applicationID":"3275661","licenseKey":"510f1a6865","queueTime":0,"beacon":"bam.nr-data.net","transactionName":"YgdaZ0NSW0cEB0RdWltNfkZfUEFdCgofXFBHDVYdR1pQQxZeRl1QQj1aWkU=","errorBeacon":"bam.nr-data.net"}</script>


    

    <script src="5.%20Availability_files/a" charset="utf-8"></script>
    <script src="5.%20Availability_files/a_002" charset="utf-8"></script>
    
      <script src="5.%20Availability_files/require.js"></script>
      <script>
        require(["/static/js/pages/_config.1113c6153f5e.js"], function (common) {
          require(["/static/js/nest/_init.1198db94d0a6.js"]);
        });
      </script>
    
    
  
  
  
  <script> // <![CDATA[
    var g = {
      position_cache: {
        
          "chapter": "/api/v1/book/9780132942799/chapter/copyright.html",
          "book_id": "9780132942799",
          "chapter_uri": "copyright.html",
          "position": 0,
          "user_uuid": "10f9e41b-1414-4ac1-bc80-973364aac808",
          "next_chapter_uri": "/library/view/software-architecture-in/9780132942799/pref01.html"
        
      },
      title: "Software Architecture in Practice, Third Edition",
      author_list: "Rick Kazman, Paul Clements, Len Bass",
      format: "book",
      source: "application/epub+zip",
      is_system_book: true,
      is_public: false,
      loaded_from_server: true,
      allow_scripts: false,
      has_mathml: false
    };
    // ]]>
  </script>
  
  


  
  <script>
    
      
        

        
          
            window.PUBLIC_ANNOTATIONS = true;
          
        

      

      
        window.MOBILE_PUBLIC_ANNOTATIONS = false;
      

    

  </script>

  
    
  


    
    


  

<div class="annotator-notice"></div><div style="top: 200px; left: 1450px;" class="font-flyout"><div class="font-controls-panel">
	<div class="nightmodes">
		<ul>
			<li class="day"><a href="#" id="day-mode" title="Day Mode">
				<i class="fa fa-sun-o"></i>
				<span>Day Mode</span></a></li>
			<li class="cloudy"><a href="#" id="cloudy-mode" title="Cloudy Mode">
				<i class="fa fa-cloud"></i>
				<span>Cloud Mode</span>
			</a></li>
			<li class="night"><a href="#" id="night-mode" title="Night Mode">
				<i class="fa fa-moon-o"></i>
				<span>Night Mode</span>
			</a></li>
		</ul>
	</div>

	<div class="font-resizer resizer">
		<div class="draggable-containment-wrapper">
			<i class="fa fa-font left"></i>
			<span style="width: 50%;" class="filler"></span>
			<div style="position: relative; left: 80px;" id="js-font-size-draggable" class="draggable ui-widget-content ui-draggable ui-draggable-handle"></div>
			<i class="fa fa-font right"></i>
		</div>
	</div>

	<div class="column-resizer resizer">
		<div class="draggable-containment-wrapper">
			<i class="fa fa-compress left"></i>
			<span style="width: 50%;" class="filler"></span>
			<div style="position: relative; left: 80px;" id="js-column-size-draggable" class="draggable ui-widget-content ui-draggable ui-draggable-handle"></div>
			<i class="fa fa-expand right"></i>
		</div>
	</div>

	<a id="reset" class="button" href="#">Reset</a>
</div>
</div></body></html>