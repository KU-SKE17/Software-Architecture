<!--[if IE]><![endif]-->
<!DOCTYPE html>
<!--[if IE 8]><html class="no-js ie8 oldie" lang="en" prefix="og: http://ogp.me/ns/# og:book: http://ogp.me/ns/book# og:video: http://ogp.me/ns/video#"

    
        itemscope itemtype="http://schema.org/Book http://schema.org/ItemPage"" data-login-url="/accounts/login/"
data-offline-url="/"
data-url="/library/view/software-architecture-in/9780132942799/ch10.html"
data-csrf-cookie="csrfsafari"
data-highlight-privacy=""


  data-user-id="640574"
  data-user-uuid="10f9e41b-1414-4ac1-bc80-973364aac808"
  data-username="aejunknaja"
  data-account-type="Trial"
  
  data-activated-trial-date="01/12/2016"
  


  data-archive="9780132942799"
  data-publishers="Addison-Wesley Professional"



  data-htmlfile-name="ch10.html"
  data-epub-title="Software Architecture in Practice, Third Edition" data-debug=0 data-testing=0><![endif]-->
<!--[if gt IE 8]><!-->
<html style="" class=" js flexbox flexboxlegacy no-touch no-websqldatabase indexeddb history csscolumns csstransforms localstorage sessionstorage applicationcache svg inlinesvg no-zoom" prefix="og: http://ogp.me/ns/# og:book: http://ogp.me/ns/book# og:video: http://ogp.me/ns/video#" itemscope="" itemtype="http://schema.org/Book http://schema.org/ItemPage" "="" data-login-url="/accounts/login/" data-offline-url="/" data-url="/library/view/software-architecture-in/9780132942799/ch10.html" data-csrf-cookie="csrfsafari" data-highlight-privacy="" data-user-id="640574" data-user-uuid="10f9e41b-1414-4ac1-bc80-973364aac808" data-username="aejunknaja" data-account-type="Trial" data-activated-trial-date="01/12/2016" data-archive="9780132942799" data-publishers="Addison-Wesley Professional" data-htmlfile-name="ch10.html" data-epub-title="Software Architecture in Practice, Third Edition" data-debug="0" data-testing="0" lang="en"><!--<![endif]--><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta charset="utf-8"><meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"><meta name="author" content="Safari Books Online"><meta name="format-detection" content="telephone=no"><meta http-equiv="cleartype" content="on"><meta name="HandheldFriendly" content="True"><meta name="MobileOptimized" content="320"><meta name="apple-itunes-app" content="app-id=881697395, app-argument=safaridetail://9780132942799"><meta name="viewport" content="width=device-width, minimum-scale=1.0, initial-scale=1.0, maximum-scale=1.0"><meta property="twitter:account_id" content="4503599627559754"><script src="26.%20Architecture%20in%20the%20Cloud_files/510f1a6865" type="text/javascript"></script><script src="26.%20Architecture%20in%20the%20Cloud_files/nr-768.js"></script><script src="26.%20Architecture%20in%20the%20Cloud_files/linkid.js" async="" type="text/javascript"></script><script src="26.%20Architecture%20in%20the%20Cloud_files/analytics.js" async=""></script><script type="text/javascript">(window.NREUM||(NREUM={})).loader_config={xpid:"VQQDUVVVGwACU1RUAQA="};window.NREUM||(NREUM={}),__nr_require=function(t,e,n){function r(n){if(!e[n]){var o=e[n]={exports:{}};t[n][0].call(o.exports,function(e){var o=t[n][1][e];return r(o||e)},o,o.exports)}return e[n].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<n.length;o++)r(n[o]);return r}({QJf3ax:[function(t,e){function n(t){function e(e,n,a){t&&t(e,n,a),a||(a={});for(var c=s(e),f=c.length,u=i(a,o,r),d=0;f>d;d++)c[d].apply(u,n);return u}function a(t,e){f[t]=s(t).concat(e)}function s(t){return f[t]||[]}function c(){return n(e)}var f={};return{on:a,emit:e,create:c,listeners:s,_events:f}}function r(){return{}}var o="nr@context",i=t("gos");e.exports=n()},{gos:"7eSDFh"}],ee:[function(t,e){e.exports=t("QJf3ax")},{}],3:[function(t){function e(t){try{i.console&&console.log(t)}catch(e){}}var n,r=t("ee"),o=t(1),i={};try{n=localStorage.getItem("__nr_flags").split(","),console&&"function"==typeof console.log&&(i.console=!0,-1!==n.indexOf("dev")&&(i.dev=!0),-1!==n.indexOf("nr_dev")&&(i.nrDev=!0))}catch(a){}i.nrDev&&r.on("internal-error",function(t){e(t.stack)}),i.dev&&r.on("fn-err",function(t,n,r){e(r.stack)}),i.dev&&(e("NR AGENT IN DEVELOPMENT MODE"),e("flags: "+o(i,function(t){return t}).join(", ")))},{1:24,ee:"QJf3ax"}],4:[function(t){function e(t,e,n,i,s){try{c?c-=1:r("err",[s||new UncaughtException(t,e,n)])}catch(f){try{r("ierr",[f,(new Date).getTime(),!0])}catch(u){}}return"function"==typeof a?a.apply(this,o(arguments)):!1}function UncaughtException(t,e,n){this.message=t||"Uncaught error with no additional information",this.sourceURL=e,this.line=n}function n(t){r("err",[t,(new Date).getTime()])}var r=t("handle"),o=t(6),i=t("ee"),a=window.onerror,s=!1,c=0;t("loader").features.err=!0,t(5),window.onerror=e;try{throw new Error}catch(f){"stack"in f&&(t(1),t(2),"addEventListener"in window&&t(3),window.XMLHttpRequest&&XMLHttpRequest.prototype&&XMLHttpRequest.prototype.addEventListener&&window.XMLHttpRequest&&XMLHttpRequest.prototype&&XMLHttpRequest.prototype.addEventListener&&!/CriOS/.test(navigator.userAgent)&&t(4),s=!0)}i.on("fn-start",function(){s&&(c+=1)}),i.on("fn-err",function(t,e,r){s&&(this.thrown=!0,n(r))}),i.on("fn-end",function(){s&&!this.thrown&&c>0&&(c-=1)}),i.on("internal-error",function(t){r("ierr",[t,(new Date).getTime(),!0])})},{1:11,2:10,3:8,4:12,5:3,6:25,ee:"QJf3ax",handle:"D5DuLP",loader:"G9z0Bl"}],5:[function(t){if(window.addEventListener){var e=t("handle"),n=t("ee");t(1),window.addEventListener("click",function(){e("inc",["ck"])},!1),window.addEventListener("hashchange",function(){e("inc",["hc"])},!1),n.on("pushState-start",function(){e("inc",["ps"])})}},{1:9,ee:"QJf3ax",handle:"D5DuLP"}],6:[function(t){t("loader").features.ins=!0},{loader:"G9z0Bl"}],7:[function(t){function e(){}if(window.performance&&window.performance.timing&&window.performance.getEntriesByType){var n=t("ee"),r=t("handle"),o=t(1),i=t(2);t("loader").features.stn=!0,t(3);var a=Event;n.on("fn-start",function(t){var e=t[0];e instanceof a&&(this.bstStart=Date.now())}),n.on("fn-end",function(t,e){var n=t[0];n instanceof a&&r("bst",[n,e,this.bstStart,Date.now()])}),o.on("fn-start",function(t,e,n){this.bstStart=Date.now(),this.bstType=n}),o.on("fn-end",function(t,e){r("bstTimer",[e,this.bstStart,Date.now(),this.bstType])}),i.on("fn-start",function(){this.bstStart=Date.now()}),i.on("fn-end",function(t,e){r("bstTimer",[e,this.bstStart,Date.now(),"requestAnimationFrame"])}),n.on("pushState-start",function(){this.time=Date.now(),this.startPath=location.pathname+location.hash}),n.on("pushState-end",function(){r("bstHist",[location.pathname+location.hash,this.startPath,this.time])}),"addEventListener"in window.performance&&(window.performance.addEventListener("webkitresourcetimingbufferfull",function(){r("bstResource",[window.performance.getEntriesByType("resource")]),window.performance.webkitClearResourceTimings()},!1),window.performance.addEventListener("resourcetimingbufferfull",function(){r("bstResource",[window.performance.getEntriesByType("resource")]),window.performance.clearResourceTimings()},!1)),document.addEventListener("scroll",e,!1),document.addEventListener("keypress",e,!1),document.addEventListener("click",e,!1)}},{1:11,2:10,3:9,ee:"QJf3ax",handle:"D5DuLP",loader:"G9z0Bl"}],8:[function(t,e){function n(t){i.inPlace(t,["addEventListener","removeEventListener"],"-",r)}function r(t){return t[1]}var o=t("ee").create(),i=t(1)(o),a=t("gos");if(e.exports=o,n(window),"getPrototypeOf"in Object){for(var s=document;s&&!s.hasOwnProperty("addEventListener");)s=Object.getPrototypeOf(s);s&&n(s);for(var c=XMLHttpRequest.prototype;c&&!c.hasOwnProperty("addEventListener");)c=Object.getPrototypeOf(c);c&&n(c)}else XMLHttpRequest.prototype.hasOwnProperty("addEventListener")&&n(XMLHttpRequest.prototype);o.on("addEventListener-start",function(t,e){function n(){return s}if(t[1]){var r=t[1];if("function"==typeof r){var s=a(r,"nr@wrapped",function(){return i(r,"fn-",n,r.name||"anonymous")});this.wrapped=t[1]=s,o.emit("initEventContext",[t,e],this.wrapped)}else"function"==typeof r.handleEvent&&i.inPlace(r,["handleEvent"],"fn-")}}),o.on("removeEventListener-start",function(t){var e=this.wrapped;e&&(t[1]=e)})},{1:26,ee:"QJf3ax",gos:"7eSDFh"}],9:[function(t,e){var n=t("ee").create(),r=t(1)(n);e.exports=n,r.inPlace(window.history,["pushState","replaceState"],"-")},{1:26,ee:"QJf3ax"}],10:[function(t,e){var n=t("ee").create(),r=t(1)(n);e.exports=n,r.inPlace(window,["requestAnimationFrame","mozRequestAnimationFrame","webkitRequestAnimationFrame","msRequestAnimationFrame"],"raf-"),n.on("raf-start",function(t){t[0]=r(t[0],"fn-")})},{1:26,ee:"QJf3ax"}],11:[function(t,e){function n(t,e,n){t[0]=i(t[0],"fn-",null,n)}function r(t,e,n){function r(){return a}this.ctx={};var a={"nr@context":this.ctx};o.emit("initTimerContext",[t,n],a),t[0]=i(t[0],"fn-",r,n)}var o=t("ee").create(),i=t(1)(o);e.exports=o,i.inPlace(window,["setTimeout","setImmediate"],"setTimer-"),i.inPlace(window,["setInterval"],"setInterval-"),i.inPlace(window,["clearTimeout","clearImmediate"],"clearTimeout-"),o.on("setInterval-start",n),o.on("setTimer-start",r)},{1:26,ee:"QJf3ax"}],12:[function(t,e){function n(){f.inPlace(this,p,"fn-",o)}function r(t,e){f.inPlace(e,["onreadystatechange"],"fn-")}function o(t,e){return e}function i(t,e){for(var n in t)e[n]=t[n];return e}var a=t("ee").create(),s=t(1),c=t(2),f=c(a),u=c(s),d=window.XMLHttpRequest,p=["onload","onerror","onabort","onloadstart","onloadend","onprogress","ontimeout"];e.exports=a,window.XMLHttpRequest=function(t){var e=new d(t);try{a.emit("new-xhr",[],e),e.hasOwnProperty("addEventListener")&&u.inPlace(e,["addEventListener","removeEventListener"],"-",o),e.addEventListener("readystatechange",n,!1)}catch(r){try{a.emit("internal-error",[r])}catch(i){}}return e},i(d,XMLHttpRequest),XMLHttpRequest.prototype=d.prototype,f.inPlace(XMLHttpRequest.prototype,["open","send"],"-xhr-",o),a.on("send-xhr-start",r),a.on("open-xhr-start",r)},{1:8,2:26,ee:"QJf3ax"}],13:[function(t){function e(t){var e=this.params,r=this.metrics;if(!this.ended){this.ended=!0;for(var i=0;c>i;i++)t.removeEventListener(s[i],this.listener,!1);if(!e.aborted){if(r.duration=(new Date).getTime()-this.startTime,4===t.readyState){e.status=t.status;var a=t.responseType,f="arraybuffer"===a||"blob"===a||"json"===a?t.response:t.responseText,u=n(f);if(u&&(r.rxSize=u),this.sameOrigin){var d=t.getResponseHeader("X-NewRelic-App-Data");d&&(e.cat=d.split(", ").pop())}}else e.status=0;r.cbTime=this.cbTime,o("xhr",[e,r,this.startTime])}}}function n(t){if("string"==typeof t&&t.length)return t.length;if("object"!=typeof t)return void 0;if("undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer&&t.byteLength)return t.byteLength;if("undefined"!=typeof Blob&&t instanceof Blob&&t.size)return t.size;if("undefined"!=typeof FormData&&t instanceof FormData)return void 0;try{return JSON.stringify(t).length}catch(e){return void 0}}function r(t,e){var n=i(e),r=t.params;r.host=n.hostname+":"+n.port,r.pathname=n.pathname,t.sameOrigin=n.sameOrigin}if(window.XMLHttpRequest&&XMLHttpRequest.prototype&&XMLHttpRequest.prototype.addEventListener&&!/CriOS/.test(navigator.userAgent)){t("loader").features.xhr=!0;var o=t("handle"),i=t(2),a=t("ee"),s=["load","error","abort","timeout"],c=s.length,f=t(1),u=window.XMLHttpRequest;t(4),t(3),a.on("new-xhr",function(){this.totalCbs=0,this.called=0,this.cbTime=0,this.end=e,this.ended=!1,this.xhrGuids={}}),a.on("open-xhr-start",function(t){this.params={method:t[0]},r(this,t[1]),this.metrics={}}),a.on("open-xhr-end",function(t,e){"loader_config"in NREUM&&"xpid"in NREUM.loader_config&&this.sameOrigin&&e.setRequestHeader("X-NewRelic-ID",NREUM.loader_config.xpid)}),a.on("send-xhr-start",function(t,e){var r=this.metrics,o=t[0],i=this;if(r&&o){var f=n(o);f&&(r.txSize=f)}this.startTime=(new Date).getTime(),this.listener=function(t){try{"abort"===t.type&&(i.params.aborted=!0),("load"!==t.type||i.called===i.totalCbs&&(i.onloadCalled||"function"!=typeof e.onload))&&i.end(e)}catch(n){try{a.emit("internal-error",[n])}catch(r){}}};for(var u=0;c>u;u++)e.addEventListener(s[u],this.listener,!1)}),a.on("xhr-cb-time",function(t,e,n){this.cbTime+=t,e?this.onloadCalled=!0:this.called+=1,this.called!==this.totalCbs||!this.onloadCalled&&"function"==typeof n.onload||this.end(n)}),a.on("xhr-load-added",function(t,e){var n=""+f(t)+!!e;this.xhrGuids&&!this.xhrGuids[n]&&(this.xhrGuids[n]=!0,this.totalCbs+=1)}),a.on("xhr-load-removed",function(t,e){var n=""+f(t)+!!e;this.xhrGuids&&this.xhrGuids[n]&&(delete this.xhrGuids[n],this.totalCbs-=1)}),a.on("addEventListener-end",function(t,e){e instanceof u&&"load"===t[0]&&a.emit("xhr-load-added",[t[1],t[2]],e)}),a.on("removeEventListener-end",function(t,e){e instanceof u&&"load"===t[0]&&a.emit("xhr-load-removed",[t[1],t[2]],e)}),a.on("fn-start",function(t,e,n){e instanceof u&&("onload"===n&&(this.onload=!0),("load"===(t[0]&&t[0].type)||this.onload)&&(this.xhrCbStart=(new Date).getTime()))}),a.on("fn-end",function(t,e){this.xhrCbStart&&a.emit("xhr-cb-time",[(new Date).getTime()-this.xhrCbStart,this.onload,e],e)})}},{1:"XL7HBI",2:14,3:12,4:8,ee:"QJf3ax",handle:"D5DuLP",loader:"G9z0Bl"}],14:[function(t,e){e.exports=function(t){var e=document.createElement("a"),n=window.location,r={};e.href=t,r.port=e.port;var o=e.href.split("://");return!r.port&&o[1]&&(r.port=o[1].split("/")[0].split("@").pop().split(":")[1]),r.port&&"0"!==r.port||(r.port="https"===o[0]?"443":"80"),r.hostname=e.hostname||n.hostname,r.pathname=e.pathname,r.protocol=o[0],"/"!==r.pathname.charAt(0)&&(r.pathname="/"+r.pathname),r.sameOrigin=!e.hostname||e.hostname===document.domain&&e.port===n.port&&e.protocol===n.protocol,r}},{}],15:[function(t,e){function n(t){return function(){r(t,[(new Date).getTime()].concat(i(arguments)))}}var r=t("handle"),o=t(1),i=t(2);"undefined"==typeof window.newrelic&&(newrelic=window.NREUM);var a=["setPageViewName","addPageAction","setCustomAttribute","finished","addToTrace","inlineHit","noticeError"];o(a,function(t,e){window.NREUM[e]=n("api-"+e)}),e.exports=window.NREUM},{1:24,2:25,handle:"D5DuLP"}],gos:[function(t,e){e.exports=t("7eSDFh")},{}],"7eSDFh":[function(t,e){function n(t,e,n){if(r.call(t,e))return t[e];var o=n();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(t,e,{value:o,writable:!0,enumerable:!1}),o}catch(i){}return t[e]=o,o}var r=Object.prototype.hasOwnProperty;e.exports=n},{}],D5DuLP:[function(t,e){function n(t,e,n){return r.listeners(t).length?r.emit(t,e,n):void(r.q&&(r.q[t]||(r.q[t]=[]),r.q[t].push(e)))}var r=t("ee").create();e.exports=n,n.ee=r,r.q={}},{ee:"QJf3ax"}],handle:[function(t,e){e.exports=t("D5DuLP")},{}],XL7HBI:[function(t,e){function n(t){var e=typeof t;return!t||"object"!==e&&"function"!==e?-1:t===window?0:i(t,o,function(){return r++})}var r=1,o="nr@id",i=t("gos");e.exports=n},{gos:"7eSDFh"}],id:[function(t,e){e.exports=t("XL7HBI")},{}],G9z0Bl:[function(t,e){function n(){var t=p.info=NREUM.info,e=f.getElementsByTagName("script")[0];if(t&&t.licenseKey&&t.applicationID&&e){s(d,function(e,n){e in t||(t[e]=n)});var n="https"===u.split(":")[0]||t.sslForHttp;p.proto=n?"https://":"http://",a("mark",["onload",i()]);var r=f.createElement("script");r.src=p.proto+t.agent,e.parentNode.insertBefore(r,e)}}function r(){"complete"===f.readyState&&o()}function o(){a("mark",["domContent",i()])}function i(){return(new Date).getTime()}var a=t("handle"),s=t(1),c=window,f=c.document;t(2);var u=(""+location).split("?")[0],d={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-768.min.js"},p=e.exports={offset:i(),origin:u,features:{}};f.addEventListener?(f.addEventListener("DOMContentLoaded",o,!1),c.addEventListener("load",n,!1)):(f.attachEvent("onreadystatechange",r),c.attachEvent("onload",n)),a("mark",["firstbyte",i()])},{1:24,2:15,handle:"D5DuLP"}],loader:[function(t,e){e.exports=t("G9z0Bl")},{}],24:[function(t,e){function n(t,e){var n=[],o="",i=0;for(o in t)r.call(t,o)&&(n[i]=e(o,t[o]),i+=1);return n}var r=Object.prototype.hasOwnProperty;e.exports=n},{}],25:[function(t,e){function n(t,e,n){e||(e=0),"undefined"==typeof n&&(n=t?t.length:0);for(var r=-1,o=n-e||0,i=Array(0>o?0:o);++r<o;)i[r]=t[e+r];return i}e.exports=n},{}],26:[function(t,e){function n(t){return!(t&&"function"==typeof t&&t.apply&&!t[i])}var r=t("ee"),o=t(1),i="nr@original",a=Object.prototype.hasOwnProperty;e.exports=function(t){function e(t,e,r,a){function nrWrapper(){var n,i,s,f;try{i=this,n=o(arguments),s=r&&r(n,i)||{}}catch(d){u([d,"",[n,i,a],s])}c(e+"start",[n,i,a],s);try{return f=t.apply(i,n)}catch(p){throw c(e+"err",[n,i,p],s),p}finally{c(e+"end",[n,i,f],s)}}return n(t)?t:(e||(e=""),nrWrapper[i]=t,f(t,nrWrapper),nrWrapper)}function s(t,r,o,i){o||(o="");var a,s,c,f="-"===o.charAt(0);for(c=0;c<r.length;c++)s=r[c],a=t[s],n(a)||(t[s]=e(a,f?s+o:o,i,s))}function c(e,n,r){try{t.emit(e,n,r)}catch(o){u([o,e,n,r])}}function f(t,e){if(Object.defineProperty&&Object.keys)try{var n=Object.keys(t);return n.forEach(function(n){Object.defineProperty(e,n,{get:function(){return t[n]},set:function(e){return t[n]=e,e}})}),e}catch(r){u([r])}for(var o in t)a.call(t,o)&&(e[o]=t[o]);return e}function u(e){try{t.emit("internal-error",e)}catch(n){}}return t||(t=r),e.inPlace=s,e.flag=i,e}},{1:25,ee:"QJf3ax"}]},{},["G9z0Bl",4,13,7,6,5]);</script><link rel="apple-touch-icon" href="https://www.safaribooksonline.com/static/images/apple-touch-icon.dc4dcf1f75e0.png"><link rel="shortcut icon" href="https://www.safaribooksonline.com/favicon.ico" type="image/x-icon"><link href="26.%20Architecture%20in%20the%20Cloud_files/css.css" rel="stylesheet" type="text/css"><title>26. Architecture in the Cloud - Software Architecture in Practice, Third Edition</title><link rel="stylesheet" href="26.%20Architecture%20in%20the%20Cloud_files/e4f5174e8e7b.css" type="text/css"><link rel="stylesheet" type="text/css" href="26.%20Architecture%20in%20the%20Cloud_files/annotator.css"><link rel="stylesheet" href="26.%20Architecture%20in%20the%20Cloud_files/font-awesome.css"><style type="text/css" title="ibis-book">#sbo-rt-content div{margin-top:4pt;margin-bottom:4pt;margin-right:15pt}#sbo-rt-content h1{margin-top:15pt;margin-bottom:12pt;text-align:center;font-weight:bold}#sbo-rt-content h2{margin-top:7pt;margin-bottom:25pt;text-align:left;font-weight:bold}#sbo-rt-content h3{margin-top:9pt;margin-bottom:8pt;font-weight:bold;text-align:left}#sbo-rt-content h4{margin-top:9pt;margin-bottom:6pt;text-align:left;font-weight:bold}#sbo-rt-content h5{margin-top:9pt;margin-bottom:6pt;font-weight:bold;text-align:left}#sbo-rt-content h6{margin-top:9pt;margin-bottom:6pt;font-weight:bold;text-align:left}#sbo-rt-content .cover{margin-top:2pt;margin-bottom:2pt;text-align:center}#sbo-rt-content .author{margin-top:40pt;font-weight:bold;text-align:center}#sbo-rt-content div.image,#sbo-rt-content img{max-width:99%;max-height:99%}#sbo-rt-content .image{margin-bottom:5pt;text-align:center}#sbo-rt-content .toc-part{margin-top:25pt;margin-bottom:5pt;margin-left:10pt;text-align:left}#sbo-rt-content .toc-chapter{margin-top:10pt;margin-bottom:5pt;margin-left:25pt;text-align:left}#sbo-rt-content .toc-chapter1{margin-top:10pt;margin-bottom:5pt;margin-left:18pt;text-align:left}#sbo-rt-content .toc-section{margin-top:4pt;margin-bottom:4pt;margin-left:55pt;text-align:left}#sbo-rt-content .indexmain{margin-top:2pt;margin-bottom:2pt;text-align:left}#sbo-rt-content .indexmain1{margin-top:18pt;margin-bottom:2pt;text-align:left}#sbo-rt-content .indexsub{margin-top:2pt;margin-bottom:2pt;margin-left:35pt;text-indent:-15pt;text-align:left}#sbo-rt-content .copy{margin-top:8pt;margin-bottom:8pt;text-indent:.024pt}#sbo-rt-content .indent{margin-top:4pt;margin-bottom:5pt;text-indent:18pt;text-align:left}#sbo-rt-content .indenthangingB{margin-top:4pt;margin-bottom:4pt;margin-left:40pt;text-indent:-7pt;text-align:left}#sbo-rt-content .indenthangingBB{margin-top:4pt;margin-bottom:4pt;margin-left:58pt;text-indent:-6.5pt;text-align:left}#sbo-rt-content .indenthangingBBB{margin-top:4pt;margin-bottom:4pt;margin-left:80pt;text-indent:-6pt;text-align:left}#sbo-rt-content .indenthangingBP{margin-top:4pt;margin-bottom:4pt;margin-left:40pt;text-align:left}#sbo-rt-content .indenthangingBP1{margin-top:4pt;margin-bottom:4pt;margin-left:30pt;text-indent:15pt;text-align:left}#sbo-rt-content .tab-caption{font-weight:bold;margin-top:14pt;margin-bottom:8pt;text-align:center;page-break-after:avoid;page-break-inside:avoid}#sbo-rt-content .source{font-size:medium;margin-top:2pt;margin-bottom:2pt;page-break-before:avoid;page-break-inside:avoid;text-align:center}#sbo-rt-content .fig-caption{font-weight:bold;margin-top:4pt;margin-bottom:14pt;text-align:center;page-break-before:avoid;page-break-inside:avoid}#sbo-rt-content .fig-caption2{font-weight:bold;margin-top:4pt;margin-bottom:14pt;text-align:left;page-break-before:avoid;page-break-inside:avoid}#sbo-rt-content .blockquote{margin-top:7pt;margin-bottom:2pt;margin-left:60pt;text-align:left}#sbo-rt-content .attribution{margin-top:2pt;margin-bottom:17pt;margin-right:40pt;text-align:right}#sbo-rt-content .attribution1{margin-top:2pt;margin-bottom:17pt;margin-right:15pt;text-align:right}#sbo-rt-content .attri{margin-left:100pt;margin-right:100pt}#sbo-rt-content .toc-preface{margin-top:5pt;margin-bottom:5pt;margin-left:65pt;text-align:left}#sbo-rt-content .toc-appendix{margin-top:10pt;margin-bottom:5pt;margin-left:55pt;text-align:left}#sbo-rt-content .toc-index{margin-top:10pt;margin-bottom:5pt;margin-left:55pt;text-align:left}#sbo-rt-content .bib{margin-top:10pt;margin-bottom:5pt;margin-left:15pt;text-align:left}#sbo-rt-content .footnote{font-size:small;margin-top:4pt;margin-bottom:4pt;margin-left:20pt;text-indent:-11pt;text-align:left}#sbo-rt-content .pre{font-family:"Courier New";font-size:small;margin-top:5pt;margin-bottom:5pt;margin-left:13pt}#sbo-rt-content .pre1{font-family:"Courier New";font-size:small;margin-top:5pt;margin-bottom:5pt;margin-left:25pt}#sbo-rt-content .codelink{font-size:small;margin-top:6pt;margin-bottom:6pt;font-weight:bold;page-break-after:avoid}#sbo-rt-content .image1{text-align:center;page-break-before:always}#sbo-rt-content div.image1,#sbo-rt-content img{max-width:99%;max-height:99%}#sbo-rt-content code{font-size:small}#sbo-rt-content .edition{font-size:15pt;margin-top:15pt;margin-bottom:15pt;text-align:center;font-weight:bold}#sbo-rt-content .equation{text-align:center}#sbo-rt-content .indenthangingN{margin-top:4pt;margin-bottom:4pt;margin-left:50pt;text-indent:-12pt;text-align:left}#sbo-rt-content .indenthangingNaa{margin-top:4pt;margin-bottom:4pt;margin-left:48pt;text-indent:-11pt;text-align:left}#sbo-rt-content .indenthangingNP1{margin-top:4pt;margin-bottom:4pt;margin-left:30pt;text-align:left}#sbo-rt-content .indenthangingNP{margin-top:4pt;margin-bottom:4pt;margin-left:30pt;text-indent:15pt;text-align:left}#sbo-rt-content .indenthangingN1{margin-top:4pt;margin-bottom:4pt;margin-left:50pt;text-indent:-17.5pt;text-align:left}#sbo-rt-content .indenthangingNB{margin-top:4pt;margin-bottom:4pt;margin-left:75pt;text-indent:-7.5pt;text-align:left}#sbo-rt-content .noindent{margin-top:4pt;margin-bottom:4pt;text-indent:.02pt}#sbo-rt-content .publisher{margin-top:130pt;margin-bottom:2pt;text-align:center}#sbo-rt-content .publishertext{margin-top:6pt;margin-bottom:2pt;text-align:center}#sbo-rt-content .sidebar{font-size:medium;margin-top:6pt;margin-bottom:12pt;margin-left:24pt;margin-right:24pt}#sbo-rt-content .sb-noindent{margin-top:4pt;margin-bottom:4pt;text-indent:.02pt;margin-left:15pt;margin-right:15pt}#sbo-rt-content .sb-indent{margin-top:4pt;margin-bottom:5pt;text-indent:15pt;margin-left:15pt;margin-right:15pt}#sbo-rt-content .title{font-size:110%;margin-top:4pt;margin-bottom:4pt;font-weight:bold;margin-left:7pt;page-break-inside:avoid;page-break-after:avoid}#sbo-rt-content .question{margin-top:4pt;margin-bottom:4pt;margin-left:30pt;text-indent:-12pt;text-align:left}#sbo-rt-content .questiona{margin-top:4pt;margin-bottom:4pt;margin-left:70pt;text-indent:-11.5pt;text-align:left}#sbo-rt-content .questionP{margin-top:4pt;margin-bottom:4pt;margin-left:30pt;text-align:left}#sbo-rt-content .step{margin-top:4pt;margin-bottom:4pt;margin-left:65pt;text-indent:-38pt;text-align:left}#sbo-rt-content .division{font-size:100%;margin-top:4pt;margin-bottom:4pt;font-weight:bold;margin-left:10pt}#sbo-rt-content .question1{margin-top:4pt;margin-bottom:4pt;margin-left:29pt;text-indent:-18pt;text-align:left}#sbo-rt-content .copy1{margin-top:8pt;margin-bottom:8pt;margin-left:24pt;text-align:left;text-indent:.024pt}#sbo-rt-content .copy2{margin-top:8pt;margin-bottom:8pt;font-size:140%;text-align:left;text-indent:.024pt}#sbo-rt-content .copy3{margin-top:8pt;margin-bottom:8pt;font-size:130%;text-align:left;text-indent:.024pt}#sbo-rt-content .imagefir{text-align:center}</style><link rel="canonical" href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch10.html"><meta name="description" content="10. Testability Testing leads to failure, and failure leads to understanding —Burt Rutan Industry estimates indicate that between 30 and 50 percent (or in some cases, even more) of the ... "><meta property="og:title" content="10. Testability"><meta itemprop="isPartOf" content="/library/view/software-architecture-in/9780132942799/"><meta itemprop="name" content="10. Testability"><meta property="og:url" itemprop="url" content="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch10.html"><meta property="og:site_name" content="Safari"><meta property="og:image" itemprop="thumbnailUrl" content="https://www.safaribooksonline.com/library/cover/9780132942799/"><meta property="og:description" itemprop="description" content="10. Testability Testing leads to failure, and failure leads to understanding —Burt Rutan Industry estimates indicate that between 30 and 50 percent (or in some cases, even more) of the ... "><meta itemprop="inLanguage" content="en"><meta itemprop="publisher" content="Addison-Wesley Professional"><meta property="og:type" content="book"><meta property="og:book:isbn" itemprop="isbn" content="9780132942799"><meta property="og:book:author" itemprop="author" content="Rick Kazman"><meta property="og:book:author" itemprop="author" content="Paul Clements"><meta property="og:book:author" itemprop="author" content="Len Bass"><meta property="og:book:tag" itemprop="about" content="Core Programming"><meta name="twitter:card" content="summary"><meta name="twitter:site" content="@safari"><style type="text/css" id="font-styles" data-template="#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-size: &lt;%= font_size %&gt; !important; }"></style><style type="text/css" id="font-family" data-template="#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-family: &lt;%= font_family %&gt; !important; }"></style><style type="text/css" id="column-width" data-template="#sbo-rt-content { max-width: &lt;%= column_width %&gt;% !important; margin: 0 auto !important; }"></style><!--[if lt IE 9]><script src="/static/js/src/respond.min.fa78ffe6f7ba.js"></script><![endif]--><script type="text/javascript" src="26.%20Architecture%20in%20the%20Cloud_files/ecc99425e988.js" async=""></script><noscript><meta http-equiv="refresh" content="0; url=/library/no-js/" /></noscript><script type="text/javascript">
  (function(i,s,o,g,r,a,m) {
    i['GoogleAnalyticsObject']=r;
    i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();
    a=s.createElement(o),m=s.getElementsByTagName(o)[0];
    a.async=1;
    a.src=g;
    m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  var matches = document.cookie.match(/BrowserCookie\s*=\s*([a-f0-9\-]{36})/),
      user_uuid = null;

  if (matches && matches.length === 2) {
    user_uuid = matches[1];
  }


  ga('create', 'UA-39299553-7', {'userId': '10f9e41b-1414-4ac1-bc80-973364aac808' });


ga('set', 'dimension1', 'Trial');
ga('set', 'dimension6', user_uuid);


  ga('set', 'dimension2', '10f9e41b-1414-4ac1-bc80-973364aac808');
  




  //enable enhanced link tracking
  ga('require', 'linkid', 'linkid.js');

  // reading interface will track pageviews itself
  if (document.location.pathname.indexOf("/library/view") !== 0) {
    ga('send', 'pageview');
  }
</script><script src="26.%20Architecture%20in%20the%20Cloud_files/_config.js" data-requiremodule="/static/js/pages/_config.1113c6153f5e.js" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="26.%20Architecture%20in%20the%20Cloud_files/_init.js" data-requiremodule="/static/js/nest/_init.1198db94d0a6.js" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><style id="annotator-dynamic-style">.annotator-adder, .annotator-outer, .annotator-notice {
  z-index: 100019;
}
.annotator-filter {
  z-index: 100009;
}</style></head>


<body class="reading sidenav  js-show-related scalefonts subscribe-panel library nav-collapsed">

    
      <div class="hide working" role="status">
        <div class="working-image"></div>
      </div>
      <div class="sbo-site-nav">
        



<a href="#container" class="skip">Skip to content</a><header class="topbar t-topbar"><nav role="navigation" class="js-site-nav"><ul class="topnav"><li class="logo t-logo"><a href="https://www.safaribooksonline.com/home/" class="l0 safari js-keyboard-nav-home"><em>Safari</em></a></li><li><a href="https://www.safaribooksonline.com/r/" class="t-recommendations-nav l0 ss-picks None"><span>Recommended</span></a></li><li><a href="https://www.safaribooksonline.com/s/" class="t-queue-nav l0 ss-queue None"><span>Queue</span></a></li><li class="search"><a href="#" class="t-search-nav trigger ss-search l0" data-dropdown-selector=".searchbox"><span>Search</span></a></li><li class="usermenu dropdown"><a href="#" class="trigger l0 ss-navigatedown nav-dropdown"><span>Expand Nav</span></a><div class="drop-content"><ul><li><a href="https://www.safaribooksonline.com/recent/" class="t-recent-nav l1 ss-recent None">Recent</a></li><li><a href="https://www.safaribooksonline.com/topics" class="t-topics-link l1 ss-hexbase None">Topics</a></li><li><a href="https://www.safaribooksonline.com/tutorials/" class="l1 ss-toots t-tutorials-nav js-toggle-menu-item None"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20" version="1.1"><title>icon for tutorials
  </title><desc></desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M15.8 18.2C15.8 18.2 15.9 18.2 16 18.2 16.1 18.2 16.2 18.2 16.4 18.2 16.5 18.2 16.7 18.1 16.9 18 17 17.9 17.1 17.8 17.2 17.7 17.3 17.6 17.4 17.5 17.4 17.4 17.5 17.2 17.6 16.9 17.6 16.7 17.6 16.6 17.6 16.5 17.6 16.4 17.5 16.2 17.5 16.1 17.4 15.9 17.3 15.8 17.2 15.6 17 15.5 16.8 15.3 16.6 15.3 16.4 15.2 16.2 15.2 16 15.2 15.8 15.2 15.7 15.2 15.5 15.3 15.3 15.4 15.2 15.4 15.1 15.5 15 15.7 14.9 15.8 14.8 15.9 14.7 16 14.7 16.1 14.6 16.3 14.6 16.4 14.6 16.5 14.6 16.6 14.6 16.6 14.6 16.7 14.6 16.9 14.6 17 14.6 17.1 14.7 17.3 14.7 17.4 14.8 17.6 15 17.7 15.1 17.9 15.2 18 15.3 18 15.5 18.1 15.5 18.1 15.6 18.2 15.7 18.2 15.7 18.2 15.7 18.2 15.8 18.2L15.8 18.2ZM9.4 11.5C9.5 11.5 9.5 11.5 9.6 11.5 9.7 11.5 9.9 11.5 10 11.5 10.2 11.5 10.3 11.4 10.5 11.3 10.6 11.2 10.8 11.1 10.9 11 10.9 10.9 11 10.8 11.1 10.7 11.2 10.5 11.2 10.2 11.2 10 11.2 9.9 11.2 9.8 11.2 9.7 11.2 9.5 11.1 9.4 11 9.2 10.9 9.1 10.8 8.9 10.6 8.8 10.5 8.7 10.3 8.6 10 8.5 9.9 8.5 9.7 8.5 9.5 8.5 9.3 8.5 9.1 8.6 9 8.7 8.8 8.7 8.7 8.8 8.6 9 8.5 9.1 8.4 9.2 8.4 9.3 8.2 9.5 8.2 9.8 8.2 10 8.2 10.1 8.2 10.2 8.2 10.3 8.2 10.5 8.3 10.6 8.4 10.7 8.5 10.9 8.6 11.1 8.7 11.2 8.9 11.3 9 11.4 9.1 11.4 9.2 11.4 9.3 11.5 9.3 11.5 9.3 11.5 9.4 11.5 9.4 11.5L9.4 11.5ZM3 4.8C3.1 4.8 3.1 4.8 3.2 4.8 3.4 4.8 3.5 4.8 3.7 4.8 3.8 4.8 4 4.7 4.1 4.6 4.3 4.5 4.4 4.4 4.5 4.3 4.6 4.2 4.6 4.1 4.7 4 4.8 3.8 4.8 3.5 4.8 3.3 4.8 3.1 4.8 3 4.8 2.9 4.7 2.8 4.7 2.6 4.6 2.5 4.5 2.3 4.4 2.2 4.2 2.1 4 1.9 3.8 1.9 3.6 1.8 3.5 1.8 3.3 1.8 3.1 1.8 2.9 1.8 2.7 1.9 2.6 2 2.4 2.1 2.3 2.2 2.2 2.3 2.1 2.4 2 2.5 2 2.6 1.8 2.8 1.8 3 1.8 3.3 1.8 3.4 1.8 3.5 1.8 3.6 1.8 3.8 1.9 3.9 2 4 2.1 4.2 2.2 4.4 2.4 4.5 2.5 4.6 2.6 4.7 2.7 4.7 2.8 4.7 2.9 4.8 2.9 4.8 3 4.8 3 4.8 3 4.8L3 4.8ZM13.1 15.2C13.2 15.1 13.2 15.1 13.2 15.1 13.3 14.9 13.4 14.7 13.6 14.5 13.8 14.2 14.1 14 14.4 13.8 14.7 13.6 15.1 13.5 15.5 13.4 15.9 13.4 16.3 13.4 16.7 13.5 17.2 13.5 17.6 13.7 17.9 13.9 18.2 14.1 18.5 14.4 18.7 14.7 18.9 15 19.1 15.3 19.2 15.6 19.3 15.9 19.4 16.1 19.4 16.4 19.4 17 19.3 17.5 19.1 18.1 19 18.3 18.9 18.5 18.7 18.7 18.5 19 18.3 19.2 18 19.4 17.7 19.6 17.3 19.8 16.9 19.9 16.6 20 16.3 20 16 20 15.8 20 15.6 20 15.4 19.9 15.4 19.9 15.4 19.9 15.4 19.9 15.2 19.9 15 19.8 14.9 19.8 14.8 19.7 14.7 19.7 14.6 19.7 14.4 19.6 14.3 19.5 14.1 19.3 13.7 19.1 13.4 18.7 13.2 18.4 13.1 18.1 12.9 17.8 12.9 17.5 12.8 17.3 12.8 17.1 12.8 16.9L3.5 14.9C3.3 14.9 3.1 14.8 3 14.8 2.7 14.7 2.4 14.5 2.1 14.3 1.7 14 1.4 13.7 1.2 13.3 1 13 0.9 12.6 0.8 12.3 0.7 12 0.7 11.7 0.7 11.4 0.7 11 0.8 10.5 1 10.1 1.1 9.8 1.3 9.5 1.6 9.2 1.8 8.9 2.1 8.7 2.4 8.5 2.8 8.3 3.2 8.1 3.6 8.1 3.9 8 4.2 8 4.5 8 4.6 8 4.8 8 4.9 8.1L6.8 8.5C6.8 8.4 6.8 8.4 6.8 8.4 6.9 8.2 7.1 8 7.2 7.8 7.5 7.5 7.7 7.3 8 7.1 8.4 6.9 8.7 6.8 9.1 6.7 9.5 6.7 10 6.7 10.4 6.8 10.8 6.8 11.2 7 11.5 7.2 11.8 7.5 12.1 7.7 12.4 8 12.6 8.3 12.7 8.6 12.8 8.9 12.9 9.2 13 9.4 13 9.7 13 9.7 13 9.8 13 9.8 13.6 9.9 14.2 10.1 14.9 10.2 15 10.2 15 10.2 15.1 10.2 15.3 10.2 15.4 10.2 15.6 10.2 15.8 10.1 16 10 16.2 9.9 16.4 9.8 16.5 9.6 16.6 9.5 16.8 9.2 16.9 8.8 16.9 8.5 16.9 8.3 16.9 8.2 16.8 8 16.8 7.8 16.7 7.7 16.6 7.5 16.5 7.3 16.3 7.2 16.2 7.1 16 7 15.9 6.9 15.8 6.9 15.7 6.9 15.6 6.8 15.5 6.8L6.2 4.8C6.2 5 6 5.2 5.9 5.3 5.7 5.6 5.5 5.8 5.3 6 4.9 6.2 4.5 6.4 4.1 6.5 3.8 6.6 3.5 6.6 3.2 6.6 3 6.6 2.8 6.6 2.7 6.6 2.6 6.6 2.6 6.5 2.6 6.5 2.5 6.5 2.3 6.5 2.1 6.4 1.8 6.3 1.6 6.1 1.3 6 1 5.7 0.7 5.4 0.5 5 0.3 4.7 0.2 4.4 0.1 4.1 0 3.8 0 3.6 0 3.3 0 2.8 0.1 2.2 0.4 1.7 0.5 1.5 0.7 1.3 0.8 1.1 1.1 0.8 1.3 0.6 1.6 0.5 2 0.3 2.3 0.1 2.7 0.1 3.1 0 3.6 0 4 0.1 4.4 0.2 4.8 0.3 5.1 0.5 5.5 0.8 5.7 1 6 1.3 6.2 1.6 6.3 1.9 6.4 2.3 6.5 2.5 6.6 2.7 6.6 3 6.6 3 6.6 3.1 6.6 3.1 9.7 3.8 12.8 4.4 15.9 5.1 16.1 5.1 16.2 5.2 16.4 5.2 16.7 5.3 16.9 5.5 17.2 5.6 17.5 5.9 17.8 6.2 18.1 6.5 18.3 6.8 18.4 7.2 18.6 7.5 18.6 7.9 18.7 8.2 18.7 8.6 18.7 9 18.6 9.4 18.4 9.8 18.3 10.1 18.2 10.3 18 10.6 17.8 10.9 17.5 11.1 17.3 11.3 16.9 11.6 16.5 11.8 16 11.9 15.7 12 15.3 12 15 12 14.8 12 14.7 12 14.5 11.9 13.9 11.8 13.3 11.7 12.6 11.5 12.5 11.7 12.4 11.9 12.3 12 12.1 12.3 11.9 12.5 11.7 12.7 11.3 12.9 10.9 13.1 10.5 13.2 10.2 13.3 9.9 13.3 9.6 13.3 9.4 13.3 9.2 13.3 9 13.2 9 13.2 9 13.2 9 13.2 8.8 13.2 8.7 13.2 8.5 13.1 8.2 13 8 12.8 7.7 12.6 7.4 12.4 7.1 12 6.8 11.7 6.7 11.4 6.6 11.1 6.5 10.8 6.4 10.6 6.4 10.4 6.4 10.2 5.8 10.1 5.2 9.9 4.5 9.8 4.4 9.8 4.4 9.8 4.3 9.8 4.1 9.8 4 9.8 3.8 9.8 3.6 9.9 3.4 10 3.2 10.1 3 10.2 2.9 10.4 2.8 10.5 2.6 10.8 2.5 11.1 2.5 11.5 2.5 11.6 2.5 11.8 2.6 12 2.6 12.1 2.7 12.3 2.8 12.5 2.9 12.6 3.1 12.8 3.2 12.9 3.3 13 3.5 13.1 3.6 13.1 3.7 13.1 3.8 13.2 3.9 13.2L13.1 15.2 13.1 15.2Z" fill="currentColor"></path></g></svg><em>Tutorials</em></a></li><li class="nav-highlights"><a href="https://www.safaribooksonline.com/u/001o000000ijSMHAA2/" class="t-highlights-nav l1 ss-highlights None">Highlights</a></li><li><a href="https://www.safaribooksonline.com/u/" class="t-settings-nav l1 js-settings ss-settings None">Settings</a></li><li><a href="https://community.safaribooksonline.com/" class="l1 no-icon">Feedback</a></li><li><a href="https://www.safaribooksonline.com/accounts/logout/" class="l1 no-icon">Sign Out</a></li></ul><ul class="profile"><li><a href="https://www.safaribooksonline.com/u/" class="l2 None">Settings</a><span class="l2 t-nag-notification" id="nav-nag"><strong class="trial-green">10</strong> days left in your trial.
  
  

  
    
      

<a class="" href="https://www.safaribooksonline.com/subscribe/">Subscribe</a>.


    
  

  

</span></li><li><a href="https://community.safaribooksonline.com/" class="l2">Feedback</a></li><li><a href="https://www.safaribooksonline.com/accounts/logout/" class="l2">Sign Out</a></li></ul></div></li></ul></nav></header>


      </div>
      <div style="height: auto;" id="container" class="application">
        
          <div class="nav-container clearfix">
            


            
            
          </div>

          

  <div class="js-toc">
    
      <div class="sbo-reading-menu sbo-menu-top"><section class="sbo-toc-container toc-menu"><a href="#" class="sbo-toc-thumb"><span class="sbo-title ss-list"><h1><div class="visuallyhidden">Table of Contents for </div>
      
      Software Architecture in Practice, Third Edition
      
    </h1></span></a><div class="toc-contents"></div></section></div>

    

    <div class="interface-controls interface-controls-top">
      <ul class="interface-control-btns js-bitlist js-reader">
        <li class="js-search-in-archive search-in-archive t-search-in-archive"><a href="#" title="Search in archive" class="js-search-controls search-controls"><span class="icon">Search in book...</span></a><form class="search-archive-bar js-search-form"><input name="q" placeholder="Search inside this book..." autocomplete="off" type="search"></form><div class="js-search-results search-archive-results"></div></li><li class="queue-control"><button title="Add to Queue" aria-label="Add to Queue" data-for-analytics="9780132942799:ch26.html" type="button" class="rec-fav ss-queue js-queue js-current-chapter-queue" data-queue-endpoint="/api/v1/book/9780132942799/chapter/ch26.html"><span>Add to Queue</span></button></li><li class="js-font-control-panel font-control-activator"><a href="#" data-push-state="false" id="font-controls" title="Change font size" aria-label="Change font size"><span class="icon">Toggle Font Controls</span></a></li><li class="dropdown sharing-controls"><a href="#" class="trigger" data-push-state="false" title="Share" aria-label="Share"><i class="fa fa-share"></i></a><ul class="social-sharing dropdown-menu"><li><a class="twitter share-button t-twitter" target="_blank" aria-label="Share this section on Twitter" title="Share this section on Twitter" href="https://twitter.com/share?url=https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch10.html&amp;text=Software%20Architecture%20in%20Practice%2C%20Third%20Edition&amp;via=safari"><span>Twitter</span></a></li><li><a class="facebook share-button t-facebook" target="_blank" aria-label="Share this section on Facebook" title="Share this section on Facebook" href="https://www.facebook.com/sharer/sharer.php?u=https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch10.html"><span>Facebook</span></a></li><li><a class="googleplus share-button t-googleplus" target="_blank" aria-label="Share this secton on Google Plus" title="Share this secton on Google Plus" href="https://plus.google.com/share?url=https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch10.html"><span>Google Plus</span></a></li><li><a class="email share-button t-email" aria-label="Share this section via email" title="Share this section via email" href="mailto:?subject=Safari:%2010.%20Testability&amp;body=https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch10.html%0D%0Afrom%20Software%20Architecture%20in%20Practice%2C%20Third%20Edition%0D%0A"><span>Email</span></a></li></ul></li>
      </ul>
    </div>

    <section role="document">
	  <div class="t-sbo-prev sbo-prev sbo-nav-top">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/part05.html" class="prev nav-link">
      
          <span aria-hidden="true" class="pagination-label t-prev-label">Prev</span>
          <span class="visuallyhidden">Previous Chapter</span>
          <div class="pagination-title t-prev-title">Part Five: The Brave New World</div>
        </a>
    
  
  </div>

  <div class="t-sbo-next sbo-next sbo-nav-top">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch27.html" class="next nav-link">
      
          <span aria-hidden="true" class="pagination-label t-next-label">Next</span>
          <span class="visuallyhidden">Next Chapter</span>
          <div class="pagination-title t-next-title">27. Architectures for the Edge</div>
        </a>
    
  
  </div>



<div id="sbo-rt-content"><div class="annotator-wrapper"><h2 id="ch26"><a id="page_503"></a>26. Architecture in the Cloud</h2>
<div class="attri">
<p class="blockquote"><em>There was a time when every household, town, 
farm or village had its own water well. Today, shared public utilities 
give us access to clean water by simply turning on the tap; cloud 
computing works in a similar fashion.</em></p>
<p class="attribution">—Vivek Kundra</p>
</div>
<p class="noindent">If you have read anything about the history of 
computing, you will have read about time-sharing. This was the era, in 
the late 1960s and the 1970s, sandwiched between eras when individuals 
had sole, although limited, access to multimillion-dollar computers and 
when individuals had access to their own personal computers. 
Time-sharing involved multiple users (maybe as many as several hundred) 
simultaneously accessing a powerful mainframe computer through a 
terminal, potentially remote from the mainframe. The operating system on
 the mainframe made it appear as if each user had sole access to that 
computer except, possibly, for performance considerations. The driving 
force behind the development of time-sharing was economic; it was 
infeasible to provide every user with a multimillion-dollar computer, 
but efficiently sharing this expensive but powerful resource was the 
solution.</p>
<p class="indent">In some ways, cloud computing is a re-creation of that
 era. In fact, some of the basic techniques—such as virtualization—that 
are used in the cloud today date from that period. Any user of an 
application in the cloud does not need to know that the application and 
the data it uses are situated several time zones away, and that 
thousands of other users are sharing it. Of course, with the advent of 
the Internet, the availability of much more powerful computers today, 
and the requirement for controlled sharing, designing the architecture 
for a cloud-based application is much different from designing the 
architecture for a time-sharing-based application. The driving forces, 
however, remain much the same. The <a id="page_504"></a>economics of 
using the cloud as a deployment platform are so compelling that few 
organizations today can afford to ignore this set of technologies.</p>
<p class="indent">In this chapter we introduce cloud concepts, and we 
discuss various service models and deployment options for the cloud, the
 economic justification for the cloud, the base architectures and 
mechanisms that make the cloud work, and some sample technologies. We 
will conclude by discussing how an architect should approach building a 
system in the cloud.</p>
<h3 id="ch26lev1sec1">26.1. Basic Cloud Definitions</h3>
<p class="noindent">The essential characteristics of cloud computing 
(based, in part, on definitions provided by the U.S. National Institute 
of Standards and Technology, or NIST) are the following:</p>
<p class="indenthangingN"><strong>1.</strong> <em>On-demand self-service.</em>
 A resource consumer can unilaterally provision computing services, such
 as server time and network storage, as needed automatically without 
requiring human interaction with each service’s provider. This is 
sometimes called empowerment of end users of computing resources. 
Examples of resources include storage, processing, memory, network 
bandwidth, and virtual machines.</p>
<p class="indenthangingN"><strong>2.</strong> <em>Ubiquitous network access.</em>
 Cloud services and resources are available over the network and 
accessed through standard networking mechanisms that promote use by a 
heterogeneous collection of clients. For example, you can effectively 
run large applications on small platforms such as smart phones, laptops,
 and tablets by running the resource-intensive portion of those 
applications on the cloud. This capability is independent of location 
and device; all you need is a client and the Internet.</p>
<p class="indenthangingN"><strong>3.</strong> <em>Resource pooling.</em>
 The cloud provider’s computing resources are pooled. In this way they 
can efficiently serve multiple consumers. The provider can dynamically 
assign physical and virtual resources to consumers, according to their 
instantaneous demands.</p>
<p class="indenthangingN"><strong>4.</strong> <em>Location independence.</em>
 The location independence provided by ubiquitous network access is 
generally a good thing. It does, however, have one potential drawback. 
The consumer generally has less control over, or knowledge of, the 
location of the provided resources than in a traditional implementation.
 This can have drawbacks for data latency. The consumer may be able to 
ameliorate this drawback by specifying abstract location information 
(e.g., country, state, or data center).</p>
<p class="indenthangingN"><strong>5.</strong> <em>Rapid elasticity.</em>
 Due to resource pooling, it is easy for capabilities to be rapidly and 
elastically provisioned, in some cases automatically, to quickly scale 
out or in. To the consumer, the capabilities available for provisioning 
often appear to be virtually unlimited.</p>
<p class="indenthangingN"><a id="page_505"></a><strong>6.</strong> <em>Measured service.</em>
 Cloud systems automatically control and optimize resource use by 
leveraging a metering capability for the chosen service (e.g., storage, 
processing, bandwidth, and user accounts). Resource usage can be 
monitored, controlled, and reported so that consumers of the services 
are billed only for what they use.</p>
<p class="indenthangingN"><strong>7.</strong> <em>Multi-tenancy.</em> 
Multi-tenancy is the use of a single application that is responsible for
 supporting distinct classes or users. Each class or user has its own 
set of data and access rights, and different users or classes of users 
are kept distinct by the application.</p>
<h3 id="ch26lev1sec2">26.2. Service Models and Deployment Options</h3>
<p class="noindent">In this section we discuss more terminology and 
basic concepts. First we discuss the most important models for a 
consumer using the cloud.</p>
<h4 id="ch26lev2sec1">Cloud Service Models</h4>
<h5 id="ch26lev3sec1">Software as a Service (SaaS)</h5>
<p class="noindent">The consumer in this case is an end user. The 
consumer uses applications that happen to be running on a cloud. The 
applications can be as varied as email, calendars, video streaming, and 
real-time collaboration. The consumer does not manage or control the 
underlying cloud infrastructure, including network, servers, operating 
systems, storage, or even individual application capabilities, with the 
possible exception of limited user-specific application configuration 
settings.</p>
<h5 id="ch26lev3sec2">Platform as a Service (PaaS)</h5>
<p class="noindent">The consumer in this case is a developer or system 
administrator. The platform provides a variety of services that the 
consumer may choose to use. These services can include various database 
options, load-balancing options, availability options, and development 
environments. The consumer deploys applications onto the cloud 
infrastructure using programming languages and tools supported by the 
provider. The consumer does not manage or control the underlying cloud 
infrastructure, including network, servers, operating systems, or 
storage, but has control over the deployed applications and possibly 
application hosting environment configurations. Some levels of quality 
attributes (e.g., uptime, response time, security, fault correction 
time) may be specified by service-level agreements (SLAs).</p>
<h5 id="ch26lev3sec3">Infrastructure as a Service (IaaS)</h5>
<p class="noindent">The consumer in this case is a developer or system 
administrator. The capability provided to the consumer is to provision 
processing, storage, networks, and other fundamental computing resources
 where the consumer is able to deploy and run arbitrary software, which <a id="page_506"></a>can
 include operating systems and applications. The consumer can, for 
example, choose to create an instance of a virtual computer and 
provision it with some specific version of Linux. The consumer does not 
manage or control the underlying cloud infrastructure but has control 
over operating systems, storage, deployed applications, and possibly 
limited control of select networking components (e.g., host firewalls). 
Again, SLAs are often used to specify key quality attributes.</p>
<h4 id="ch26lev2sec2">Deployment Models</h4>
<p class="noindent">The various deployment models for the cloud are 
differentiated by who owns and operates the cloud. It is possible that a
 cloud is owned by one party and operated by a different party, but we 
will ignore that distinction and assume that the owner of the cloud also
 operates the cloud.</p>
<p class="indent">There are two basic models and then two additional variants of these. The two basic models are private cloud and public cloud:</p>
<p class="indenthangingB">• <em>Private cloud.</em> The cloud 
infrastructure is owned solely by a single organization and operated 
solely for applications owned by that organization. The primary purpose 
of the organization is not the selling of cloud services.</p>
<p class="indenthangingB">• <em>Public cloud.</em> The cloud 
infrastructure is made available to the general public or a large 
industry group and is owned by an organization selling cloud services.</p>
<p class="indent">The two variants are community cloud and hybrid cloud:</p>
<p class="indenthangingB">• <em>Community cloud.</em> The cloud 
infrastructure is shared by several organizations and supports a 
specific community that has shared concerns (e.g., mission, security 
requirements, policy, and compliance considerations).</p>
<p class="indenthangingB">• <em>Hybrid cloud.</em> The cloud 
infrastructure is a composition of two or more clouds (private, 
community, or public) that remain unique entities. The consumer will 
deploy applications onto some combination of the constituent cloud. An 
example is an organization that utilizes a private cloud except for 
periods when spikes in load lead to servicing some requests from a 
public cloud. Such a technique is called “cloud bursting.”</p>
<h3 id="ch26lev1sec3">26.3. Economic Justification</h3>
<p class="noindent">In this section we discuss three economic 
distinctions between (cloud) data centers based on their size and the 
technology that they use:</p>
<p class="indenthangingN"><strong>1.</strong> <a href="#ch26lev2sec3">Economies of scale</a></p>
<p class="indenthangingN"><a id="page_507"></a><strong>2.</strong> <a href="#ch26lev2sec4">Utilization of equipment</a></p>
<p class="indenthangingN"><strong>3.</strong> <a href="#ch26lev2sec5">Multi-tenancy</a></p>
<p class="indent">The aggregated savings of the three items we discuss 
may be as large as 80 percent for a 100,000-server data center compared 
to a 10,000-server data center. Economic considerations have made almost
 all startups deploy into the cloud. Many larger enterprises deploy a 
portion of their applications into the cloud, and almost every 
enterprise with substantial computation needs at least considers the 
cloud as a deployment platform.</p>
<h4 id="ch26lev2sec3">Economies of Scale</h4>
<p class="noindent">Large data centers are inherently less expensive to 
operate per unit measure, such as cost per gigabyte, than smaller data 
centers. Large data centers may have hundreds of thousands of servers. 
Smaller data centers have servers numbered in the thousands or maybe 
even the hundreds. The cost of maintaining a data center depends on four
 factors:</p>
<p class="indenthangingN"><strong>1.</strong> <em>Cost of power.</em> 
The cost of electricity to operate a data center currently is 15 to 20 
percent of the total cost of operation. The per-server power usage tends
 to be significantly lower in large data centers than in smaller ones 
because of the ability to share items such as racks and switches. In 
addition, large power users can negotiate significant discounts (as much
 as 50 percent) compared to the retail rates that operators of small 
data centers must pay. Some areas of the United States provide power at 
significantly lower rates than the national average, and large data 
centers can be located in those areas. Finally, organizations such as 
Google are buying or building innovative and cheaper power sources, such
 as on- and offshore wind farms and rooftop solar energy.</p>
<p class="indenthangingN"><strong>2.</strong> <em>Infrastructure labor costs.</em>
 Large data centers can afford to automate many of the repetitive 
management tasks that are performed manually in smaller data centers. In
 a traditional data center, an administrator can service approximately 
140 servers, whereas in a cloud data center, the same administrator can 
service thousands of servers.</p>
<p class="indenthangingN"><strong>3.</strong> <em>Security and reliability.</em>
 Maintaining a given level of security, redundancy, and disaster 
recovery essentially requires a fixed level of investment. Larger data 
centers can amortize that investment over their larger number of servers
 and, consequently, the cost per server will be lower.</p>
<p class="indenthangingN"><strong>4.</strong> <em>Hardware costs.</em> Operators of large data centers can get discounts on hardware purchases of up to 30 percent over smaller buyers.</p>
<p class="indent">These economies of scale depend only on the size of 
the data center and do not depend on the deployment model being used. 
Operators of public clouds <a id="page_508"></a>have priced their offerings so that many of the cost savings are passed on to their consumers.</p>
<h4 id="ch26lev2sec4">Utilization of Equipment</h4>
<p class="noindent">Common practice in nonvirtualized data centers is to
 run one application per server. This is caused by the dependency of 
many enterprise applications on particular operating systems or even 
particular versions of these operating systems. One result of the 
restriction of one application per server is extremely low utilization 
of the servers. Figures of 10 to 15 percent utilization for servers are 
quoted by several different vendors.</p>
<p class="indent">Use of virtualization technology, described in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch26.html#ch26lev1sec4">Section 26.4</a>,
 allows for easy co-location of distinct applications and their 
associated operating systems on the same server hardware. The effect of 
this co-location is to increase the utilization of servers. Furthermore,
 variations in workload can be managed to further increase the 
utilization. We look at five different sources of variation and discuss 
how they might affect the utilization of servers:</p>
<p class="indenthangingN"><strong>1.</strong> <em>Random access.</em> 
End users may access applications randomly. For example, the checking of
 email is for some people continuous and for others time-boxed into a 
particular time period. The more users that can be supported on a single
 server, the more likely that the randomness of their accesses will end 
up imposing a uniform load on the server.</p>
<p class="indenthangingN"><strong>2.</strong> <em>Time of day.</em> 
Those services that are workplace related, unsurprisingly, tend to be 
more heavily used during the work day. Those that are consumer related 
tend to be heavily used during evening hours. Co-locating different 
services with different time-of-day usage patterns will increase the 
overall utilization of a server. Furthermore, time differences among 
geographically distinct locations will also affect utilization patterns 
and can be considered when planning deployment schedules.</p>
<p class="indenthangingN"><strong>3.</strong> <em>Time of year.</em> 
Some applications respond to dates as well as time of day. Consumer 
sites will see increases during the Christmas shopping season, and 
floral sites will see increases around Valentine’s Day and Mother’s Day.
 Tax preparation software will see increases around the tax return 
submission due date. Again, these variations in utilization are 
predictable and can be considered when planning deployment schedules.</p>
<p class="indenthangingN"><strong>4.</strong> <em>Resource usage patterns.</em>
 Not all applications use resources in the same fashion. Search, for 
example, is heavier in its usage of CPU than email but lighter in its 
use of storage. Co-locating applications with complementary resource 
usage patterns will increase the overall utilization of resources.</p>
<p class="indenthangingN"><strong>5.</strong> <em>Uncertainty.</em> 
Organizations must maintain sufficient capacity to support spikes in 
usage. Such spikes can be caused by news events if your site is a news 
provider, by marketing events if your site is consumer-facing, or even <a id="page_509"></a>sporting
 events because viewers of sporting events may turn to their computers 
during breaks in the action. Startups can face surges in demand if their
 product catches on more quickly than they can build capacity.</p>
<p class="indent">The first four sources of variation are supported by 
virtualization without reference to the cloud or the cloud deployment 
model. The last source of variation (uncertainty) depends on having a 
deployment model that can accommodate spikes in demand. This is the 
rationale behind cloud bursting, or keeping applications in a private 
data center and offloading spikes in demand to the public cloud. 
Presumably, a public cloud provider can deploy sufficient capacity to 
accommodate any single organization’s spikes in demand.</p>
<h4 id="ch26lev2sec5">Multi-tenancy</h4>
<p class="noindent">Multi-tenancy applications such as Salesforce.com or
 Microsoft Office 365 are architected explicitly to have a single 
application that supports distinct sets of users. The economic benefit 
of multi-tenancy is based on the reduction in costs for application 
update and management. Consider what is involved in updating an 
application for which each user has an individual copy on their own 
desktop. New versions must be tested by the IT department and then 
pushed to the individual desktops. Different users may be updated at 
different times because of disconnected operation, user resistance to 
updates, or scheduling difficulties. Incidents result because the new 
version may have some incompatibilities with older versions, the new 
version may have a different user interface, or users with old versions 
are unable to share information with users of the new version.</p>
<p class="indent">With a multi-tenant application, all of these problems
 are pushed from IT to the vendor, and some of them even disappear. Any 
update is available at the same instant to all of the users, so there 
are no problems with sharing. Any user interface changes are referred to
 the vendor’s hotline rather than the IT hotline, and the vendor is 
responsible for avoiding incompatibilities for older versions.</p>
<p class="indent">The problems of upgrading do not disappear, but they 
are amortized over all of the users of the application rather than being
 absorbed by the IT department of every organization that uses the 
application. This amortization over more users results in a net 
reduction in the costs associated with installing an upgraded version of
 an application.</p>
<h3 id="ch26lev1sec4">26.4. Base Mechanisms</h3>
<p class="noindent">In this section we discuss the base mechanisms that 
clouds use to provide their low-level services. In an IaaS instance, the
 cloud provides to the consumer a virtual machine loaded with a machine 
image. Virtualization is not a new concept; <a id="page_510"></a>it has 
been around since the 1960s. But today virtualization is economically 
enticing. Modern hardware is designed to support virtualization, and the
 overhead it adds has been measured to be just 1 percent per instance 
running on the bare hardware.</p>
<p class="indent">We will discuss the architecture of an IaaS platform in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch26.html#ch26lev1sec5">Section 26.5</a>.
 In this section, we describe the concepts behind a virtual machine: the
 hypervisor and how it manages virtual machines, a storage system, and 
the network.</p>
<h4 id="ch26lev2sec6">Hypervisor</h4>
<p class="noindent">A hypervisor is the operating system used to create 
and manage virtual machines. Because each virtual machine has its own 
operating system, a consumer application is actually managed by two 
layers of operating system: the hypervisor and the virtual machine 
operating system. The hypervisor manages the virtual machine operating 
system and the virtual machine operating system manages the consumer 
application. The key services used by the hypervisor to support the 
virtual machines it manages are a virtual page mapper and a scheduler. A
 hypervisor, of course, provides additional services and has a much 
richer structure than we present here, but these key services are the 
two that we will discuss.</p>
<h4 id="ch26lev2sec7">Page Mapper</h4>
<p class="noindent">We begin by describing how virtual memory works on a
 bare (nonvirtualized) machine. All modern servers utilize virtual 
memory. Virtual memory allows an application to assume it has a large 
amount of memory in which to execute. The assumed memory is mapped into a
 much smaller physical memory through the use of page tables. The 
consumer application is divided into pages that are either in physical 
memory or temporarily residing on a disk. The page table contains the 
mapping of logical address (consumer application address) to physical 
address (actual machine address) or disk location. <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch26.html#ch26fig01">Figure 26.1</a>
 shows the consumer application executing its next instruction. This 
causes the CPU to generate a target address from which to fetch the next
 instruction or data item. The target address is used to address into a 
page table. The page table provides a physical address within the 
computer where the actual instruction or data item can be found if it is
 currently in main memory. If the physical address is not currently 
resident in the main memory of the computer, an interrupt is generated 
that causes a page that contains the target address to be loaded. This 
is the mechanism that allows a large (virtual) address space to be 
supported on much smaller physical memory.</p>
<div class="image"><a id="ch26fig01"></a><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/26fig01.jpg" src="26.%20Architecture%20in%20the%20Cloud_files/26fig01.jpg" alt="Image" height="450" width="721"></div>
<p class="fig-caption">Figure 26.1. Virtual memory page table</p>
<p class="indent">Turning the virtual memory mechanism into a virtualization mechanism involves adding another level of indirection. <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch26.html#ch26fig02">Figure 26.2</a>
 shows a logical sequence that maps from the consumer application to a 
physical machine address. Modern processors contain many optimizations 
to make this process more efficient. A consumer application generates 
the next instruction with its target address. This target address is 
within the virtual machine in which the consumer application is 
executing. The virtual machine page table maps this target address to an
 address within the virtual machine based on the target address as 
before (or indicates that the page is not currently in memory). The 
address within the virtual machine is converted to a physical address by
 use of a page table within the hypervisor that manages the current 
virtual machines.</p>
<div class="image"><a id="page_511"></a><a id="ch26fig02"></a><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/26fig02.jpg" src="26.%20Architecture%20in%20the%20Cloud_files/26fig02.jpg" alt="Image" height="507" width="721"></div>
<p class="fig-caption">Figure 26.2. Adding a second level of indirection to determine which virtual machine the address references</p>
<h4 id="ch26lev2sec8"><a id="page_512"></a>Scheduler</h4>
<p class="noindent">The hypervisor scheduler operates like any operating
 system scheduler. Whenever the hypervisor gets control, it decides on 
the virtual machine to which it will pass control. A simple round-robin 
scheduling algorithm assigns the processor to each virtual machine in 
turn, but many other possible scheduling algorithms exist. Choosing the 
correct scheduling algorithm requires you to make assumptions about the 
demand characteristics of the different virtual machines hosted within a
 single server. One area of research is the application of real-time 
scheduling algorithms to hypervisors. Real-time schedulers would be 
appropriate for the use of virtualization within embedded systems, but 
not necessarily within the cloud.</p>
<h4 id="ch26lev2sec9">Storage</h4>
<p class="noindent">A virtual machine has access to a storage system for
 persistent data. The storage system is managed across multiple physical
 servers and, potentially, across clusters of servers. In this section 
we describe one such storage system: the Hadoop Distributed File System 
(HDFS).</p>
<p class="indent">We describe the redundancy mechanism used in HDFS as 
an example of the types of mechanisms used in cloud virtual file 
systems. HDFS is engineered for scalability, high performance, and high 
availability.</p>
<p class="indent">A component-and-connector view of HDFS within a cluster is shown in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch26.html#ch26fig03">Figure 26.3</a>.
 There is one NameNode process for the whole cluster, multiple 
DataNodes, and potentially multiple client applications. To explain the 
function of HDFS, we trace through a use case. We describe the 
successful use case for “write.” HDFS also has facilities to handle 
failure, but we do not describe these. See the “<a href="#ch26lev1sec8">For Further Reading</a>” section for a reference to the HDFS failure-handling mechanisms.</p>
<div class="image"><a id="ch26fig03"></a><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/26fig03.jpg" src="26.%20Architecture%20in%20the%20Cloud_files/26fig03.jpg" alt="Image" height="506" width="721"></div>
<p class="fig-caption">Figure 26.3. A component-and-connector view of an HDFS deployment. Each process exists on a distinct computer.</p>
<p class="indent">For the “write” use case, we will assume that the file
 has already been opened. HDFS does not use locking to allow for 
simultaneous writing by different processes. Instead, it assumes a 
single writer that writes until the file is complete, after which 
multiple readers can read the file simultaneously. The application 
process has two portions: the application code and a client library 
specific to HDFS. The application code can write to the client using a 
standard (but overloaded) Java I/O call. The client buffers the 
information until a block of 64 MB has been collected. Two of the 
techniques used by HDFS for enhancing performance are the avoidance of 
locks and the use of 64-MB blocks as the only block <a id="page_513"></a>size
 supported. No substructure of the blocks is supported by HDFS. The 
blocks are undifferentiated byte strings. Any substructure and typing of
 the information is managed solely by the application. This is one 
example of a phenomenon that we will notice in portions of the cloud: 
moving application-specific functionality <em>up</em> the stack as opposed to moving it down the stack to the infrastructure.</p>
<p class="indent">For reliability purposes each block is replicated a 
parameterizable number of times, with a default of three. For each block
 to be written, the NameNode allocates DataNodes to write the replicas. 
The DataNodes are chosen based on two criteria: (1) their 
location—replicas are spread across racks to protect against the 
possibility that a rack fails; and (2) the dynamic load on the DataNode.
 Lightly loaded DataNodes are given preference over heavily loaded 
DataNodes to reduce the possibility of contention for the DataNodes 
among different files being simultaneously accessed.</p>
<p class="indent">Once the client has collected a buffer of 64 MB, it 
asks the NameNode for the identities of the DataNodes that will contain 
the actual replicas. The NameNode manages only metadata; it is not 
involved in the actual transfer or recording of data. These DataNode 
identities are sent from the NameNode to the client, which then treats 
them as a pipeline. At this point the client streams the block to the 
first DataNode in the pipeline. The first DataNode then streams the data
 to the second <a id="page_514"></a>DataNode in the pipeline, and so 
forth until the pipeline (of three DataNodes, unless the client has 
specified a different replication value) is completed. Each DataNode 
reports back to the client when it has successfully written the block, 
and also reports to the NameNode that it has successfully written the 
block.</p>
<h4 id="ch26lev2sec10">Network</h4>
<p class="noindent">In this section we describe the basic concepts 
behind Internet Protocol (IP) addressing and how a message arrives at 
your computer. In <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch26.html#ch26lev1sec5">Section 26.5</a> we discuss how an IaaS system manages IP addresses.</p>
<p class="indent">An IP address is assigned to every “device” on a 
network whether this device is a computer, a printer, or a virtual 
machine. The IP address is used both to identify the device and provide 
instructions on how to find it with a message. An IPv4 address is a 
constrained 32-bit number that is, typically, represented as four groups
 for human readability. For example, 192.0.2.235 is a valid IP address. 
The familiar names that we use for URLs, such as “<a href="http://www.pearsonhighered.com/">http://www.pearsonhighered.com/</a>”,
 go through a translation process, typically through a domain name 
server (DNS), that results in a numeric IP address. A message destined 
for that IP address goes through a routing process to arrive at the 
appropriate location.</p>
<p class="indent">Every IP message consists of a header plus a payload. 
The header contains the source IP address and the destination IP 
address. IPv6 replaces the 32-bit number with a 128-bit number, but the 
header of an IP message still includes the source and destination IP 
addresses.</p>
<p class="indent">It is possible to replace the header of an IP message 
for various reasons. One reason is that an organization uses a gateway 
to manage traffic between external computers and computers within the 
organization. An IP address is either “public,” meaning that it is 
unique within the Internet, or “private,” meaning that multiple copies 
of the IP address are used, with each copy owned by a different 
organization. Private IP addresses must be accessed through a gateway 
into the organization that owns it. For outgoing messages, the gateway 
records the address of the internal machine and its target and replaces 
the source address in the TCP header with its own public IP address. On 
receipt of a return message, the gateway would determine the internal 
address for the message and overwrite the destination address in the 
header and then send the message onto the internal network. Network 
address translation (NAT) is the name of this process of translation.</p>
<h3 id="ch26lev1sec5">26.5. Sample Technologies</h3>
<p class="noindent">Building on the base mechanisms, we now discuss some
 of the technologies that exist in the cloud. We begin by discussing the
 design of a generic IaaS platform, <a id="page_515"></a>then we move up the stack to a PaaS, and finally we discuss database technology in the cloud.</p>
<h4 id="ch26lev2sec11">Infrastructure as a Service</h4>
<p class="noindent">Fundamentally, an IaaS installation provides three 
services: virtualized computation, virtualized networking, and a 
virtualized file system. In the previous section on base mechanisms, we 
described how the operating system for an individual server manages 
memory to isolate each virtual machine and how TCP/IP messages could be 
manipulated. An IaaS provides a management structure around these base 
concepts. That is, virtual machines must be allocated and deallocated, 
messages must be routed to the correct instance, and persistence of 
storage must be ensured.</p>
<p class="indent">We now discuss the architecture of a generic IaaS 
platform. Various providers will offer somewhat different services 
within different architectures. Open-Stack is an open source movement to
 standardize IaaS services and interfaces, but as of this writing, it is
 still immature.</p>
<p class="indent"><a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch26.html#ch26fig04">Figure 26.4</a>
 shows an allocation view of a generic cloud platform. Each server shown
 provides a different function to the platform, as we discuss next.</p>
<div class="image"><a id="ch26fig04"></a><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/26fig04.jpg" src="26.%20Architecture%20in%20the%20Cloud_files/26fig04.jpg" alt="Image" height="532" width="800"></div>
<p class="fig-caption">Figure 26.4. A generic cloud allocation view</p>
<p class="indent">An IaaS installation has a variety of clusters. Each cluster may have thousands of physical servers. Each cluster has a <em>cluster manager</em> responsible for that cluster’s resources. The <em>persistent object manager</em> supports the manipulation of persistent objects, and the <em>virtual resource managers</em>
 are in charge of the other virtualized resources. For requests for new 
resources, the virtual resource manager is in charge of determining 
which cluster manager will service the request. For requests sent to 
existing resources, the virtual resource manager is responsible for 
seeing that the requests get forwarded to the correct server. The 
virtual resource manager, in this case, acts as a gateway, as described 
in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch26.html#ch26lev1sec4">Section 26.4</a>.</p>
<p class="indent"><a id="page_516"></a>Some of the services that IaaS providers offer to support applications are these:</p>
<p class="indenthangingB">• <em>Automatic reallocation of IP addresses in the case of a failure of the underlying virtual machine instance.</em>
 This service is useful in case the instance has a public IP address. 
Unless the provider offers this service, the client must register the IP
 address of a replacement instance with a domain name server to ensure 
that messages are sent to the correct location.</p>
<p class="indenthangingB">• <em>Automatic scaling.</em> One of the 
virtues of the cloud is that new instances can be created or deleted 
relatively quickly in the event of a variation in demand. Detecting the 
variation in demand, allocating (or deleting) an instance in the event 
of a variation, and ensuring that the remaining instances are allocated 
their fair share of messages is another service that could be provided 
by the IaaS.</p>
<p class="indent">The persistent object manager is responsible for 
maintaining files that are intended to persist past the deletion of a 
virtual machine instance. It may maintain these files across multiple 
clusters in a variety of different geographic locations.</p>
<p class="indent">Failure of the underlying hardware is a common 
occurrence in a large data center, consequently the virtual resource 
manager has mechanisms to manage requests in the event of failure. These
 mechanisms are typically designed to maintain the availability of the 
IaaS infrastructure and do not extend to the applications deployed with 
the virtual machines. What this means in practice is that if you make a 
request for a new resource, it will be honored. If you make a request to
 an existing virtual machine instance, the infrastructure will guarantee
 that, if your virtual machine instance is active, your request is 
delivered. If, however, the host on which your virtual machine instance 
has been allocated has failed, then your virtual machine instance is no 
longer active and it is your responsibility as an application architect 
to install mechanisms to recognize a failure of your virtual machine 
instances and recover from them.</p>
<p class="indent">The <em>file system manager</em> manages the file system for each cluster. It is similar to the Hadoop Distributed File System that we discussed in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch26.html#ch26lev1sec4">Section 26.4</a>.
 It also assumes that failure is a common occurrence and has mechanisms 
to replicate the blocks and to manage handoffs in the event of failures.</p>
<p class="indent">The cluster manager controls the execution of virtual 
machines running on the nodes within its clusters and manages the 
virtual networking between virtual machines and between virtual machines
 and external users.</p>
<p class="indent"><a id="page_517"></a>The final piece of <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch26.html#ch26fig04">Figure 26.4</a> is the <em>node manager</em>;
 it (through the functionality of a hypervisor) controls virtual machine
 activities, including the execution, inspection, and termination of 
virtual machine instances.</p>
<p class="indent">A client initially requests a virtual machine instance
 and the virtual resource manager decides on which cluster the virtual 
machine instance should reside. It passes the instance request to the 
cluster manager, which in turn decides which node should host the 
virtual machine instance.</p>
<p class="indent">Subsequent requests are routed through the pieces of 
the generic infrastructure to the correct instance. The instance can 
create files using the file system manager. These files will either be 
deleted when the virtual machine instance is finished or will be 
persisted past the existence of the virtual machine instance. The choice
 is the client’s as to how long storage is persisted. If the storage is 
persisted, it can be accessed independently of the creating instance 
through the persistence manager.</p>
<h4 id="ch26lev2sec12">Platform as a Service</h4>
<p class="noindent">A Platform as a Service provides a developer with an
 integrated stack within the cloud to develop and deploy applications. 
IaaS provides virtual machines, and it is the responsibility of the 
developer using IaaS to provision the virtual machines with the software
 they desire. PaaS is preprovisioned with a collection of integrated 
software.</p>
<p class="indent">Consider a virtual machine provisioned with the LAMP 
(Linux, Apache, MySQL, PHP/Perl/Python) stack. The developer writes code
 in Python, for example, and has available the services provided by the 
other elements of the stack. Take this example and add automatic scaling
 across virtual machines based on customer load, automatic failure 
detection and recovery, backup/restore, security, operating system patch
 installation, and built-in persistence mechanisms. This yields a simple
 example of a PaaS.</p>
<p class="indent">The vendors offering PaaS and the substance of their 
offerings are rapidly evolving. Google and Microsoft are two of the 
current vendors.</p>
<p class="indenthangingN"><strong>1.</strong> The Google App Engine 
provides the developer with a development environment for Python or 
Java. Google manages deploying and executing developed code. Google 
provides a database service that is automatically replicated across data
 centers.</p>
<p class="indenthangingN"><strong>2.</strong> Microsoft Azure provides 
an operating system and development platform to access/develop 
applications on Microsoft data centers. Azure provides a development 
environment for applications running on Windows using .NET. It also 
provides for the automatic scaling and replication of instances. For 
example, if an application instance fails, then the Azure infrastructure
 will detect the failure and deploy another instance automatically. 
Azure also has a database facility that automatically keeps replicas of 
your databases.</p>
<h4 id="ch26lev2sec13"><a id="page_518"></a>Databases</h4>
<p class="noindent">A number of different forces have converged in the 
past decade, resulting in the creation of database systems that are 
substantially different from the relational database management systems 
(RDBMSs) that were prevalent during the 1980s and ’90s.</p>
<p class="indenthangingB">• Massive amounts of data began to be 
collected from web systems. A search engine must index billions of 
pages. Facebook, today, has over 800 million users. Much of this data is
 processed sequentially and, consequently, the sophisticated indexing 
and query optimizations of RDBMSs are not necessary.</p>
<p class="indenthangingB">• Large databases are continually being 
created during various types of processing of web data. The creation and
 maintenance of databases using a traditional RDBMS requires a 
sophisticated data administrator.</p>
<p class="indenthangingB">• A theoretical result (the so-called CAP 
theorem) shows that it is not possible to simultaneously achieve 
consistency, availability, and partitioning. One of these properties 
must be sacrificed. For many applications, the choice is to sacrifice 
consistency and provide immediate availability and “eventual 
consistency.” What this means, in practice, is that occasionally a user 
will access stale data, but updates will be subsequently available. The 
alternative approach, taken by RDBMSs, is to lock values and not allow 
access until they become consistent.</p>
<p class="indenthangingB">• The relational model is not the best model 
for some applications. The relational model assumes there is one data 
item for each row-value/column-name pair. One method for handling web 
searches, for example, is to store different versions of a single web 
page indexed by the same row-value/column-name pair so that the 
different versions of the web page can be quickly accessed and 
differences easily determined. Using the relational model requires that 
the system perform joins to retrieve all of the attributes associated 
with a particular row value. Joins are expensive from a performance 
perspective, and consequently, newly emerging database systems tend to 
not support joins and require storing data in a denormalized form.</p>
<p class="indent">These forces resulted in the creation of new types of 
databases with different data models and different access mechanisms. 
These new types of databases go under the name of NoSQL—although as 
Michael Stonebraker has pointed out, the existence or nonexistence of 
SQL within the database system is irrelevant to the rationale for their 
existence.</p>
<p class="indent">We discuss two open source NoSQL database systems: a key-value one (HBase) and a document-centric one (MongoDB).</p>
<h5 id="ch26lev3sec4">HBase</h5>
<p class="noindent">HBase is a key-value database system based on the 
BigTable database system developed by Google. Google uses BigTable to 
store data for many of their applications. The number of data items in a
 HBase database can be in the billions or trillions.</p>
<p class="indent"><a id="page_519"></a>HBase supports tables, although 
there is no schema used. One column is designated as the key. The other 
columns are treated as field names. A data value is indexed by a row 
value, a column name, and a time stamp. Each row value/column name can 
contain multiple versions of the same data differentiated by time 
stamps.</p>
<p class="indent">One use of HBase is for web crawling. In this 
application, the row value is the URL for the web page. Each column name
 refers to an attribute of a web page that will support the analysis of 
the web page. For example, “contents” might be one column name. In the 
relational model, each row value/column name would retrieve the contents
 of the web page. Web pages change over time, however, and so in the 
relational model, there would need to be a separate column with the time
 stamp, and the primary key for the table would be the URL/time stamp. 
In HBase, the versions of the web page are stored together and retrieved
 by the URL value/“contents”. All of the versions of the web page are 
retrieved, and it is the responsibility of the application to separate 
the versions of the web page and determine which one is desired based on
 the time stamp.</p>
<h5 id="ch26lev3sec5">MongoDB</h5>
<p class="noindent">MongoDB uses a document-centric data model. You can 
think of it as storing objects rather than tables. An object contains 
all of the information associated with a particular concept without 
regard to whether relations among data items are stored in multiple 
different objects. Two distinct objects may have no field names in 
common, some field names in common, or all of the field names in common.</p>
<p class="indent">You may store links rather than data items. Links 
support the concept of joining different objects without requiring the 
maintenance of indices and query optimization. It is the responsibility 
of the application to follow the link.</p>
<p class="indent">Documents are stored in binary JavaScript Object 
Notation (JSON) form. Indices can be created on fields and can be used 
for retrieval, but there is no concept of primary versus secondary keys.
 A field is either indexed or it is not. Because the same field can 
occur in multiple different documents, a field is indexed wherever it 
occurs.</p>
<h4 id="ch26lev2sec14">What Is Left Out of NoSQL Databases</h4>
<p class="noindent">One motivation for NoSQL databases is performance 
when accessing millions or billions of data items. To this end, several 
standard RDBMS facilities are omitted in NoSQL databases. If an 
application wishes to have these features, it must implement them 
itself. Mainly, the features are omitted for performance reasons.</p>
<p class="indenthangingB">• <em>Schemas.</em> NoSQL databases typically 
do not require schemas for their data model and, consequently, there is 
no checking of field names for consistency.</p>
<p class="indenthangingB">• <em>Transactions.</em> NoSQL typically does 
not support transactions. Transactions lock data items, which hinders 
performance. Applications use techniques <a id="page_520"></a>such as time stamps to determine whether fields have been modified through simultaneous access.</p>
<p class="indenthangingB">• <em>Consistency.</em> NoSQL databases are 
“eventually consistent.” This means that after some time has passed, 
different replicas of a data item will have the same value, but in the 
interim, it is possible to run two successive queries that access the 
same data item and retrieve two different values.</p>
<p class="indenthangingB">• <em>Normalization.</em> NoSQL databases do not support joins. Joins are a requirement if you are to normalize your database.</p>
<h3 id="ch26lev1sec6">26.6. Architecting in a Cloud Environment</h3>
<p class="noindent">Now we take the point of view of an architect who is
 designing a system to execute in the cloud. In some ways, the cloud is a
 platform, and architecting a system to execute in the cloud, especially
 using IaaS, is no different than architecting for any other distributed
 platform. That is, the architect needs to pay attention to usability, 
modifiability, interoperability, and testability, just as he or she 
would for any other platform. The quality attributes that have some 
significant differences are security, performance, and availability.</p>
<h4 id="ch26lev2sec15">Security</h4>
<p class="noindent">Security, as always, has both technical and 
nontechnical aspects. The nontechnical aspects of security are items 
such as what trust is placed in the cloud provider, what physical 
security does the cloud provider utilize, how are employees of the cloud
 provider screened, and so forth. We will focus on the technical aspects
 of security.</p>
<p class="indent">Applications in the cloud are accessed over the 
Internet using standard Internet protocols. The security and privacy 
issues deriving from the use of the Internet are substantial but no 
different from the security issues faced by applications not hosted in 
the cloud. The one significant security element introduced by the cloud 
is multi-tenancy. Multi-tenancy means that your application is utilizing
 a virtual machine on a physical computer that is hosting multiple 
virtual machines. If one of the other tenants on your machine is 
malicious, what damage can they do to you?</p>
<p class="indent">There are four possible forms of attack utilizing multi-tenancy:</p>
<p class="indenthangingN"><strong>1.</strong> <em>Inadvertent information sharing.</em>
 Each tenant is given a set of virtual resources. Each virtual resource 
is mapped to some physical resource. It is possible that information 
remaining on a physical resource from one tenant may “leak” to another 
tenant.</p>
<p class="indenthangingN"><strong>2.</strong> <em>A virtual machine “escape.”</em> A virtual machine is isolated from other virtual machines through the use of a distinct address space. It is possible, <a id="page_521"></a>however,
 that an attacker can exploit software errors in the hypervisor to 
access information they are not entitled to. Thus far, such attacks are 
extremely rare.</p>
<p class="indenthangingN"><strong>3.</strong> <em>Side-channel attacks.</em>
 It is possible for a malicious attacker to deduce information about 
keys and other sensitive information by monitoring the timing activity 
of the cache. Again, so far, this is primarily an academic exercise.</p>
<p class="indenthangingN"><strong>4.</strong> <em>Denial-of-service attacks.</em> Other tenants may use sufficient resources on the host computer so that your application is not able to provide service.</p>
<p class="indent">Some providers allow customers to reserve entire 
machines for their exclusive use. Although this defeats some of the 
economic benefits of using the cloud, it is a mechanism to prevent 
multi-tenancy attacks. An organization should consider possible attacks 
when deciding which applications to host in the cloud, just as they 
should when considering any hosting option.</p>
<h4 id="ch26lev2sec16">Performance</h4>
<p class="noindent">The instantaneous computational capacity of any 
virtual machine will vary depending on what else is executing on that 
machine. Any application will need to monitor itself to determine what 
resources it is receiving versus what it will need.</p>
<p class="indent">One virtue of the cloud is that it provides an elastic
 host. Elasticity means that additional resources can be acquired as 
needed. An additional virtual machine, for example, will provide 
additional computational capacity. Some cloud providers will 
automatically allocate additional resources as needed, whereas other 
providers view requesting additional resources as the customer’s 
responsibility.</p>
<p class="indent">Regardless of whether the provider automatically 
allocates additional resources, the application should be self-aware of 
both its current resource usage and its projected resource usage. The 
best the provider can do is to use general algorithms to determine 
whether there is a need to allocate or free resources. An application 
should have a better model of its own behavior and be better equipped to
 do its own allocation or freeing of resources. In the worst case, the 
application can compare its predictions to those of the provider to gain
 insight into what will happen. It takes time for the additional 
resources to be allocated and freed. The freeing of resources may not be
 instantaneously reflected in the charging algorithm used by the 
provider, and that charging algorithm also needs to be considered when 
allocating or freeing resources.</p>
<h4 id="ch26lev2sec17">Availability</h4>
<p class="noindent">The cloud is assumed to be always available. But 
everything can fail. A virtual machine, for example, is hosted on a 
physical machine that can fail. The virtual <a id="page_522"></a>network is less likely to fail, but it too is fallible. It behooves the architect of a system to plan for failure.</p>
<p class="indent">The service-level agreement that Amazon provides for 
its EC2 cloud service provides a 99.95 percent guarantee of service. 
There are two ways of looking at that number: (1) That is a high number.
 You as an architect do not need to worry about failure. (2) That number
 indicates that the service may be unavailable for .05 percent of the 
time. You as an architect need to plan for that .05 percent.</p>
<p class="indent">Netflix is a company that streams videos to home 
television sets, and its reliability is an important business asset. 
Netflix also hosts much of its operation on Amazon EC2. On April 21, 
2011, Amazon EC2 suffered a four-day sporadic outage. Netflix customers,
 however, were unaware of any problem.</p>
<p class="indent">Some of the things that Netflix did to promote 
availability that served them well during that period were reported in 
their tech blog. We discussed their Simian Army in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch10.html#ch10">Chapter 10</a>. Some of the other things they did were applications of availability tactics that we discussed in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch05.html#ch05">Chapter 5</a>.</p>
<p class="indenthangingB">• <em>Stateless services.</em> Netflix 
services are designed such that any service instance can serve any 
request in a timely fashion, so if a server fails, requests can be 
routed to another service instance. This is an application of the spare 
tactic, because the other service instance acts as a spare.</p>
<p class="indenthangingB">• <em>Data stored across zones.</em> Amazon 
provides what they call “availability zones,” which are distinct data 
centers. Netflix ensured that there were multiple redundant hot copies 
of the data spread across zones. Failures were retried in another zone, 
or a hot standby was invoked. This is an example of the active 
redundancy tactic.</p>
<p class="indenthangingB">• <em>Graceful degradation.</em> The general principles for dealing with failure are applications of the degradation or the removal from service tactic:</p>
<p class="indenthangingBB">• Fail fast: Set aggressive timeouts such that failing components don’t make the entire system crawl to a halt.</p>
<p class="indenthangingBB">• Fallbacks: Each feature is designed to degrade or fall back to a lower quality representation.</p>
<p class="indenthangingBB">• Feature removal: If a feature is noncritical, then if it is slow it may be removed from any given page.</p>
<div class="sidebar"><hr>
<p class="title"><a id="ch26sb01"></a>The CAP Theorem</p>
<p class="sb-noindent">The CAP theorem—created by Eric Brewer at UC 
Berkeley—emerged over a decade ago. Unlike most theories postulated by 
academics, this one did not sink into obscurity but rather has grown in 
renown and influence since then. The theory states that there are three 
important properties of a distributed system managing shared data. These
 are the following:</p>
<p class="indenthangingB"><a id="page_523"></a>• Consistency (C): the data will be consistent throughout the distributed system.</p>
<p class="indenthangingB">• Availability (A): the data will be highly available.</p>
<p class="indenthangingB">• Partitioning (P): the system will tolerate network partitioning.</p>
<p class="sb-indent">And the theory further states that no system can 
achieve all of these properties simultaneously; the best we can hope for
 is to satisfy two out of three while sacrificing (to some extent) the 
third property. Brewer explains it thus:</p>
<p class="blockquote"><em>The easiest way to understand CAP is to think 
of two nodes on opposite sides of a partition. Allowing at least one 
node to update state will cause the nodes to become inconsistent, thus 
forfeiting C. Likewise, if the choice is to preserve consistency, one 
side of the partition must act as if it is unavailable, thus forfeiting 
A. Only when nodes communicate is it possible to preserve both 
consistency and availability, thereby forfeiting P.</em></p>
<p class="sb-indent">In fact, there is really another important facet to
 the CAP theorem that has come to dominate the engineering challenge: 
latency. It wasn’t part of the original acronym (although CLAP is 
certainly catchy), but a concern for latency now infuses much of the 
discussion of the tradeoffs in implementing NoSQL databases.</p>
<p class="sb-indent">Creators of large-scale distributed NoSQL databases
 are constantly faced with tradeoffs. These days no one believes that 
you simply choose two of the three properties of CAP; the decisions are 
far richer and more subtle than that. For example, designers of these 
systems like to speak of “eventual consistency”—partitions are allowed 
to become inconsistent on a regular basis, but with bounds that are 
carefully engineered and monitored. They might want to specify that no 
more than <em>x</em> percent of the data should be stale at any given time, and it should not take more than <em>y</em>
 seconds to restore consistency (on average, or in the worst case). 
Another common tradeoff seen in practice is that availability and 
latency are typically favored over consistency. That is, a Facebook user
 should get quick response from the system, even if their newsfeed is 
slightly stale.</p>
<p class="sb-indent">All of this adds complexity to the system. The 
designer has to choose between faster/less consistent and slower/more 
consistent (as well as a host of other quality issues). And the 
mechanisms for achieving eventual consistency—caching, replication, 
message retries, timeouts, and so forth—are themselves nontrivial. 
Consistency, partitioning, latency, and availability are four qualities 
that can be traded off with NoSQL databases. In addition, other quality 
attributes—interoperability, security, and so forth—also add complexity,
 and so the tradeoffs involved can get more and more complicated.</p>
<p class="sb-indent">Alas, this is, increasingly, the world that we live
 in. Systems with global reach and enormous bases of distributed data 
are not going away anytime soon. So as architects we need to be prepared
 to deal with tradeoffs and complexities for the foreseeable future.</p>
<p class="attribution">—<em>RK</em></p>
<hr></div>
<h3 id="ch26lev1sec7"><a id="page_524"></a>26.7. Summary</h3>
<p class="noindent">The cloud has become a viable alternative for the 
hosting of data centers primarily for economic reasons. It provides an 
elastic set of resources through the use of virtual machines, virtual 
networks, and virtual file systems.</p>
<p class="indent">The cloud can be used to provide infrastructure, platforms, or services. Each of these has its own characteristics.</p>
<p class="indent">NoSQL database systems arose in reaction to the 
overhead introduced by large relational database management systems. 
NoSQL database systems frequently use a data model based on key-value or
 documents and do not provide support for common database services such 
as transactions.</p>
<p class="indent">Architecting in the cloud means that the architect 
should pay attention to specific aspects of quality attributes that are 
substantially different in cloud environments, namely: performance, 
availability, and security.</p>
<h3 id="ch26lev1sec8">26.8. For Further Reading</h3>
<p class="noindent"><em>Dealers of Lightning: Xerox PARC and the Dawn of the Computer Age</em> <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_087">[Hiltzik 00]</a>
 has a discussion of time-sharing and covers the technologies and the 
personalities involved in the development of the modern personal 
workstation.</p>
<p class="indent">The economics of the cloud are described in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_085">[Harms 10]</a>.</p>
<p class="indent">The Computer Measurement Group (CMG) is a 
not-for-profit worldwide organization that provides measurement and 
forecasting of various quantitative aspects of computer usage. Their 
measurements of the overhead due to virtualization can be found at <a href="http://www.cmg.org/measureit/issues/mit39/m_39_1.html">www.cmg.org/measureit/issues/mit39/m_39_1.html</a>.</p>
<p class="indent">If you want to learn more about TCP/IP and NAT, you can find a discussion at <a href="http://www.ipcortex.co.uk/wp/fw.rhtm">www.ipcortex.co.uk/wp/fw.rhtm</a>.</p>
<p class="indent">The BigTable system is described in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_045">[Chang 06]</a>.</p>
<p class="indent">Netflix maintains a tech blog that is almost entirely focused on cloud issues. It can be found at <a href="http://techblog.netflix.com/">techblog.netflix.com</a>.</p>
<p class="indent">The home page for MongoDB is <a href="http://www.mongodb.org/display/DOCS/Home">www.mongodb.org/display/DOCS/Home</a> and for HBase is <a href="http://hbase.apache.org/">hbase.apache.org</a>.</p>
<p class="indent">Michael Stonebraker is a database expert who has 
written extensively comparing NoSQL systems with RDBMSs. Some of his 
writings are <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_178">[Stonebraker 09]</a>, <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_179">[Stonebraker 10a]</a>, <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_181">[Stonebraker 11]</a>, and <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_180">[Stonebraker 10b]</a>.</p>
<p class="indent">Eric Brewer has provided a nice overview of the issues surrounding the CAP theorem for today’s cloud-based systems: <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_034">[Brewer 12]</a>.</p>
<h3 id="ch26lev1sec9"><a id="page_525"></a>26.9. Discussion Questions</h3>
<p class="question"><strong>1.</strong> “Service-oriented or cloud-based
 systems cannot meet hard-real-time requirements because it’s impossible
 to guarantee how long a service will take to complete.” Do you think 
this statement is true or false? In either case, identify the one or two
 categories of design decisions that are most responsible for the 
correctness (or incorrectness) of the statement.</p>
<p class="question"><strong>2.</strong> “Using the cloud assumes your 
application is service oriented.” Do you think this is true or false? 
Find some examples that would support that statement and, if it is not 
universally true, find some that would falsify it.</p>
<p class="question"><strong>3.</strong> Netflix discussed their movement
 from Oracle to SimpleDB on their tech blog. They also discussed moving 
from SimpleDB to Cassandra. Describe their rationale for these two 
moves.</p>
<p class="question"><strong>4.</strong> Netflix also describes their 
Simian Army in their tech blog. Which elements of the Simian Army could 
be offered as a SaaS? What would the design of such a SaaS look like?</p>
<p class="question"><strong>5.</strong> Develop the “Hello World” application on an IaaS and on a PaaS.</p>
<div class="annotator-outer annotator-viewer annotator-hide viewer">
  <ul class="annotator-widget annotator-listing"></ul>
</div><div class="annotator-editor-wrapper"><div class="annotator-outer annotator-editor annotator-hide">
  <h3 class="title">Highlight</h3><form class="annotator-widget">
    <ul class="annotator-listing"><li class="annotator-item"><textarea maxlength="750" placeholder="Add a note (optional)" id="annotator-field-19"></textarea></li></ul>
    <div class="annotator-controls">
      <a href="#cancel" class="annotator-cancel button">Cancel</a>
<a href="#save" class="annotator-save annotator-focus button positive">Save</a>
    </div>
  </form>
</div></div><div style="display: none;" class="annotator-adder"><button><span></span></button></div></div></div>



  <div class="t-sbo-prev sbo-prev sbo-nav-bottom">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/part05.html" class="prev nav-link">
      
          <span aria-hidden="true" class="pagination-label t-prev-label">Prev</span>
          <span class="visuallyhidden">Previous Chapter</span>
          <div class="pagination-title t-prev-title">Part Five: The Brave New World</div>
        </a>
    
  
  </div>

  <div class="t-sbo-next sbo-next sbo-nav-bottom">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch27.html" class="next nav-link">
      
          <span aria-hidden="true" class="pagination-label t-next-label">Next</span>
          <span class="visuallyhidden">Next Chapter</span>
          <div class="pagination-title t-next-title">27. Architectures for the Edge</div>
        </a>
    
  
  </div>

</section>
    <div class="reading-controls-bottom">
      <ul class="interface-controls js-bitlist">
        <li class="queue-control">
            <button title="Add to Queue" aria-label="Add to Queue" data-for-analytics="9780132942799:ch26.html" type="button" class="rec-fav ss-queue js-queue js-current-chapter-queue" data-queue-endpoint="/api/v1/book/9780132942799/chapter/ch26.html">
      <span>Add to Queue</span>
  </button>
        </li>
      </ul>
    </div>
  </div>
  <div class="js-related-container related"></div>
<section class="sbo-saved-archives"></section>



          
          
  





    
    
      <div id="js-subscribe-nag" class="subscribe-nag clearfix trial-panel  collapsed slideUp">
        <a href="#" class="js-toggle-nag ss-navigateup" title="Toggle open or close footer"></a>
        <div class="sample-message">
          <p class="usage-data t-collapsed-text">Enjoy Safari? 
            <a href="https://www.safaribooksonline.com/subscribe/">
              Subscribe Today
              
            </a>
          </p>
          

        <div class="expanded">
          <h2>You have 10 days left in your trial, Aejunknaja. </h2>
          <p class="t-expanded-text">Safari is your trusted guide for building a remarkable career. We hope you've been enjoying your trial—ready to join?</p>
          <a href="https://www.safaribooksonline.com/subscribe/" class="bigbutton positive">
            Subscribe Today
            
          </a>
          
            <footer style="padding-bottom: 69.2px;" class="pagefoot js-pagefoot">
    <div class="wrapper">
      <a href="https://www.safaribooksonline.com/" id="logo">Safari</a>
      <nav>
        <a href="https://www.safaribooksonline.com/public/support" class="full-support">Support</a> /
        <a href="https://www.safaribooksonline.com/contact/">Contact Us</a> /
        <a href="https://www.safaribooksonline.com/blog/">Blog</a>
      </nav>
      <div id="legal">
        <ul>
          <li>© 2016 <a class="copyright" href="https://www.safaribooksonline.com/">Safari</a> <br class="mobile-support"> <a href="https://www.safaribooksonline.com/terms/">Terms of Service</a> </li>
          <li><a href="https://www.safaribooksonline.com/membership-agreement/">Membership Agreement</a></li>
          <li><a href="https://www.safaribooksonline.com/privacy/">Privacy Policy</a></li>
        </ul>
      </div>
    </div>
  </footer>

        </div>
      </div>
    </div>

    
    



        
      </div>
      



  <footer style="padding-bottom: 69.2px;" class="pagefoot t-pagefoot">
    <a style="display: none;" href="#" class="icon-up"><div class="visuallyhidden">Back to top</div></a>
    <ul class="js-footer-nav">
      
        <li><a class="t-recommendations-footer" href="https://www.safaribooksonline.com/r/">Recommended</a></li>
      
      <li><a class="t-queue-footer" href="https://www.safaribooksonline.com/s/">Queue</a></li>
      
        <li><a class="t-recent-footer" href="https://www.safaribooksonline.com/recent/">Recent</a></li>
        <li><a class="t-topics-footer" href="https://www.safaribooksonline.com/topics?q=*&amp;limit=21">Topics</a></li>
      
      
        <li><a class="t-tutorials-footer" href="https://www.safaribooksonline.com/tutorials/">Tutorials</a></li>
      
      <li><a class="t-settings-footer js-settings" href="https://www.safaribooksonline.com/u/">Settings</a></li>
      <li><a href="https://www.safaribooksonline.com/blog/">Blog</a></li>
      <li class="full-support"><a href="https://www.safaribooksonline.com/public/support">Support</a></li>
      <li><a href="https://community.safaribooksonline.com/">Feedback</a></li>
      <li><a href="https://www.safaribooksonline.com/accounts/logout/">Sign Out</a></li>
    </ul>
    <span class="copyright">© 2016 <a href="https://www.safaribooksonline.com/" target="_blank">Safari</a>.</span>
    <br class="mobile-support">
    <a href="https://www.safaribooksonline.com/terms/">Terms of Service</a> /
    <a href="https://www.safaribooksonline.com/privacy/">Privacy Policy</a>
  </footer>

<script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"applicationTime":146,"agent":"js-agent.newrelic.com/nr-768.min.js","applicationID":"3275661","errorBeacon":"bam.nr-data.net","beacon":"bam.nr-data.net","queueTime":0,"transactionName":"YgdaZ0NSW0cEB0RdWltNfkZfUEFdCgofXFBHDVYdR1pQQxZeRl1QQj1aWkU=","licenseKey":"510f1a6865"}</script>


    

    <script src="26.%20Architecture%20in%20the%20Cloud_files/a" charset="utf-8"></script>
    <script src="26.%20Architecture%20in%20the%20Cloud_files/a_002" charset="utf-8"></script>
    
      <script src="26.%20Architecture%20in%20the%20Cloud_files/require.js"></script>
      <script>
        require(["/static/js/pages/_config.1113c6153f5e.js"], function (common) {
          require(["/static/js/nest/_init.1198db94d0a6.js"]);
        });
      </script>
    
    
  
  
  
  <script> // <![CDATA[
    var g = {
      position_cache: {
        
          "chapter": "/api/v1/book/9780132942799/chapter/ch10.html",
          "book_id": "9780132942799",
          "chapter_uri": "ch10.html",
          "position": 0,
          "user_uuid": "10f9e41b-1414-4ac1-bc80-973364aac808",
          "next_chapter_uri": "/library/view/software-architecture-in/9780132942799/ch11.html"
        
      },
      title: "Software Architecture in Practice, Third Edition",
      author_list: "Rick Kazman, Paul Clements, Len Bass",
      format: "book",
      source: "application/epub+zip",
      is_system_book: true,
      is_public: false,
      loaded_from_server: true,
      allow_scripts: false,
      has_mathml: false
    };
    // ]]>
  </script>
  
  


  
  <script>
    
      
        

        
          
            window.PUBLIC_ANNOTATIONS = true;
          
        

      

      
        window.MOBILE_PUBLIC_ANNOTATIONS = false;
      

    

  </script>

  
    
  


    
    


  

<div style="top: 200px; left: 1450px;" class="font-flyout"><div class="font-controls-panel">
	<div class="nightmodes">
		<ul>
			<li class="day"><a href="#" id="day-mode" title="Day Mode">
				<i class="fa fa-sun-o"></i>
				<span>Day Mode</span></a></li>
			<li class="cloudy"><a href="#" id="cloudy-mode" title="Cloudy Mode">
				<i class="fa fa-cloud"></i>
				<span>Cloud Mode</span>
			</a></li>
			<li class="night"><a href="#" id="night-mode" title="Night Mode">
				<i class="fa fa-moon-o"></i>
				<span>Night Mode</span>
			</a></li>
		</ul>
	</div>

	<div class="font-resizer resizer">
		<div class="draggable-containment-wrapper">
			<i class="fa fa-font left"></i>
			<span style="width: 50%;" class="filler"></span>
			<div style="position: relative; left: 80px;" id="js-font-size-draggable" class="draggable ui-widget-content ui-draggable ui-draggable-handle"></div>
			<i class="fa fa-font right"></i>
		</div>
	</div>

	<div class="column-resizer resizer">
		<div class="draggable-containment-wrapper">
			<i class="fa fa-compress left"></i>
			<span style="width: 50%;" class="filler"></span>
			<div style="position: relative; left: 80px;" id="js-column-size-draggable" class="draggable ui-widget-content ui-draggable ui-draggable-handle"></div>
			<i class="fa fa-expand right"></i>
		</div>
	</div>

	<a id="reset" class="button" href="#">Reset</a>
</div>
</div><div class="annotator-notice"></div></body></html>