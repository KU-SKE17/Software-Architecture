<!--[if IE]><![endif]-->
<!DOCTYPE html>
<!--[if IE 8]><html class="no-js ie8 oldie" lang="en" prefix="og: http://ogp.me/ns/# og:book: http://ogp.me/ns/book# og:video: http://ogp.me/ns/video#"

    
        itemscope itemtype="http://schema.org/Book http://schema.org/ItemPage"" data-login-url="/accounts/login/"
data-offline-url="/"
data-url="/library/view/software-architecture-in/9780132942799/ch10.html"
data-csrf-cookie="csrfsafari"
data-highlight-privacy=""


  data-user-id="640574"
  data-user-uuid="10f9e41b-1414-4ac1-bc80-973364aac808"
  data-username="aejunknaja"
  data-account-type="Trial"
  
  data-activated-trial-date="01/12/2016"
  


  data-archive="9780132942799"
  data-publishers="Addison-Wesley Professional"



  data-htmlfile-name="ch10.html"
  data-epub-title="Software Architecture in Practice, Third Edition" data-debug=0 data-testing=0><![endif]-->
<!--[if gt IE 8]><!-->
<html style="" class=" js flexbox flexboxlegacy no-touch no-websqldatabase indexeddb history csscolumns csstransforms localstorage sessionstorage applicationcache svg inlinesvg no-zoom" prefix="og: http://ogp.me/ns/# og:book: http://ogp.me/ns/book# og:video: http://ogp.me/ns/video#" itemscope="" itemtype="http://schema.org/Book http://schema.org/ItemPage" "="" data-login-url="/accounts/login/" data-offline-url="/" data-url="/library/view/software-architecture-in/9780132942799/ch10.html" data-csrf-cookie="csrfsafari" data-highlight-privacy="" data-user-id="640574" data-user-uuid="10f9e41b-1414-4ac1-bc80-973364aac808" data-username="aejunknaja" data-account-type="Trial" data-activated-trial-date="01/12/2016" data-archive="9780132942799" data-publishers="Addison-Wesley Professional" data-htmlfile-name="ch10.html" data-epub-title="Software Architecture in Practice, Third Edition" data-debug="0" data-testing="0" lang="en"><!--<![endif]--><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta charset="utf-8"><meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"><meta name="author" content="Safari Books Online"><meta name="format-detection" content="telephone=no"><meta http-equiv="cleartype" content="on"><meta name="HandheldFriendly" content="True"><meta name="MobileOptimized" content="320"><meta name="apple-itunes-app" content="app-id=881697395, app-argument=safaridetail://9780132942799"><meta name="viewport" content="width=device-width, minimum-scale=1.0, initial-scale=1.0, maximum-scale=1.0"><meta property="twitter:account_id" content="4503599627559754"><script src="18.%20Documenting%20Software%20Architectures_files/510f1a6865" type="text/javascript"></script><script src="18.%20Documenting%20Software%20Architectures_files/nr-768.js"></script><script src="18.%20Documenting%20Software%20Architectures_files/linkid.js" async="" type="text/javascript"></script><script src="18.%20Documenting%20Software%20Architectures_files/analytics.js" async=""></script><script type="text/javascript">(window.NREUM||(NREUM={})).loader_config={xpid:"VQQDUVVVGwACU1RUAQA="};window.NREUM||(NREUM={}),__nr_require=function(t,e,n){function r(n){if(!e[n]){var o=e[n]={exports:{}};t[n][0].call(o.exports,function(e){var o=t[n][1][e];return r(o||e)},o,o.exports)}return e[n].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<n.length;o++)r(n[o]);return r}({QJf3ax:[function(t,e){function n(t){function e(e,n,a){t&&t(e,n,a),a||(a={});for(var c=s(e),f=c.length,u=i(a,o,r),d=0;f>d;d++)c[d].apply(u,n);return u}function a(t,e){f[t]=s(t).concat(e)}function s(t){return f[t]||[]}function c(){return n(e)}var f={};return{on:a,emit:e,create:c,listeners:s,_events:f}}function r(){return{}}var o="nr@context",i=t("gos");e.exports=n()},{gos:"7eSDFh"}],ee:[function(t,e){e.exports=t("QJf3ax")},{}],3:[function(t){function e(t){try{i.console&&console.log(t)}catch(e){}}var n,r=t("ee"),o=t(1),i={};try{n=localStorage.getItem("__nr_flags").split(","),console&&"function"==typeof console.log&&(i.console=!0,-1!==n.indexOf("dev")&&(i.dev=!0),-1!==n.indexOf("nr_dev")&&(i.nrDev=!0))}catch(a){}i.nrDev&&r.on("internal-error",function(t){e(t.stack)}),i.dev&&r.on("fn-err",function(t,n,r){e(r.stack)}),i.dev&&(e("NR AGENT IN DEVELOPMENT MODE"),e("flags: "+o(i,function(t){return t}).join(", ")))},{1:24,ee:"QJf3ax"}],4:[function(t){function e(t,e,n,i,s){try{c?c-=1:r("err",[s||new UncaughtException(t,e,n)])}catch(f){try{r("ierr",[f,(new Date).getTime(),!0])}catch(u){}}return"function"==typeof a?a.apply(this,o(arguments)):!1}function UncaughtException(t,e,n){this.message=t||"Uncaught error with no additional information",this.sourceURL=e,this.line=n}function n(t){r("err",[t,(new Date).getTime()])}var r=t("handle"),o=t(6),i=t("ee"),a=window.onerror,s=!1,c=0;t("loader").features.err=!0,t(5),window.onerror=e;try{throw new Error}catch(f){"stack"in f&&(t(1),t(2),"addEventListener"in window&&t(3),window.XMLHttpRequest&&XMLHttpRequest.prototype&&XMLHttpRequest.prototype.addEventListener&&window.XMLHttpRequest&&XMLHttpRequest.prototype&&XMLHttpRequest.prototype.addEventListener&&!/CriOS/.test(navigator.userAgent)&&t(4),s=!0)}i.on("fn-start",function(){s&&(c+=1)}),i.on("fn-err",function(t,e,r){s&&(this.thrown=!0,n(r))}),i.on("fn-end",function(){s&&!this.thrown&&c>0&&(c-=1)}),i.on("internal-error",function(t){r("ierr",[t,(new Date).getTime(),!0])})},{1:11,2:10,3:8,4:12,5:3,6:25,ee:"QJf3ax",handle:"D5DuLP",loader:"G9z0Bl"}],5:[function(t){if(window.addEventListener){var e=t("handle"),n=t("ee");t(1),window.addEventListener("click",function(){e("inc",["ck"])},!1),window.addEventListener("hashchange",function(){e("inc",["hc"])},!1),n.on("pushState-start",function(){e("inc",["ps"])})}},{1:9,ee:"QJf3ax",handle:"D5DuLP"}],6:[function(t){t("loader").features.ins=!0},{loader:"G9z0Bl"}],7:[function(t){function e(){}if(window.performance&&window.performance.timing&&window.performance.getEntriesByType){var n=t("ee"),r=t("handle"),o=t(1),i=t(2);t("loader").features.stn=!0,t(3);var a=Event;n.on("fn-start",function(t){var e=t[0];e instanceof a&&(this.bstStart=Date.now())}),n.on("fn-end",function(t,e){var n=t[0];n instanceof a&&r("bst",[n,e,this.bstStart,Date.now()])}),o.on("fn-start",function(t,e,n){this.bstStart=Date.now(),this.bstType=n}),o.on("fn-end",function(t,e){r("bstTimer",[e,this.bstStart,Date.now(),this.bstType])}),i.on("fn-start",function(){this.bstStart=Date.now()}),i.on("fn-end",function(t,e){r("bstTimer",[e,this.bstStart,Date.now(),"requestAnimationFrame"])}),n.on("pushState-start",function(){this.time=Date.now(),this.startPath=location.pathname+location.hash}),n.on("pushState-end",function(){r("bstHist",[location.pathname+location.hash,this.startPath,this.time])}),"addEventListener"in window.performance&&(window.performance.addEventListener("webkitresourcetimingbufferfull",function(){r("bstResource",[window.performance.getEntriesByType("resource")]),window.performance.webkitClearResourceTimings()},!1),window.performance.addEventListener("resourcetimingbufferfull",function(){r("bstResource",[window.performance.getEntriesByType("resource")]),window.performance.clearResourceTimings()},!1)),document.addEventListener("scroll",e,!1),document.addEventListener("keypress",e,!1),document.addEventListener("click",e,!1)}},{1:11,2:10,3:9,ee:"QJf3ax",handle:"D5DuLP",loader:"G9z0Bl"}],8:[function(t,e){function n(t){i.inPlace(t,["addEventListener","removeEventListener"],"-",r)}function r(t){return t[1]}var o=t("ee").create(),i=t(1)(o),a=t("gos");if(e.exports=o,n(window),"getPrototypeOf"in Object){for(var s=document;s&&!s.hasOwnProperty("addEventListener");)s=Object.getPrototypeOf(s);s&&n(s);for(var c=XMLHttpRequest.prototype;c&&!c.hasOwnProperty("addEventListener");)c=Object.getPrototypeOf(c);c&&n(c)}else XMLHttpRequest.prototype.hasOwnProperty("addEventListener")&&n(XMLHttpRequest.prototype);o.on("addEventListener-start",function(t,e){function n(){return s}if(t[1]){var r=t[1];if("function"==typeof r){var s=a(r,"nr@wrapped",function(){return i(r,"fn-",n,r.name||"anonymous")});this.wrapped=t[1]=s,o.emit("initEventContext",[t,e],this.wrapped)}else"function"==typeof r.handleEvent&&i.inPlace(r,["handleEvent"],"fn-")}}),o.on("removeEventListener-start",function(t){var e=this.wrapped;e&&(t[1]=e)})},{1:26,ee:"QJf3ax",gos:"7eSDFh"}],9:[function(t,e){var n=t("ee").create(),r=t(1)(n);e.exports=n,r.inPlace(window.history,["pushState","replaceState"],"-")},{1:26,ee:"QJf3ax"}],10:[function(t,e){var n=t("ee").create(),r=t(1)(n);e.exports=n,r.inPlace(window,["requestAnimationFrame","mozRequestAnimationFrame","webkitRequestAnimationFrame","msRequestAnimationFrame"],"raf-"),n.on("raf-start",function(t){t[0]=r(t[0],"fn-")})},{1:26,ee:"QJf3ax"}],11:[function(t,e){function n(t,e,n){t[0]=i(t[0],"fn-",null,n)}function r(t,e,n){function r(){return a}this.ctx={};var a={"nr@context":this.ctx};o.emit("initTimerContext",[t,n],a),t[0]=i(t[0],"fn-",r,n)}var o=t("ee").create(),i=t(1)(o);e.exports=o,i.inPlace(window,["setTimeout","setImmediate"],"setTimer-"),i.inPlace(window,["setInterval"],"setInterval-"),i.inPlace(window,["clearTimeout","clearImmediate"],"clearTimeout-"),o.on("setInterval-start",n),o.on("setTimer-start",r)},{1:26,ee:"QJf3ax"}],12:[function(t,e){function n(){f.inPlace(this,p,"fn-",o)}function r(t,e){f.inPlace(e,["onreadystatechange"],"fn-")}function o(t,e){return e}function i(t,e){for(var n in t)e[n]=t[n];return e}var a=t("ee").create(),s=t(1),c=t(2),f=c(a),u=c(s),d=window.XMLHttpRequest,p=["onload","onerror","onabort","onloadstart","onloadend","onprogress","ontimeout"];e.exports=a,window.XMLHttpRequest=function(t){var e=new d(t);try{a.emit("new-xhr",[],e),e.hasOwnProperty("addEventListener")&&u.inPlace(e,["addEventListener","removeEventListener"],"-",o),e.addEventListener("readystatechange",n,!1)}catch(r){try{a.emit("internal-error",[r])}catch(i){}}return e},i(d,XMLHttpRequest),XMLHttpRequest.prototype=d.prototype,f.inPlace(XMLHttpRequest.prototype,["open","send"],"-xhr-",o),a.on("send-xhr-start",r),a.on("open-xhr-start",r)},{1:8,2:26,ee:"QJf3ax"}],13:[function(t){function e(t){var e=this.params,r=this.metrics;if(!this.ended){this.ended=!0;for(var i=0;c>i;i++)t.removeEventListener(s[i],this.listener,!1);if(!e.aborted){if(r.duration=(new Date).getTime()-this.startTime,4===t.readyState){e.status=t.status;var a=t.responseType,f="arraybuffer"===a||"blob"===a||"json"===a?t.response:t.responseText,u=n(f);if(u&&(r.rxSize=u),this.sameOrigin){var d=t.getResponseHeader("X-NewRelic-App-Data");d&&(e.cat=d.split(", ").pop())}}else e.status=0;r.cbTime=this.cbTime,o("xhr",[e,r,this.startTime])}}}function n(t){if("string"==typeof t&&t.length)return t.length;if("object"!=typeof t)return void 0;if("undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer&&t.byteLength)return t.byteLength;if("undefined"!=typeof Blob&&t instanceof Blob&&t.size)return t.size;if("undefined"!=typeof FormData&&t instanceof FormData)return void 0;try{return JSON.stringify(t).length}catch(e){return void 0}}function r(t,e){var n=i(e),r=t.params;r.host=n.hostname+":"+n.port,r.pathname=n.pathname,t.sameOrigin=n.sameOrigin}if(window.XMLHttpRequest&&XMLHttpRequest.prototype&&XMLHttpRequest.prototype.addEventListener&&!/CriOS/.test(navigator.userAgent)){t("loader").features.xhr=!0;var o=t("handle"),i=t(2),a=t("ee"),s=["load","error","abort","timeout"],c=s.length,f=t(1),u=window.XMLHttpRequest;t(4),t(3),a.on("new-xhr",function(){this.totalCbs=0,this.called=0,this.cbTime=0,this.end=e,this.ended=!1,this.xhrGuids={}}),a.on("open-xhr-start",function(t){this.params={method:t[0]},r(this,t[1]),this.metrics={}}),a.on("open-xhr-end",function(t,e){"loader_config"in NREUM&&"xpid"in NREUM.loader_config&&this.sameOrigin&&e.setRequestHeader("X-NewRelic-ID",NREUM.loader_config.xpid)}),a.on("send-xhr-start",function(t,e){var r=this.metrics,o=t[0],i=this;if(r&&o){var f=n(o);f&&(r.txSize=f)}this.startTime=(new Date).getTime(),this.listener=function(t){try{"abort"===t.type&&(i.params.aborted=!0),("load"!==t.type||i.called===i.totalCbs&&(i.onloadCalled||"function"!=typeof e.onload))&&i.end(e)}catch(n){try{a.emit("internal-error",[n])}catch(r){}}};for(var u=0;c>u;u++)e.addEventListener(s[u],this.listener,!1)}),a.on("xhr-cb-time",function(t,e,n){this.cbTime+=t,e?this.onloadCalled=!0:this.called+=1,this.called!==this.totalCbs||!this.onloadCalled&&"function"==typeof n.onload||this.end(n)}),a.on("xhr-load-added",function(t,e){var n=""+f(t)+!!e;this.xhrGuids&&!this.xhrGuids[n]&&(this.xhrGuids[n]=!0,this.totalCbs+=1)}),a.on("xhr-load-removed",function(t,e){var n=""+f(t)+!!e;this.xhrGuids&&this.xhrGuids[n]&&(delete this.xhrGuids[n],this.totalCbs-=1)}),a.on("addEventListener-end",function(t,e){e instanceof u&&"load"===t[0]&&a.emit("xhr-load-added",[t[1],t[2]],e)}),a.on("removeEventListener-end",function(t,e){e instanceof u&&"load"===t[0]&&a.emit("xhr-load-removed",[t[1],t[2]],e)}),a.on("fn-start",function(t,e,n){e instanceof u&&("onload"===n&&(this.onload=!0),("load"===(t[0]&&t[0].type)||this.onload)&&(this.xhrCbStart=(new Date).getTime()))}),a.on("fn-end",function(t,e){this.xhrCbStart&&a.emit("xhr-cb-time",[(new Date).getTime()-this.xhrCbStart,this.onload,e],e)})}},{1:"XL7HBI",2:14,3:12,4:8,ee:"QJf3ax",handle:"D5DuLP",loader:"G9z0Bl"}],14:[function(t,e){e.exports=function(t){var e=document.createElement("a"),n=window.location,r={};e.href=t,r.port=e.port;var o=e.href.split("://");return!r.port&&o[1]&&(r.port=o[1].split("/")[0].split("@").pop().split(":")[1]),r.port&&"0"!==r.port||(r.port="https"===o[0]?"443":"80"),r.hostname=e.hostname||n.hostname,r.pathname=e.pathname,r.protocol=o[0],"/"!==r.pathname.charAt(0)&&(r.pathname="/"+r.pathname),r.sameOrigin=!e.hostname||e.hostname===document.domain&&e.port===n.port&&e.protocol===n.protocol,r}},{}],15:[function(t,e){function n(t){return function(){r(t,[(new Date).getTime()].concat(i(arguments)))}}var r=t("handle"),o=t(1),i=t(2);"undefined"==typeof window.newrelic&&(newrelic=window.NREUM);var a=["setPageViewName","addPageAction","setCustomAttribute","finished","addToTrace","inlineHit","noticeError"];o(a,function(t,e){window.NREUM[e]=n("api-"+e)}),e.exports=window.NREUM},{1:24,2:25,handle:"D5DuLP"}],gos:[function(t,e){e.exports=t("7eSDFh")},{}],"7eSDFh":[function(t,e){function n(t,e,n){if(r.call(t,e))return t[e];var o=n();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(t,e,{value:o,writable:!0,enumerable:!1}),o}catch(i){}return t[e]=o,o}var r=Object.prototype.hasOwnProperty;e.exports=n},{}],D5DuLP:[function(t,e){function n(t,e,n){return r.listeners(t).length?r.emit(t,e,n):void(r.q&&(r.q[t]||(r.q[t]=[]),r.q[t].push(e)))}var r=t("ee").create();e.exports=n,n.ee=r,r.q={}},{ee:"QJf3ax"}],handle:[function(t,e){e.exports=t("D5DuLP")},{}],XL7HBI:[function(t,e){function n(t){var e=typeof t;return!t||"object"!==e&&"function"!==e?-1:t===window?0:i(t,o,function(){return r++})}var r=1,o="nr@id",i=t("gos");e.exports=n},{gos:"7eSDFh"}],id:[function(t,e){e.exports=t("XL7HBI")},{}],G9z0Bl:[function(t,e){function n(){var t=p.info=NREUM.info,e=f.getElementsByTagName("script")[0];if(t&&t.licenseKey&&t.applicationID&&e){s(d,function(e,n){e in t||(t[e]=n)});var n="https"===u.split(":")[0]||t.sslForHttp;p.proto=n?"https://":"http://",a("mark",["onload",i()]);var r=f.createElement("script");r.src=p.proto+t.agent,e.parentNode.insertBefore(r,e)}}function r(){"complete"===f.readyState&&o()}function o(){a("mark",["domContent",i()])}function i(){return(new Date).getTime()}var a=t("handle"),s=t(1),c=window,f=c.document;t(2);var u=(""+location).split("?")[0],d={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-768.min.js"},p=e.exports={offset:i(),origin:u,features:{}};f.addEventListener?(f.addEventListener("DOMContentLoaded",o,!1),c.addEventListener("load",n,!1)):(f.attachEvent("onreadystatechange",r),c.attachEvent("onload",n)),a("mark",["firstbyte",i()])},{1:24,2:15,handle:"D5DuLP"}],loader:[function(t,e){e.exports=t("G9z0Bl")},{}],24:[function(t,e){function n(t,e){var n=[],o="",i=0;for(o in t)r.call(t,o)&&(n[i]=e(o,t[o]),i+=1);return n}var r=Object.prototype.hasOwnProperty;e.exports=n},{}],25:[function(t,e){function n(t,e,n){e||(e=0),"undefined"==typeof n&&(n=t?t.length:0);for(var r=-1,o=n-e||0,i=Array(0>o?0:o);++r<o;)i[r]=t[e+r];return i}e.exports=n},{}],26:[function(t,e){function n(t){return!(t&&"function"==typeof t&&t.apply&&!t[i])}var r=t("ee"),o=t(1),i="nr@original",a=Object.prototype.hasOwnProperty;e.exports=function(t){function e(t,e,r,a){function nrWrapper(){var n,i,s,f;try{i=this,n=o(arguments),s=r&&r(n,i)||{}}catch(d){u([d,"",[n,i,a],s])}c(e+"start",[n,i,a],s);try{return f=t.apply(i,n)}catch(p){throw c(e+"err",[n,i,p],s),p}finally{c(e+"end",[n,i,f],s)}}return n(t)?t:(e||(e=""),nrWrapper[i]=t,f(t,nrWrapper),nrWrapper)}function s(t,r,o,i){o||(o="");var a,s,c,f="-"===o.charAt(0);for(c=0;c<r.length;c++)s=r[c],a=t[s],n(a)||(t[s]=e(a,f?s+o:o,i,s))}function c(e,n,r){try{t.emit(e,n,r)}catch(o){u([o,e,n,r])}}function f(t,e){if(Object.defineProperty&&Object.keys)try{var n=Object.keys(t);return n.forEach(function(n){Object.defineProperty(e,n,{get:function(){return t[n]},set:function(e){return t[n]=e,e}})}),e}catch(r){u([r])}for(var o in t)a.call(t,o)&&(e[o]=t[o]);return e}function u(e){try{t.emit("internal-error",e)}catch(n){}}return t||(t=r),e.inPlace=s,e.flag=i,e}},{1:25,ee:"QJf3ax"}]},{},["G9z0Bl",4,13,7,6,5]);</script><link rel="apple-touch-icon" href="https://www.safaribooksonline.com/static/images/apple-touch-icon.dc4dcf1f75e0.png"><link rel="shortcut icon" href="https://www.safaribooksonline.com/favicon.ico" type="image/x-icon"><link href="18.%20Documenting%20Software%20Architectures_files/css.css" rel="stylesheet" type="text/css"><title>18. Documenting Software Architectures - Software Architecture in Practice, Third Edition</title><link rel="stylesheet" href="18.%20Documenting%20Software%20Architectures_files/e4f5174e8e7b.css" type="text/css"><link rel="stylesheet" type="text/css" href="18.%20Documenting%20Software%20Architectures_files/annotator.css"><link rel="stylesheet" href="18.%20Documenting%20Software%20Architectures_files/font-awesome.css"><style type="text/css" title="ibis-book">#sbo-rt-content div{margin-top:4pt;margin-bottom:4pt;margin-right:15pt}#sbo-rt-content h1{margin-top:15pt;margin-bottom:12pt;text-align:center;font-weight:bold}#sbo-rt-content h2{margin-top:7pt;margin-bottom:25pt;text-align:left;font-weight:bold}#sbo-rt-content h3{margin-top:9pt;margin-bottom:8pt;font-weight:bold;text-align:left}#sbo-rt-content h4{margin-top:9pt;margin-bottom:6pt;text-align:left;font-weight:bold}#sbo-rt-content h5{margin-top:9pt;margin-bottom:6pt;font-weight:bold;text-align:left}#sbo-rt-content h6{margin-top:9pt;margin-bottom:6pt;font-weight:bold;text-align:left}#sbo-rt-content .cover{margin-top:2pt;margin-bottom:2pt;text-align:center}#sbo-rt-content .author{margin-top:40pt;font-weight:bold;text-align:center}#sbo-rt-content div.image,#sbo-rt-content img{max-width:99%;max-height:99%}#sbo-rt-content .image{margin-bottom:5pt;text-align:center}#sbo-rt-content .toc-part{margin-top:25pt;margin-bottom:5pt;margin-left:10pt;text-align:left}#sbo-rt-content .toc-chapter{margin-top:10pt;margin-bottom:5pt;margin-left:25pt;text-align:left}#sbo-rt-content .toc-chapter1{margin-top:10pt;margin-bottom:5pt;margin-left:18pt;text-align:left}#sbo-rt-content .toc-section{margin-top:4pt;margin-bottom:4pt;margin-left:55pt;text-align:left}#sbo-rt-content .indexmain{margin-top:2pt;margin-bottom:2pt;text-align:left}#sbo-rt-content .indexmain1{margin-top:18pt;margin-bottom:2pt;text-align:left}#sbo-rt-content .indexsub{margin-top:2pt;margin-bottom:2pt;margin-left:35pt;text-indent:-15pt;text-align:left}#sbo-rt-content .copy{margin-top:8pt;margin-bottom:8pt;text-indent:.024pt}#sbo-rt-content .indent{margin-top:4pt;margin-bottom:5pt;text-indent:18pt;text-align:left}#sbo-rt-content .indenthangingB{margin-top:4pt;margin-bottom:4pt;margin-left:40pt;text-indent:-7pt;text-align:left}#sbo-rt-content .indenthangingBB{margin-top:4pt;margin-bottom:4pt;margin-left:58pt;text-indent:-6.5pt;text-align:left}#sbo-rt-content .indenthangingBBB{margin-top:4pt;margin-bottom:4pt;margin-left:80pt;text-indent:-6pt;text-align:left}#sbo-rt-content .indenthangingBP{margin-top:4pt;margin-bottom:4pt;margin-left:40pt;text-align:left}#sbo-rt-content .indenthangingBP1{margin-top:4pt;margin-bottom:4pt;margin-left:30pt;text-indent:15pt;text-align:left}#sbo-rt-content .tab-caption{font-weight:bold;margin-top:14pt;margin-bottom:8pt;text-align:center;page-break-after:avoid;page-break-inside:avoid}#sbo-rt-content .source{font-size:medium;margin-top:2pt;margin-bottom:2pt;page-break-before:avoid;page-break-inside:avoid;text-align:center}#sbo-rt-content .fig-caption{font-weight:bold;margin-top:4pt;margin-bottom:14pt;text-align:center;page-break-before:avoid;page-break-inside:avoid}#sbo-rt-content .fig-caption2{font-weight:bold;margin-top:4pt;margin-bottom:14pt;text-align:left;page-break-before:avoid;page-break-inside:avoid}#sbo-rt-content .blockquote{margin-top:7pt;margin-bottom:2pt;margin-left:60pt;text-align:left}#sbo-rt-content .attribution{margin-top:2pt;margin-bottom:17pt;margin-right:40pt;text-align:right}#sbo-rt-content .attribution1{margin-top:2pt;margin-bottom:17pt;margin-right:15pt;text-align:right}#sbo-rt-content .attri{margin-left:100pt;margin-right:100pt}#sbo-rt-content .toc-preface{margin-top:5pt;margin-bottom:5pt;margin-left:65pt;text-align:left}#sbo-rt-content .toc-appendix{margin-top:10pt;margin-bottom:5pt;margin-left:55pt;text-align:left}#sbo-rt-content .toc-index{margin-top:10pt;margin-bottom:5pt;margin-left:55pt;text-align:left}#sbo-rt-content .bib{margin-top:10pt;margin-bottom:5pt;margin-left:15pt;text-align:left}#sbo-rt-content .footnote{font-size:small;margin-top:4pt;margin-bottom:4pt;margin-left:20pt;text-indent:-11pt;text-align:left}#sbo-rt-content .pre{font-family:"Courier New";font-size:small;margin-top:5pt;margin-bottom:5pt;margin-left:13pt}#sbo-rt-content .pre1{font-family:"Courier New";font-size:small;margin-top:5pt;margin-bottom:5pt;margin-left:25pt}#sbo-rt-content .codelink{font-size:small;margin-top:6pt;margin-bottom:6pt;font-weight:bold;page-break-after:avoid}#sbo-rt-content .image1{text-align:center;page-break-before:always}#sbo-rt-content div.image1,#sbo-rt-content img{max-width:99%;max-height:99%}#sbo-rt-content code{font-size:small}#sbo-rt-content .edition{font-size:15pt;margin-top:15pt;margin-bottom:15pt;text-align:center;font-weight:bold}#sbo-rt-content .equation{text-align:center}#sbo-rt-content .indenthangingN{margin-top:4pt;margin-bottom:4pt;margin-left:50pt;text-indent:-12pt;text-align:left}#sbo-rt-content .indenthangingNaa{margin-top:4pt;margin-bottom:4pt;margin-left:48pt;text-indent:-11pt;text-align:left}#sbo-rt-content .indenthangingNP1{margin-top:4pt;margin-bottom:4pt;margin-left:30pt;text-align:left}#sbo-rt-content .indenthangingNP{margin-top:4pt;margin-bottom:4pt;margin-left:30pt;text-indent:15pt;text-align:left}#sbo-rt-content .indenthangingN1{margin-top:4pt;margin-bottom:4pt;margin-left:50pt;text-indent:-17.5pt;text-align:left}#sbo-rt-content .indenthangingNB{margin-top:4pt;margin-bottom:4pt;margin-left:75pt;text-indent:-7.5pt;text-align:left}#sbo-rt-content .noindent{margin-top:4pt;margin-bottom:4pt;text-indent:.02pt}#sbo-rt-content .publisher{margin-top:130pt;margin-bottom:2pt;text-align:center}#sbo-rt-content .publishertext{margin-top:6pt;margin-bottom:2pt;text-align:center}#sbo-rt-content .sidebar{font-size:medium;margin-top:6pt;margin-bottom:12pt;margin-left:24pt;margin-right:24pt}#sbo-rt-content .sb-noindent{margin-top:4pt;margin-bottom:4pt;text-indent:.02pt;margin-left:15pt;margin-right:15pt}#sbo-rt-content .sb-indent{margin-top:4pt;margin-bottom:5pt;text-indent:15pt;margin-left:15pt;margin-right:15pt}#sbo-rt-content .title{font-size:110%;margin-top:4pt;margin-bottom:4pt;font-weight:bold;margin-left:7pt;page-break-inside:avoid;page-break-after:avoid}#sbo-rt-content .question{margin-top:4pt;margin-bottom:4pt;margin-left:30pt;text-indent:-12pt;text-align:left}#sbo-rt-content .questiona{margin-top:4pt;margin-bottom:4pt;margin-left:70pt;text-indent:-11.5pt;text-align:left}#sbo-rt-content .questionP{margin-top:4pt;margin-bottom:4pt;margin-left:30pt;text-align:left}#sbo-rt-content .step{margin-top:4pt;margin-bottom:4pt;margin-left:65pt;text-indent:-38pt;text-align:left}#sbo-rt-content .division{font-size:100%;margin-top:4pt;margin-bottom:4pt;font-weight:bold;margin-left:10pt}#sbo-rt-content .question1{margin-top:4pt;margin-bottom:4pt;margin-left:29pt;text-indent:-18pt;text-align:left}#sbo-rt-content .copy1{margin-top:8pt;margin-bottom:8pt;margin-left:24pt;text-align:left;text-indent:.024pt}#sbo-rt-content .copy2{margin-top:8pt;margin-bottom:8pt;font-size:140%;text-align:left;text-indent:.024pt}#sbo-rt-content .copy3{margin-top:8pt;margin-bottom:8pt;font-size:130%;text-align:left;text-indent:.024pt}#sbo-rt-content .imagefir{text-align:center}</style><link rel="canonical" href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch10.html"><meta name="description" content="10. Testability Testing leads to failure, and failure leads to understanding —Burt Rutan Industry estimates indicate that between 30 and 50 percent (or in some cases, even more) of the ... "><meta property="og:title" content="10. Testability"><meta itemprop="isPartOf" content="/library/view/software-architecture-in/9780132942799/"><meta itemprop="name" content="10. Testability"><meta property="og:url" itemprop="url" content="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch10.html"><meta property="og:site_name" content="Safari"><meta property="og:image" itemprop="thumbnailUrl" content="https://www.safaribooksonline.com/library/cover/9780132942799/"><meta property="og:description" itemprop="description" content="10. Testability Testing leads to failure, and failure leads to understanding —Burt Rutan Industry estimates indicate that between 30 and 50 percent (or in some cases, even more) of the ... "><meta itemprop="inLanguage" content="en"><meta itemprop="publisher" content="Addison-Wesley Professional"><meta property="og:type" content="book"><meta property="og:book:isbn" itemprop="isbn" content="9780132942799"><meta property="og:book:author" itemprop="author" content="Rick Kazman"><meta property="og:book:author" itemprop="author" content="Paul Clements"><meta property="og:book:author" itemprop="author" content="Len Bass"><meta property="og:book:tag" itemprop="about" content="Core Programming"><meta name="twitter:card" content="summary"><meta name="twitter:site" content="@safari"><style type="text/css" id="font-styles" data-template="#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-size: &lt;%= font_size %&gt; !important; }"></style><style type="text/css" id="font-family" data-template="#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-family: &lt;%= font_family %&gt; !important; }"></style><style type="text/css" id="column-width" data-template="#sbo-rt-content { max-width: &lt;%= column_width %&gt;% !important; margin: 0 auto !important; }"></style><!--[if lt IE 9]><script src="/static/js/src/respond.min.fa78ffe6f7ba.js"></script><![endif]--><script type="text/javascript" src="18.%20Documenting%20Software%20Architectures_files/ecc99425e988.js" async=""></script><noscript><meta http-equiv="refresh" content="0; url=/library/no-js/" /></noscript><script type="text/javascript">
  (function(i,s,o,g,r,a,m) {
    i['GoogleAnalyticsObject']=r;
    i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();
    a=s.createElement(o),m=s.getElementsByTagName(o)[0];
    a.async=1;
    a.src=g;
    m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  var matches = document.cookie.match(/BrowserCookie\s*=\s*([a-f0-9\-]{36})/),
      user_uuid = null;

  if (matches && matches.length === 2) {
    user_uuid = matches[1];
  }


  ga('create', 'UA-39299553-7', {'userId': '10f9e41b-1414-4ac1-bc80-973364aac808' });


ga('set', 'dimension1', 'Trial');
ga('set', 'dimension6', user_uuid);


  ga('set', 'dimension2', '10f9e41b-1414-4ac1-bc80-973364aac808');
  




  //enable enhanced link tracking
  ga('require', 'linkid', 'linkid.js');

  // reading interface will track pageviews itself
  if (document.location.pathname.indexOf("/library/view") !== 0) {
    ga('send', 'pageview');
  }
</script><script src="18.%20Documenting%20Software%20Architectures_files/_config.js" data-requiremodule="/static/js/pages/_config.1113c6153f5e.js" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="18.%20Documenting%20Software%20Architectures_files/_init.js" data-requiremodule="/static/js/nest/_init.1198db94d0a6.js" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><style id="annotator-dynamic-style">.annotator-adder, .annotator-outer, .annotator-notice {
  z-index: 100019;
}
.annotator-filter {
  z-index: 100009;
}</style></head>


<body class="reading sidenav  js-show-related scalefonts subscribe-panel library nav-collapsed">

    
      <div class="hide working" role="status">
        <div class="working-image"></div>
      </div>
      <div class="sbo-site-nav">
        



<a href="#container" class="skip">Skip to content</a><header class="topbar t-topbar"><nav role="navigation" class="js-site-nav"><ul class="topnav"><li class="logo t-logo"><a href="https://www.safaribooksonline.com/home/" class="l0 safari js-keyboard-nav-home"><em>Safari</em></a></li><li><a href="https://www.safaribooksonline.com/r/" class="t-recommendations-nav l0 ss-picks None"><span>Recommended</span></a></li><li><a href="https://www.safaribooksonline.com/s/" class="t-queue-nav l0 ss-queue None"><span>Queue</span></a></li><li class="search"><a href="#" class="t-search-nav trigger ss-search l0" data-dropdown-selector=".searchbox"><span>Search</span></a></li><li class="usermenu dropdown"><a href="#" class="trigger l0 ss-navigatedown nav-dropdown"><span>Expand Nav</span></a><div class="drop-content"><ul><li><a href="https://www.safaribooksonline.com/recent/" class="t-recent-nav l1 ss-recent None">Recent</a></li><li><a href="https://www.safaribooksonline.com/topics" class="t-topics-link l1 ss-hexbase None">Topics</a></li><li><a href="https://www.safaribooksonline.com/tutorials/" class="l1 ss-toots t-tutorials-nav js-toggle-menu-item None"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20" version="1.1"><title>icon for tutorials
  </title><desc></desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M15.8 18.2C15.8 18.2 15.9 18.2 16 18.2 16.1 18.2 16.2 18.2 16.4 18.2 16.5 18.2 16.7 18.1 16.9 18 17 17.9 17.1 17.8 17.2 17.7 17.3 17.6 17.4 17.5 17.4 17.4 17.5 17.2 17.6 16.9 17.6 16.7 17.6 16.6 17.6 16.5 17.6 16.4 17.5 16.2 17.5 16.1 17.4 15.9 17.3 15.8 17.2 15.6 17 15.5 16.8 15.3 16.6 15.3 16.4 15.2 16.2 15.2 16 15.2 15.8 15.2 15.7 15.2 15.5 15.3 15.3 15.4 15.2 15.4 15.1 15.5 15 15.7 14.9 15.8 14.8 15.9 14.7 16 14.7 16.1 14.6 16.3 14.6 16.4 14.6 16.5 14.6 16.6 14.6 16.6 14.6 16.7 14.6 16.9 14.6 17 14.6 17.1 14.7 17.3 14.7 17.4 14.8 17.6 15 17.7 15.1 17.9 15.2 18 15.3 18 15.5 18.1 15.5 18.1 15.6 18.2 15.7 18.2 15.7 18.2 15.7 18.2 15.8 18.2L15.8 18.2ZM9.4 11.5C9.5 11.5 9.5 11.5 9.6 11.5 9.7 11.5 9.9 11.5 10 11.5 10.2 11.5 10.3 11.4 10.5 11.3 10.6 11.2 10.8 11.1 10.9 11 10.9 10.9 11 10.8 11.1 10.7 11.2 10.5 11.2 10.2 11.2 10 11.2 9.9 11.2 9.8 11.2 9.7 11.2 9.5 11.1 9.4 11 9.2 10.9 9.1 10.8 8.9 10.6 8.8 10.5 8.7 10.3 8.6 10 8.5 9.9 8.5 9.7 8.5 9.5 8.5 9.3 8.5 9.1 8.6 9 8.7 8.8 8.7 8.7 8.8 8.6 9 8.5 9.1 8.4 9.2 8.4 9.3 8.2 9.5 8.2 9.8 8.2 10 8.2 10.1 8.2 10.2 8.2 10.3 8.2 10.5 8.3 10.6 8.4 10.7 8.5 10.9 8.6 11.1 8.7 11.2 8.9 11.3 9 11.4 9.1 11.4 9.2 11.4 9.3 11.5 9.3 11.5 9.3 11.5 9.4 11.5 9.4 11.5L9.4 11.5ZM3 4.8C3.1 4.8 3.1 4.8 3.2 4.8 3.4 4.8 3.5 4.8 3.7 4.8 3.8 4.8 4 4.7 4.1 4.6 4.3 4.5 4.4 4.4 4.5 4.3 4.6 4.2 4.6 4.1 4.7 4 4.8 3.8 4.8 3.5 4.8 3.3 4.8 3.1 4.8 3 4.8 2.9 4.7 2.8 4.7 2.6 4.6 2.5 4.5 2.3 4.4 2.2 4.2 2.1 4 1.9 3.8 1.9 3.6 1.8 3.5 1.8 3.3 1.8 3.1 1.8 2.9 1.8 2.7 1.9 2.6 2 2.4 2.1 2.3 2.2 2.2 2.3 2.1 2.4 2 2.5 2 2.6 1.8 2.8 1.8 3 1.8 3.3 1.8 3.4 1.8 3.5 1.8 3.6 1.8 3.8 1.9 3.9 2 4 2.1 4.2 2.2 4.4 2.4 4.5 2.5 4.6 2.6 4.7 2.7 4.7 2.8 4.7 2.9 4.8 2.9 4.8 3 4.8 3 4.8 3 4.8L3 4.8ZM13.1 15.2C13.2 15.1 13.2 15.1 13.2 15.1 13.3 14.9 13.4 14.7 13.6 14.5 13.8 14.2 14.1 14 14.4 13.8 14.7 13.6 15.1 13.5 15.5 13.4 15.9 13.4 16.3 13.4 16.7 13.5 17.2 13.5 17.6 13.7 17.9 13.9 18.2 14.1 18.5 14.4 18.7 14.7 18.9 15 19.1 15.3 19.2 15.6 19.3 15.9 19.4 16.1 19.4 16.4 19.4 17 19.3 17.5 19.1 18.1 19 18.3 18.9 18.5 18.7 18.7 18.5 19 18.3 19.2 18 19.4 17.7 19.6 17.3 19.8 16.9 19.9 16.6 20 16.3 20 16 20 15.8 20 15.6 20 15.4 19.9 15.4 19.9 15.4 19.9 15.4 19.9 15.2 19.9 15 19.8 14.9 19.8 14.8 19.7 14.7 19.7 14.6 19.7 14.4 19.6 14.3 19.5 14.1 19.3 13.7 19.1 13.4 18.7 13.2 18.4 13.1 18.1 12.9 17.8 12.9 17.5 12.8 17.3 12.8 17.1 12.8 16.9L3.5 14.9C3.3 14.9 3.1 14.8 3 14.8 2.7 14.7 2.4 14.5 2.1 14.3 1.7 14 1.4 13.7 1.2 13.3 1 13 0.9 12.6 0.8 12.3 0.7 12 0.7 11.7 0.7 11.4 0.7 11 0.8 10.5 1 10.1 1.1 9.8 1.3 9.5 1.6 9.2 1.8 8.9 2.1 8.7 2.4 8.5 2.8 8.3 3.2 8.1 3.6 8.1 3.9 8 4.2 8 4.5 8 4.6 8 4.8 8 4.9 8.1L6.8 8.5C6.8 8.4 6.8 8.4 6.8 8.4 6.9 8.2 7.1 8 7.2 7.8 7.5 7.5 7.7 7.3 8 7.1 8.4 6.9 8.7 6.8 9.1 6.7 9.5 6.7 10 6.7 10.4 6.8 10.8 6.8 11.2 7 11.5 7.2 11.8 7.5 12.1 7.7 12.4 8 12.6 8.3 12.7 8.6 12.8 8.9 12.9 9.2 13 9.4 13 9.7 13 9.7 13 9.8 13 9.8 13.6 9.9 14.2 10.1 14.9 10.2 15 10.2 15 10.2 15.1 10.2 15.3 10.2 15.4 10.2 15.6 10.2 15.8 10.1 16 10 16.2 9.9 16.4 9.8 16.5 9.6 16.6 9.5 16.8 9.2 16.9 8.8 16.9 8.5 16.9 8.3 16.9 8.2 16.8 8 16.8 7.8 16.7 7.7 16.6 7.5 16.5 7.3 16.3 7.2 16.2 7.1 16 7 15.9 6.9 15.8 6.9 15.7 6.9 15.6 6.8 15.5 6.8L6.2 4.8C6.2 5 6 5.2 5.9 5.3 5.7 5.6 5.5 5.8 5.3 6 4.9 6.2 4.5 6.4 4.1 6.5 3.8 6.6 3.5 6.6 3.2 6.6 3 6.6 2.8 6.6 2.7 6.6 2.6 6.6 2.6 6.5 2.6 6.5 2.5 6.5 2.3 6.5 2.1 6.4 1.8 6.3 1.6 6.1 1.3 6 1 5.7 0.7 5.4 0.5 5 0.3 4.7 0.2 4.4 0.1 4.1 0 3.8 0 3.6 0 3.3 0 2.8 0.1 2.2 0.4 1.7 0.5 1.5 0.7 1.3 0.8 1.1 1.1 0.8 1.3 0.6 1.6 0.5 2 0.3 2.3 0.1 2.7 0.1 3.1 0 3.6 0 4 0.1 4.4 0.2 4.8 0.3 5.1 0.5 5.5 0.8 5.7 1 6 1.3 6.2 1.6 6.3 1.9 6.4 2.3 6.5 2.5 6.6 2.7 6.6 3 6.6 3 6.6 3.1 6.6 3.1 9.7 3.8 12.8 4.4 15.9 5.1 16.1 5.1 16.2 5.2 16.4 5.2 16.7 5.3 16.9 5.5 17.2 5.6 17.5 5.9 17.8 6.2 18.1 6.5 18.3 6.8 18.4 7.2 18.6 7.5 18.6 7.9 18.7 8.2 18.7 8.6 18.7 9 18.6 9.4 18.4 9.8 18.3 10.1 18.2 10.3 18 10.6 17.8 10.9 17.5 11.1 17.3 11.3 16.9 11.6 16.5 11.8 16 11.9 15.7 12 15.3 12 15 12 14.8 12 14.7 12 14.5 11.9 13.9 11.8 13.3 11.7 12.6 11.5 12.5 11.7 12.4 11.9 12.3 12 12.1 12.3 11.9 12.5 11.7 12.7 11.3 12.9 10.9 13.1 10.5 13.2 10.2 13.3 9.9 13.3 9.6 13.3 9.4 13.3 9.2 13.3 9 13.2 9 13.2 9 13.2 9 13.2 8.8 13.2 8.7 13.2 8.5 13.1 8.2 13 8 12.8 7.7 12.6 7.4 12.4 7.1 12 6.8 11.7 6.7 11.4 6.6 11.1 6.5 10.8 6.4 10.6 6.4 10.4 6.4 10.2 5.8 10.1 5.2 9.9 4.5 9.8 4.4 9.8 4.4 9.8 4.3 9.8 4.1 9.8 4 9.8 3.8 9.8 3.6 9.9 3.4 10 3.2 10.1 3 10.2 2.9 10.4 2.8 10.5 2.6 10.8 2.5 11.1 2.5 11.5 2.5 11.6 2.5 11.8 2.6 12 2.6 12.1 2.7 12.3 2.8 12.5 2.9 12.6 3.1 12.8 3.2 12.9 3.3 13 3.5 13.1 3.6 13.1 3.7 13.1 3.8 13.2 3.9 13.2L13.1 15.2 13.1 15.2Z" fill="currentColor"></path></g></svg><em>Tutorials</em></a></li><li class="nav-highlights"><a href="https://www.safaribooksonline.com/u/001o000000ijSMHAA2/" class="t-highlights-nav l1 ss-highlights None">Highlights</a></li><li><a href="https://www.safaribooksonline.com/u/" class="t-settings-nav l1 js-settings ss-settings None">Settings</a></li><li><a href="https://community.safaribooksonline.com/" class="l1 no-icon">Feedback</a></li><li><a href="https://www.safaribooksonline.com/accounts/logout/" class="l1 no-icon">Sign Out</a></li></ul><ul class="profile"><li><a href="https://www.safaribooksonline.com/u/" class="l2 None">Settings</a><span class="l2 t-nag-notification" id="nav-nag"><strong class="trial-green">10</strong> days left in your trial.
  
  

  
    
      

<a class="" href="https://www.safaribooksonline.com/subscribe/">Subscribe</a>.


    
  

  

</span></li><li><a href="https://community.safaribooksonline.com/" class="l2">Feedback</a></li><li><a href="https://www.safaribooksonline.com/accounts/logout/" class="l2">Sign Out</a></li></ul></div></li></ul></nav></header>


      </div>
      <div style="height: auto;" id="container" class="application">
        
          <div class="nav-container clearfix">
            


            
            
          </div>

          

  <div class="js-toc">
    
      <div class="sbo-reading-menu sbo-menu-top"><section class="sbo-toc-container toc-menu"><a href="#" class="sbo-toc-thumb"><span class="sbo-title ss-list"><h1><div class="visuallyhidden">Table of Contents for </div>
      
      Software Architecture in Practice, Third Edition
      
    </h1></span></a><div class="toc-contents"></div></section></div>

    

    <div class="interface-controls interface-controls-top">
      <ul class="interface-control-btns js-bitlist js-reader">
        <li class="js-search-in-archive search-in-archive t-search-in-archive"><a href="#" title="Search in archive" class="js-search-controls search-controls"><span class="icon">Search in book...</span></a><form class="search-archive-bar js-search-form"><input name="q" placeholder="Search inside this book..." autocomplete="off" type="search"></form><div class="js-search-results search-archive-results"></div></li><li class="queue-control"><button title="Add to Queue" aria-label="Add to Queue" data-for-analytics="9780132942799:ch18.html" type="button" class="rec-fav ss-queue js-queue js-current-chapter-queue" data-queue-endpoint="/api/v1/book/9780132942799/chapter/ch18.html"><span>Add to Queue</span></button></li><li class="js-font-control-panel font-control-activator"><a href="#" data-push-state="false" id="font-controls" title="Change font size" aria-label="Change font size"><span class="icon">Toggle Font Controls</span></a></li><li class="dropdown sharing-controls"><a href="#" class="trigger" data-push-state="false" title="Share" aria-label="Share"><i class="fa fa-share"></i></a><ul class="social-sharing dropdown-menu"><li><a class="twitter share-button t-twitter" target="_blank" aria-label="Share this section on Twitter" title="Share this section on Twitter" href="https://twitter.com/share?url=https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch10.html&amp;text=Software%20Architecture%20in%20Practice%2C%20Third%20Edition&amp;via=safari"><span>Twitter</span></a></li><li><a class="facebook share-button t-facebook" target="_blank" aria-label="Share this section on Facebook" title="Share this section on Facebook" href="https://www.facebook.com/sharer/sharer.php?u=https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch10.html"><span>Facebook</span></a></li><li><a class="googleplus share-button t-googleplus" target="_blank" aria-label="Share this secton on Google Plus" title="Share this secton on Google Plus" href="https://plus.google.com/share?url=https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch10.html"><span>Google Plus</span></a></li><li><a class="email share-button t-email" aria-label="Share this section via email" title="Share this section via email" href="mailto:?subject=Safari:%2010.%20Testability&amp;body=https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch10.html%0D%0Afrom%20Software%20Architecture%20in%20Practice%2C%20Third%20Edition%0D%0A"><span>Email</span></a></li></ul></li>
      </ul>
    </div>

    <section role="document">
	  <div class="t-sbo-prev sbo-prev sbo-nav-top">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch17.html" class="prev nav-link">
      
          <span aria-hidden="true" class="pagination-label t-prev-label">Prev</span>
          <span class="visuallyhidden">Previous Chapter</span>
          <div class="pagination-title t-prev-title">17. Designing an Architecture</div>
        </a>
    
  
  </div>

  <div class="t-sbo-next sbo-next sbo-nav-top">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch19.html" class="next nav-link">
      
          <span aria-hidden="true" class="pagination-label t-next-label">Next</span>
          <span class="visuallyhidden">Next Chapter</span>
          <div class="pagination-title t-next-title">19. Architecture, Implementation, and Testing</div>
        </a>
    
  
  </div>



<div id="sbo-rt-content"><div class="annotator-wrapper"><h2 id="ch18"><a id="page_327"></a>18. Documenting Software Architectures</h2>
<div class="attri">
<p class="blockquote"><em>If it is not written down, it does not exist.</em></p>
<p class="attribution">—Philippe Kruchten</p>
</div>
<p class="noindent">Even the best architecture, the most perfectly 
suited for the job, will be essentially useless if the people who need 
to use it do not know what it is; cannot understand it well enough to 
use, build, or modify it; or (worst of all) misunderstand it and apply 
it incorrectly. And all of the effort, analysis, hard work, and 
insightful design on the part of the architecture team will have been 
wasted. They might as well have gone on vacation for all the good their 
architecture will do.</p>
<p class="indent">Creating an architecture isn’t enough. It has to be 
communicated in a way to let its stakeholders use it properly to do 
their jobs. If you go to the trouble of creating a strong architecture, 
one that you expect to stand the test of time, then you <em>must</em> go
 to the trouble of describing it in enough detail, without ambiguity, 
and organizing it so that others can quickly find and update needed 
information.</p>
<p class="indent">Documentation speaks for the architect. It speaks for 
the architect today, when the architect should be doing other things 
besides answering a hundred questions about the architecture. And it 
speaks for the architect tomorrow, when he or she has left the project 
and now someone else is in charge of its evolution and maintenance.</p>
<p class="indent">The sad truth is that architectural documentation 
today, if it is done at all, is often treated as an afterthought, 
something people do because they have to. Maybe a contract requires it. 
Maybe a customer demands it. Maybe a company’s standard process calls 
for it. In fact, these may all be legitimate reasons. But none of them 
are compelling enough to produce high-quality documentation. Why should 
the architect spend valuable time and energy just so a manager can check
 off a deliverable?</p>
<p class="indent"><a id="page_328"></a>The best architects produce good 
documentation not because it’s “required” but because they see that it 
is essential to the matter at hand—producing a high-quality product, 
predictably and with as little rework as possible. They see their 
immediate stakeholders as the people most intimately involved in this 
undertaking: developers, deployers, testers, and analysts.</p>
<p class="indent">But architects also see documentation as delivering 
value to themselves. Documentation serves as the receptacle to hold the 
results of major design decisions as they are confirmed. A 
well-thought-out documentation scheme can make the process of design go 
much more smoothly and systematically. Documentation helps the 
architect(s) reason about the architecture design and communicate it 
while the architecting is in progress, whether in a six-month design 
phase or a six-day Agile sprint.</p>
<h3 id="ch18lev1sec1">18.1. Uses and Audiences for Architecture Documentation</h3>
<p class="noindent">Architecture documentation must serve varied 
purposes. It should be sufficiently transparent and accessible to be 
quickly understood by new employees. It should be sufficiently concrete 
to serve as a blueprint for construction. It should have enough 
information to serve as a basis for analysis.</p>
<p class="indent">Architecture documentation is both prescriptive and descriptive. For some audiences, it prescribes what <em>should</em> be true, placing constraints on decisions yet to be made. For other audiences, it describes what <em>is</em> true, recounting decisions already made about a system’s design.</p>
<p class="indent">The best architecture documentation for, say, 
performance analysis may well be different from the best architecture 
documentation we would wish to hand to an implementer. And both of these
 will be different from what we put in a new hire’s “welcome aboard” 
package or a briefing we put together for an executive. When planning 
and reviewing documentation, you need to ensure support for all the 
relevant needs.</p>
<p class="indent">We can see that many different kinds of people are 
going to have a vested interest in an architecture document. They hope 
and expect that the architecture document will help them do their 
respective jobs. Understanding their uses of architecture documentation 
is essential, as those uses determine the important information to 
capture.</p>
<p class="indent">Fundamentally, architecture documentation has three uses:</p>
<p class="indenthangingN"><strong>1.</strong> <em>Architecture documentation serves as a means of education.</em>
 The educational use consists of introducing people to the system. The 
people may be new members of the team, external analysts, or even a new 
architect. In many cases, the “new” person is the customer to whom 
you’re showing your <a id="page_329"></a>solution for the first time, a presentation you hope will result in funding or go-ahead approval.</p>
<p class="indenthangingN"><strong>2.</strong> <em>Architecture documentation serves as a primary vehicle for communication among stakeholders</em>. An architecture’s precise use as a communication vehicle depends on which stakeholders are doing the communicating.</p>
<p class="indenthangingNP">Perhaps one of the most avid consumers of 
architecture documentation is none other than the architect in the 
project’s future. The future architect may be the same person or may be a
 replacement, but in either case he or she is guaranteed to have an 
enormous stake in the documentation. New architects are interested in 
learning how their predecessors tackled the difficult issues of the 
system and why particular decisions were made. Even if the future 
architect is the same person, he or she will use the documentation as a 
repository of thought, a storehouse of design decisions too numerous and
 hopelessly intertwined to ever be reproducible from memory alone. See 
the sidebar “<a href="#ch18sb01">Schmucks and Jerks</a>.”</p>
<p class="indenthangingN"><strong>3.</strong> <em>Architecture documentation serves as the basis for system analysis and construction</em>.
 Architecture tells implementers what to implement. Each module has 
interfaces that must be provided and uses interfaces from other modules.
 Not only does this provide instructions about the provided and used 
interfaces, but it also determines with what other teams the development
 team for the module must communicate.</p>
<p class="indenthangingNP">During development, an architecture can be 
very complex, with many issues left to resolve. Documentation can serve 
as a receptacle for registering and communicating these issues that 
might otherwise be overlooked.</p>
<p class="indenthangingNP">For those interested in the ability of the 
design to meet the system’s quality objectives, the architecture 
documentation serves as the fodder for evaluation. It must contain the 
information necessary to evaluate a variety of attributes, such as 
security, performance, usability, availability, and modifiability.</p>
<p class="indenthangingNP">For system builders who use automatic 
code-generation tools, the documentation may incorporate the models used
 for generation. These models provide guidance to those who wish to 
understand the behavior of the module in more detail than is normally 
documented but in less detail than examining the code would provide.</p>
<h3 id="ch18lev1sec2">18.2. Notations for Architecture Documentation</h3>
<p class="noindent">Notations for documenting views differ considerably 
in their degree of formality. Roughly speaking, there are three main 
categories of notation:</p>
<p class="indenthangingB"><a id="page_330"></a>• <em>Informal notations.</em>
 Views are depicted (often graphically) using general-purpose 
diagramming and editing tools and visual conventions chosen for the 
system at hand. The semantics of the description are characterized in 
natural language, and they cannot be formally analyzed. In our 
experience, the most common tool for informal notations is PowerPoint.</p>
<p class="indenthangingB">• <em>Semiformal notations.</em> Views are 
expressed in a standardized notation that prescribes graphical elements 
and rules of construction, but it does not provide a complete semantic 
treatment of the meaning of those elements. Rudimentary analysis can be 
applied to determine if a description satisfies syntactic properties. 
UML is a semiformal notation in this sense.</p>
<p class="indenthangingB">• <em>Formal notations.</em> Views are 
described in a notation that has a precise (usually mathematically 
based) semantics. Formal analysis of both syntax and semantics is 
possible. There are a variety of formal notations for software 
architecture available. Generally referred to as architecture 
description languages (ADLs), they typically provide both a graphical 
vocabulary and an underlying semantics for architecture representation. 
In some cases these notations are specialized to particular 
architectural views. In others they allow many views, or even provide 
the ability to formally define new views. The usefulness of ADLs lies in
 their ability to support automation through associated tools: 
automation to provide useful analysis of the architecture or assist in 
code generation. In practice, the use of such notations is rare.</p>
<div class="sidebar"><hr>
<p class="title"><a id="ch18sb01"></a>Schmucks and Jerks</p>
<p class="sb-noindent">One day I was sitting in a meeting with a 
well-known compiler guru. He was recounting some of his favorite war 
stories from his long career. One of these stories particularly stuck 
with me. He was talking about the time that he was chasing down a very 
nasty and subtle bug in the code of a compiler that he was maintaining. 
After a long and exasperating search, he finally located and eventually 
fixed the bug. But the search itself had gotten him so worked up, and he
 was so infuriated at the irresponsible thought and programming that led
 to the bug, that he decided to do a bit more detective work and figure 
out who was the jerk responsible for that bug.</p>
<p class="sb-indent">By going backward through the revision history, he 
found the culprit. It was him. He was the jerk. It turns out that he was
 the one who—eight years earlier—had written that offending piece of 
code. The trouble was, he had no recollection of writing the code and no
 recollection of the rationale for writing it the way he had done. 
Perhaps there was a good reason to do so at the time, but if so it was 
lost now.</p>
<p class="sb-indent">That is why we document. The documentation helps 
the poor schmuck who has to maintain your code in the future, and that 
schmuck might very well be you!</p>
<p class="attribution">—<em>RK</em></p>
<hr></div>
<p class="indent"><a id="page_331"></a>Determining which form of 
notation to use involves making several tradeoffs. Typically, more 
formal notations take more time and effort to create and understand, but
 they repay this effort in reduced ambiguity and more opportunities for 
analysis. Conversely, more informal notations are easier to create, but 
they provide fewer guarantees.</p>
<p class="indent">Regardless of the level of formality, always remember 
that different notations are better (or worse) for expressing different 
kinds of information. Formality aside, no UML class diagram will help 
you reason about schedulability, nor will a sequence chart tell you very
 much about the system’s likelihood of being delivered on time. You 
should choose your notations and representation languages always keeping
 in mind the important issues you need to capture and reason about.</p>
<h3 id="ch18lev1sec3">18.3. Views</h3>
<p class="noindent">Perhaps the most important concept associated with software architecture documentation is that of the <em>view.</em>
 A software architecture is a complex entity that cannot be described in
 a simple one-dimensional fashion. A view is a representation of a set 
of system elements and relations among them—not all system elements, but
 those of a particular type. For example, a layered view of a system 
would show elements of type “layer”—that is, it would show the system’s 
decomposition into layers—and the relations among those layers. A pure 
layered view would not, however, show the system’s services, or clients 
and servers, or data model, or any other type of element.</p>
<p class="indent">Thus, views let us divide the multidimensional entity 
that is a software architecture into a number of (we hope) interesting 
and manageable representations of the system. The concept of <em>views</em> gives us our most fundamental principle of architecture documentation:</p>
<p class="blockquote">Documenting an architecture is a matter of 
documenting the relevant views and then adding documentation that 
applies to more than one view.</p>
<p class="indent">This maxim gives our approach to documentation its name: <em>Views and Beyond</em>.</p>
<p class="indent">What are the relevant views? This depends entirely on 
your goals. As we saw previously, architecture documentation can serve 
many purposes: a mission statement for implementers, a basis for 
analysis, the specification for automatic code generation, the starting 
point for system understanding and asset recovery, or the blueprint for 
project planning.</p>
<p class="indent">Different views also expose different quality 
attributes to different degrees. Therefore, the quality attributes that 
are of most concern to you and the other stakeholders in the system’s 
development will affect the choice of what views to <a id="page_332"></a>document. For instance, a <em>layered view</em> will let you reason about your system’s portability, a <em>deployment view</em> will let you reason about your system’s performance and reliability, and so forth.</p>
<p class="indent">Different views support different goals and uses. This
 is why we do not advocate a particular view or collection of views. The
 views you should document depend on the uses you expect to make of the 
documentation. Different views will highlight different system elements 
and relations. How many different views to represent is the result of a 
cost/benefit decision. Each view has a cost and a benefit, and you 
should ensure that the benefits of maintaining a particular view 
outweigh its costs.</p>
<p class="indent">Views may be driven by the need to document a 
particular pattern in your design. Some patterns are composed of 
modules, others of components and connectors, and still others have 
deployment considerations. Module views, component-and-connector 
(C&amp;C) views, and allocation views are the appropriate mechanisms for
 representing these considerations.</p>
<h4 id="ch18lev2sec1">Module Views</h4>
<p class="noindent">A module is an implementation unit that provides a 
coherent set of responsibilities. A module might take the form of a 
class, a collection of classes, a layer, an aspect, or any decomposition
 of the implementation unit. Example module views are decomposition, 
uses, and layers. Every module has a collection of properties assigned 
to it. These properties are intended to express the important 
information associated with the module, as well as constraints on the 
module. Sample properties are responsibilities, visibility information, 
and revision history. The relations that modules have to one another 
include <em>is part of</em>, <em>depends on</em>, and <em>is a</em>.</p>
<p class="indent">The way in which a system’s software is decomposed 
into manageable units remains one of the important forms of system 
structure. At a minimum, this determines how a system’s source code is 
decomposed into units, what kinds of assumptions each unit can make 
about services provided by other units, and how those units are 
aggregated into larger ensembles. It also includes global data 
structures that impact and are impacted by multiple units. Module 
structures often determine how changes to one part of a system might 
affect other parts and hence the ability of a system to support 
modifiability, portability, and reuse.</p>
<p class="indent">It is unlikely that the documentation of any software architecture can be complete without at least one module view.</p>
<p class="indent"><a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch18.html#ch18tab01">Table 18.1</a>
 summarizes the elements, relations, constraints, and purpose of the 
module views in general. Later we provide this information specific to 
each of a number of often used module views.</p>
<p class="tab-caption"><a id="ch18tab01"></a>Table 18.1. Summary of the Module Views</p>
<div class="image"><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/18tab01.jpg" src="18.%20Documenting%20Software%20Architectures_files/18tab01.jpg" alt="Image" height="489" width="630"></div>
<p class="indent">Properties of modules that help to guide 
implementation or are input to analysis should be recorded as part of 
the supporting documentation for a module view. The list of properties 
may vary but is likely to include the following:</p>
<p class="indenthangingB"><a id="page_333"></a>• <em>Name.</em> A 
module’s name is, of course, the primary means to refer to it. A 
module’s name often suggests something about its role in the system. In 
addition, a module’s name may reflect its position in a decomposition 
hierarchy; the name A.B.C, for example, refers to a module C that is a 
submodule of a module B, itself a submodule of A.</p>
<p class="indenthangingB">• <em>Responsibilities.</em> The 
responsibility property for a module is a way to identify its role in 
the overall system and establishes an identity for it beyond the name. 
Whereas a module’s name may suggest its role, a statement of 
responsibility establishes it with much more certainty. Responsibilities
 should be described in sufficient detail to make clear to the reader 
what each module does.</p>
<p class="indenthangingB">• <em>Visibility of interface(s)</em>. <em>When a module has submodules</em>,
 some interfaces of the submodules are public and some may be private; 
that is, the interfaces are used only by the submodules within the 
enclosing parent module. These private interfaces are not visible 
outside that context.</p>
<p class="indenthangingB">• <em>Implementation information.</em> Modules
 are units of implementation. It is therefore useful to record 
information related to their implementation from the point of view of 
managing their development and building the system that contains them. 
This might include the following:</p>
<p class="indenthangingB"><a id="page_334"></a>• <em>Mapping to source code units.</em>
 This identifies the files that constitute the implementation of a 
module. For example, a module Account, if implemented in Java, might 
have several files that constitute its implementation: IAccount.java (an
 interface), AccountImpl.java (the implementation of Account 
functionality), AccountBean.java (a class to hold the state of an 
account in memory), AccountOrmMapping.xml (a file that defines the 
mapping between AccountBean and a database table—object-relational 
mapping), and perhaps even a unit test AccountTest.java.</p>
<p class="indenthangingB">• <em>Test information.</em> The module’s test
 plan, test cases, test scaffolding, and test data are important to 
document. This information may simply be a pointer to the location of 
these artifacts.</p>
<p class="indenthangingB">• <em>Management information.</em> A manager 
may need information about the module’s predicted schedule and budget. 
This information may simply be a pointer to the location of these 
artifacts.</p>
<p class="indenthangingB">• <em>Implementation constraints.</em> In many
 cases, the architect will have an implementation strategy in mind for a
 module or may know of constraints that the implementation must follow.</p>
<p class="indenthangingB">• <em>Revision history.</em> Knowing the history of a module including authors and particular changes may help when you perform maintenance activities.</p>
<p class="indent">Because modules partition the system, it should be 
possible to determine how the functional requirements of a system are 
supported by module responsibilities. Module views that show 
dependencies among modules or layers (which are groups of modules that 
have a specific pattern of allowed usage) provide a good basis for 
change-impact analysis. Modules are typically modified as a result of 
problem reports or change requests. Impact analysis requires a certain 
degree of design completeness and integrity of the module description. 
In particular, dependency information has to be available and correct to
 be able to create useful results.</p>
<p class="indent">A module view can be used to explain the system’s 
functionality to someone not familiar with it. The various levels of 
granularity of the module decomposition provide a top-down presentation 
of the system’s responsibilities and therefore can guide the learning 
process. For a system whose implementation is already in place, module 
views, if kept up to date, are helpful, as they explain the structure of
 the code base to a new developer on the team. Thus, up-to-date module 
views can simplify and regularize system maintenance.</p>
<p class="indent">On the other hand, it is difficult to use the module 
views to make inferences about runtime behavior, because these views are
 just a static partition of the functions of the software. Thus, a 
module view is not typically used for analysis of performance, 
reliability, and many other runtime qualities. For those, we rely on 
component-and-connector and allocation views.</p>
<p class="indent">Module views are commonly mapped to 
component-and-connector views. The implementation units shown in module 
views have a mapping to components that execute at runtime. Sometimes, 
the mapping is quite straightforward, even one-to-one for small, simple 
applications. More often, a single module will be <a id="page_335"></a>replicated
 as part of many runtime components, and a given component could map to 
several modules. Module views also provide the software elements that 
are mapped to the diverse nonsoftware elements of the system environment
 in the various allocation views.</p>
<h4 id="ch18lev2sec2">Component-and-Connector Views</h4>
<p class="noindent">Component-and-connector views show elements that 
have some runtime presence, such as processes, objects, clients, 
servers, and data stores. These elements are termed <em>components</em>.
 Additionally, component-and-connector views include as elements the 
pathways of interaction, such as communication links and protocols, 
information flows, and access to shared storage. Such interactions are 
represented as <em>conn</em>ectors in C&amp;C views. Sample C&amp;C 
views are service-oriented architecture (SOA), client-server, or 
communicating process views.</p>
<p class="indent">Components have interfaces called <em>ports</em>. A 
port defines a point of potential interaction of a component with its 
environment. A port usually has an explicit type, which defines the kind
 of behavior that can take place at that point of interaction. A 
component may have many ports of the same type, each forming a different
 input or output channel at runtime. In this respect ports differ from 
interfaces of modules, whose interfaces are never replicated. You can 
annotate a port with a number or range of numbers to indicate 
replication; for example, “1..4” might mean that an interface could be 
replicated up to four times. A component’s ports should be explicitly 
documented, by showing them in the diagram and defining them in the 
diagram’s supporting documentation.</p>
<p class="indent">A component in a C&amp;C view may represent a complex 
subsystem, which itself can be described as a C&amp;C subarchitecture. 
This subarchitecture can be depicted graphically <em>in situ</em> when 
the substructure is not too complex, by showing it as nested inside the 
component that it refines. Often, however, it is documented separately. A
 component’s subarchitecture may employ a different pattern than the one
 in which the component appears.</p>
<p class="indent">Connectors are the other kind of element in a C&amp;C 
view. Simple examples of connectors are service invocation; asynchronous
 message queues; event multicast supporting publish-subscribe 
interactions; and pipes that represent asynchronous, order-preserving 
data streams. Connectors often represent much more complex forms of 
interaction, such as a transaction-oriented communication channel 
between a database server and a client, or an enterprise service bus 
that mediates interactions between collections of service users and 
providers.</p>
<p class="indent">Connectors have <em>roles</em>, which are its 
interfaces, defining the ways in which the connector may be used by 
components to carry out interaction. For example, a client-server 
connector might have <em>invokes-services</em> and <em>provides-services</em> roles. A pipe might have <em>writer</em> and <em>reader</em> roles. Like component ports, connector roles differ from module interfaces in that they can be replicated, indicating <a id="page_336"></a>how many components can be involved in its interaction. A publish-subscribe connector might have many instances of the <em>publisher</em> and <em>subscriber</em> roles.</p>
<p class="indent">Like components, complex connectors may in turn be 
decomposed into collections of components and connectors that describe 
the architectural substructure of those connectors. Connectors need not 
be binary. That is, they need not have exactly two roles. For example, a
 publish-subscribe connector might have an arbitrary number of publisher
 and subscriber roles. Even if the connector is ultimately implemented 
using binary connectors, such as a procedure call, it can be useful to 
adopt <em>n</em>-ary connector representations in a C&amp;C view. 
Connectors embody a protocol of interaction. When two or more components
 interact, they must obey conventions about order of interactions, locus
 of control, and handling of error conditions and timeouts. The protocol
 of interaction should be documented.</p>
<p class="indent">The primary relation within a C&amp;C view is <em>attachment</em>. <em>Attachments</em>
 indicate which connectors are attached to which components, thereby 
defining a system as a graph of components and connectors. Specifically,
 an attachment is denoted by associating (attaching) a component’s port 
to a connector’s role. A valid attachment is one in which the ports and 
roles are compatible with each other, under the semantic constraints 
defined by the view. Compatibility often is defined in terms of 
information type and protocol. For example, in a call-return 
architecture, you should check to make sure that all “calls” ports are 
attached to some call-return connector. At a deeper semantic level, you 
should check to make sure that a port’s protocol is consistent with the 
behavior expected by the role to which it is attached.</p>
<p class="indent">An element (component or connector) of a C&amp;C view 
will have various associated properties. Every element should have a 
name and type. Additional properties depend on the type of component or 
connector. Define values for the properties that support the intended 
analyses for the particular C&amp;C view. For example, if the view will 
be used for performance analysis, latencies, queue capacities, and 
thread priorities may be necessary. The following are examples of some 
typical properties and their uses:</p>
<p class="indenthangingB">• <em>Reliability.</em> What is the likelihood
 of failure for a given component or connector? This property might be 
used to help determine overall system availability.</p>
<p class="indenthangingB">• <em>Performance.</em> What kinds of response
 time will the component provide under what loads? What kind of 
bandwidth, latency, jitter, transaction volume, or throughput can be 
expected for a given connector? This property can be used with others to
 determine system-wide properties such as response times, throughput, 
and buffering needs.</p>
<p class="indenthangingB">• <em>Resource requirements.</em> What are the
 processing and storage needs of a component or a connector? This 
property can be used to determine whether a proposed hardware 
configuration will be adequate.</p>
<p class="indenthangingB">• <em>Functionality.</em> What functions does an element perform? This property can be used to reason about overall computation performed by a system.</p>
<p class="indenthangingB">• <em>Security.</em> Does a component or a 
connector enforce or provide security features, such as encryption, 
audit trails, or authentication? This property can be used to determine 
system security vulnerabilities.</p>
<p class="indenthangingB"><a id="page_337"></a>• <em>Concurrency.</em> 
Does this component execute as a separate process or thread? This 
property can help to analyze or simulate the performance of concurrent 
components and identify possible deadlocks.</p>
<p class="indenthangingB">• <em>Modifiability.</em> Does the messaging 
structure support a structure to cater for evolving data exchanges? Can 
the components be adapted to process those new messages? This property 
can be defined to extend the functionality of a component.</p>
<p class="indenthangingB">• <em>Tier.</em> For a tiered topology, what 
tier does the component reside in? This property helps to define the 
build and deployment procedures, as well as platform requirements for 
each tier.</p>
<p class="indent">C&amp;C views are commonly used to show to developers 
and other stakeholders how the system works—one can “animate” or trace 
through a C&amp;C view, showing an end-to-end thread of activity. 
C&amp;C views are also used to reason about runtime system quality 
attributes, such as performance and availability. In particular, a 
well-documented view allows architects to predict overall system 
properties such as latency or reliability, given estimates or 
measurements of properties of the individual elements and their 
interactions.</p>
<p class="indent"><a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch18.html#ch18tab02">Table 18.2</a>
 summarizes the elements, relations, and properties that can appear in 
C&amp;C views. This table is followed by a more detailed discussion of 
these concepts, together with guidelines concerning their documentation.</p>
<p class="tab-caption"><a id="ch18tab02"></a>Table 18.2. Summary of Component-and-Connector Views</p>
<div class="image"><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/18tab02.jpg" src="18.%20Documenting%20Software%20Architectures_files/18tab02.jpg" alt="Image" height="514" width="630"></div>
<h4 id="ch18lev2sec3"><a id="page_338"></a>Notations for C&amp;C Views</h4>
<p class="noindent">As always, box-and-line drawings are available to 
represent C&amp;C views. Although informal notations are limited in the 
semantics that can be conveyed, following some simple guidelines can 
lend rigor and depth to the descriptions. The primary guideline is 
simple: assign each component type and each connector type a separate 
visual form (symbol), and list each of the types in a key.</p>
<p class="indent">UML components are a good semantic match to C&amp;C 
components because they permit intuitive documentation of important 
information like interfaces, properties, and behavioral descriptions. 
UML components also distinguish between component types and component 
instances, which is useful when defining view-specific component types.</p>
<p class="indent">UML ports are a good semantic match to C&amp;C ports. A
 UML port can be decorated with a multiplicity, as shown in the left 
portion of <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch18.html#ch18fig01">Figure 18.1</a>,
 though this is typically only done on component types. The number of 
ports on component instances, as shown in the right portion of <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch18.html#ch18fig01">Figure 18.1</a>,
 is typically bound to a specific number. Components that dynamically 
create and manage a set of ports should retain a multiplicity descriptor
 on instance descriptions.</p>
<div class="image"><a id="ch18fig01"></a><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/18fig01.jpg" src="18.%20Documenting%20Software%20Architectures_files/18fig01.jpg" alt="Image" height="144" width="521"></div>
<p class="fig-caption">Figure 18.1. A UML representation of the ports on a C&amp;C component type (<em>left</em>) and component instance (<em>right</em>).
 The Account Database component type has two types of ports, Server and 
Admin (noted by the boxes on the component’s border). The Server port is
 defined with a multiplicity, meaning that multiple instances of the 
port are permitted on any corresponding component instance.</p>
<p class="indent">While C&amp;C connectors are as semantically rich as 
C&amp;C components, the same is not true of UML connectors. UML 
connectors cannot have substructure, attributes, or behavioral 
descriptions. This makes choosing how to represent C&amp;C connectors 
more difficult, as UML connectors are not always rich enough.</p>
<p class="indent">You should represent a “simple” C&amp;C connector 
using a UML connector—a line. Many commonly used C&amp;C connectors have
 well-known, application-independent semantics and implementations, such
 as function calls or data read operations. If the only information you 
need to supply is the type of the connector, then a UML connector is 
adequate. Call-return connectors can be represented by a UML assembly 
connector, which links a component’s required interface (socket) to the 
other component’s provided interface (lollipop). You can use a 
stereotype to denote the type of connector. If all connectors in a 
primary presentation are of the same type, you can note this once in a 
comment rather than explicitly on each connector to reduce visual 
clutter. Attachment is shown by connecting the endpoints of the 
connector to the ports of components. Connector roles cannot be 
explicitly represented with a UML connector because the UML connector 
element does not allow the inclusion of interfaces (unlike the UML port,
 which does allow interfaces). The best approximation is to label the 
connector ends and use these labels to identify role descriptions that 
must be documented elsewhere.</p>
<p class="indent">You should represent a “rich” C&amp;C connector using a
 UML component, or by annotating a line UML connector with a tag or 
other auxiliary documentation that explains the meaning of the complex 
connector.</p>
<h4 id="ch18lev2sec4"><a id="page_339"></a>Allocation Views</h4>
<p class="noindent">Allocation views describe the mapping of software 
units to elements of an environment in which the software is developed 
or in which it executes. The environment might be the hardware, the 
operating environment in which the software is executed, the file 
systems supporting development or deployment, or the development 
organization(s).</p>
<p class="indent"><a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch18.html#ch18tab03">Table 18.3</a>
 summarizes the characteristics of allocation views. Allocation views 
consist of software elements and environmental elements. Examples of 
environmental elements are a processor, a disk farm, a file or folder, 
or a group of developers. The software elements come from a module or 
C&amp;C view.</p>
<p class="tab-caption"><a id="ch18tab03"></a>Table 18.3. Summary of the Characteristics of Allocation Views</p>
<div class="image"><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/18tab03.jpg" src="18.%20Documenting%20Software%20Architectures_files/18tab03.jpg" alt="Image" height="294" width="630"></div>
<p class="indent"><a id="page_340"></a>The relation in an allocation view is <em>allocated to</em>.
 We usually talk about allocation views in terms of a mapping from 
software elements to environmental elements, although the reverse 
mapping can also be relevant and interesting. A single software element 
can be allocated to multiple environmental elements, and multiple 
software elements can be allocated to a single environmental element. If
 these allocations change over time, either during development or 
execution of the system, then the architecture is said to be dynamic 
with respect to that allocation. For example, processes might migrate 
from one processor or virtual machine to another. Similarly modules 
might migrate from one development team to another.</p>
<p class="indent">Software elements and environmental elements have 
properties in allocation views. The usual goal of an allocation view is 
to compare the properties <em>required</em> by the software element with the properties <em>provided</em>
 by the environmental elements to determine whether the allocation will 
be successful or not. For example, to ensure a component’s <em>required</em> response time, it has to execute on (be allocated to) a processor that <em>provides</em>
 sufficiently fast processing power. For another example, a computing 
platform might not allow a task to use more than 10 kilobytes of virtual
 memory. An execution model of the software element in question can be 
used to determine the required virtual memory usage. Similarly, if you 
are migrating a module from one team to another, you might want to 
ensure that the new team has the appropriate skills and background 
knowledge.</p>
<p class="indent">Allocation views can depict static or dynamic views. A
 static view depicts a fixed allocation of resources in an environment. A
 dynamic view depicts the conditions and the triggers for which 
allocation of resources changes according to loading. Some systems 
recruit and utilize new resources as their load increases. An example is
 a load-balancing system in which new processes or threads are created 
on another machine. In this view, the conditions under which the 
allocation changes, the allocation of runtime software, and the dynamic 
allocation mechanism need to be documented. (Recall from <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch01.html#ch01">Chapter 1</a>
 that one of the allocation structures is the work assignment structure,
 which allocates modules to teams for development. That relationship, 
too, can be allocated dynamically, depending on “load”—in this case, the
 load on development teams.)</p>
<h4 id="ch18lev2sec5">Quality Views</h4>
<p class="noindent">Module, C&amp;C, and allocation views are all 
structural views: They primarily show the structures that the architect 
has engineered into the architecture to satisfy functional and quality 
attribute requirements.</p>
<p class="indent">These views are excellent for guiding and constraining
 downstream developers, whose primary job it is to implement those 
structures. However, in systems in which certain quality attributes (or,
 for that matter, some other kind of stakeholder concerns) are 
particularly important and pervasive, structural views may not be the 
best way to present the architectural solution to those needs. The 
reason is that the solution may be spread across multiple structures 
that are inconvenient to combine (for example, because the element types
 shown in each are different).</p>
<p class="indent"><a id="page_341"></a>Another kind of view, which we call a <em>quality view</em>,
 can be tailored for specific stakeholders or to address specific 
concerns. These quality views are formed by extracting the relevant 
pieces of structural views and packaging them together. Here are five 
examples:</p>
<p class="indenthangingB">• A <em>security view</em> can show all of the
 architectural measures taken to provide security. It would show the 
components that have some security role or responsibility, how those 
components communicate, any data repositories for security information, 
and repositories that are of security interest. The view’s context 
information would show other security measures (such as physical 
security) in the system’s environment. The behavior part of a security 
view would show the operation of security protocols and where and how 
humans interact with the security elements. It would also capture how 
the system would respond to specific threats and vulnerabilities.</p>
<p class="indenthangingB">• A <em>communications view</em> might be 
especially helpful for systems that are globally dispersed and 
heterogeneous. This view would show all of the component-to-component 
channels, the various network channels, quality-of-service parameter 
values, and areas of concurrency. This view can be used to analyze 
certain kinds of performance and reliability (such as deadlock or race 
condition detection). The behavior part of this view could show (for 
example) how network bandwidth is dynamically allocated.</p>
<p class="indenthangingB">• An <em>exception</em> or <em>error-handling view</em>
 could help illuminate and draw attention to error reporting and 
resolution mechanisms. Such a view would show how components detect, 
report, and resolve faults or errors. It would help identify the sources
 of errors and appropriate corrective actions for each. Root-cause 
analysis in those cases could be facilitated by such a view.</p>
<p class="indenthangingB">• A <em>reliability</em> view would be one in 
which reliability mechanisms such as replication and switchover are 
modeled. It would also depict timing issues and transaction integrity.</p>
<p class="indenthangingB">• A <em>performance</em> view would include 
those aspects of the architecture useful for inferring the system’s 
performance. Such a view might show network traffic models, maximum 
latencies for operations, and so forth.</p>
<p class="indent">These and other quality views reflect the 
documentation philosophy of ISO/IEC/IEEE standard 42010:2011, which 
prescribes creating views driven by stakeholder concerns about the 
architecture.</p>
<h3 id="ch18lev1sec4">18.4. Choosing the Views</h3>
<p class="noindent">Documenting decisions during the design process 
(something we strongly recommend) produces views, which are the heart of
 an architecture document. It is most likely that these views are rough 
sketches more than finished products <a id="page_342"></a>ready for 
public release; this will give you the freedom to back up and rethink 
design decisions that turn out to be problematic without having wasted 
time on broad dissemination and cosmetic polish. They are documented 
purely as your own memory aid.</p>
<p class="indent">By the time you’re ready to release an architecture 
document, you’re likely to have a fairly well-worked-out collection of 
architecture views. At some point you’ll need to decide which to take to
 completion, with how much detail, and which to include in a given 
release. You’ll also need to decide which views can be usefully combined
 with others, so as to reduce the total number of views in the document 
and reveal important relations among the views.</p>
<p class="indent">You can determine which views are required, when to create them, and how much detail to include if you know the following:</p>
<p class="indenthangingB">• What people, and with what skills, are available</p>
<p class="indenthangingB">• Which standards you have to comply with</p>
<p class="indenthangingB">• What budget is on hand</p>
<p class="indenthangingB">• What the schedule is</p>
<p class="indenthangingB">• What the information needs of the important stakeholders are</p>
<p class="indenthangingB">• What the driving quality attribute requirements are</p>
<p class="indenthangingB">• What the size of the system is</p>
<p class="indent">At a minimum, expect to have at least one module view,
 at least one C&amp;C view, and for larger systems, at least one 
allocation view in your architecture document. Beyond that basic rule of
 thumb, however, there is a three-step method for choosing the views:</p>
<p class="indenthangingB">• <strong>Step 1. Build a stakeholder/view table.</strong>
 Enumerate the stakeholders for your project’s software architecture 
documentation down the rows. Be as comprehensive as you can. For the 
columns, enumerate the views that apply to your system. (Use the 
structures discussed in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch01.html#ch01">Chapter 1</a>,
 the views discussed in this chapter, and the views that your design 
work in ADD has suggested as a starting list of candidates.) Some views 
(such as decomposition, uses, and work assignment) apply to every 
system, while others (various C&amp;C views, the layered view) only 
apply to some systems. For the columns, make sure to include the views 
or view sketches you already have as a result of your design work so 
far.</p>
<p class="indenthangingBP1">Once you have the rows and columns defined, 
fill in each cell to describe how much information the stakeholder 
requires from the view: none, overview only, moderate detail, or high 
detail. The candidate view list going into step 2 now consists of those 
views for which some stakeholder has a vested interest.</p>
<p class="indenthangingB">• <strong>Step 2. Combine views.</strong> The 
candidate view list from step 1 is likely to yield an impractically 
large number of views. This step will winnow the list to manageable 
size. Look for marginal views in the table: those that require only an 
overview, or that serve very few stakeholders. Combine each marginal 
view with another view that has a stronger constituency.</p>
<p class="indenthangingB"><a id="page_343"></a>• <strong>Step 3. Prioritize and stage</strong>.
 After step 2 you should have the minimum set of views needed to serve 
your stakeholder community. At this point you need to decide what to do 
first. What you do first depends on your project, but here are some 
things to consider:</p>
<p class="indenthangingBB">• The decomposition view (one of the module 
views) is a particularly helpful view to release early. High-level (that
 is, broad and shallow) decompositions are often easy to design, and 
with this information the project manager can start to staff development
 teams, put training in place, determine which parts to outsource, and 
start producing budgets and schedules.</p>
<p class="indenthangingBB">• Be aware that you don’t have to satisfy all
 the information needs of all the stakeholders to the fullest extent. 
Providing 80 percent of the information goes a long way, and this might 
be good enough so that the stakeholders can do their job. Check with the
 stakeholder to see if a subset of information would be sufficient. They
 typically prefer a product that is delivered on time and within budget 
over getting the perfect documentation.</p>
<p class="indenthangingBB">• You don’t have to complete one view before 
starting another. People can make progress with overview-level 
information, so a breadth-first approach is often the best.</p>
<h3 id="ch18lev1sec5">18.5. Combining Views</h3>
<p class="noindent">The basic principle of documenting an architecture 
as a set of separate views brings a divide-and-conquer advantage to the 
task of documentation, but if the views were irrevocably different, with
 no association with one another, nobody would be able to understand the
 system as a whole.</p>
<p class="indent">Because all views in an architecture are part of that 
same architecture and exist to achieve a common purpose, many of them 
have strong associations with each other. Managing how architectural 
structures are associated is an important part of the architect’s job, 
independent of whether any documentation of those structures exists.</p>
<p class="indent">Sometimes the most convenient way to show a strong association between two views is to collapse them into a single <em>combined view</em>,
 as dictated by step 2 of the three-step method just presented to choose
 the views. A combined view is a view that contains elements and 
relations that come from two or more other views. Combined views can be 
very useful as long as you do not try to overload them with too many 
mappings.</p>
<p class="indent">The easiest way to merge views is to create an <em>overlay</em>
 that combines the information that would otherwise have been in two 
separate views. This works well if the coupling between the two views is
 tight; that is, there are strong associations <a id="page_344"></a>between
 elements in one view and elements in the other view. If that is the 
case, the structure described by the combined view will be easier to 
understand than the two views seen separately. For an example, see the 
overlay of decomposition and uses sketches shown in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch18.html#ch18fig02">Figure 18.2</a>. In an overlay, the elements and the relations keep the types as defined in their constituent views.</p>
<div class="image"><a id="ch18fig02"></a><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/18fig02.jpg" src="18.%20Documenting%20Software%20Architectures_files/18fig02.jpg" alt="Image" height="711" width="602"></div>
<p class="fig-caption">Figure 18.2. A decomposition view overlaid with “uses” information, to create a decomposition/uses overlay.</p>
<p class="indent">The views below often combine naturally:</p>
<p class="indenthangingB">• <em>Various C&amp;C views.</em> Because 
C&amp;C views all show runtime relations among components and connectors
 of various types, they tend to combine well. Different (separate) 
C&amp;C views tend to show different parts of the system, or tend to 
show decomposition refinements of components in other views. The result 
is often a set of views that can be combined easily.</p>
<p class="indenthangingB"><a id="page_345"></a>• <em>Deployment view with either SOA or communicating-processes views.</em>
 An SOA view shows services, and a communicating-processes view shows 
processes. In both cases, these are components that are deployed onto 
processors. Thus there is a strong association between the elements in 
these views.</p>
<p class="indenthangingB">• <em>Decomposition view and any of work assignment, implementation, uses, or layered views.</em> The decomposed modules form the units of work, development, and uses. In addition, these modules populate layers.</p>
<h3 id="ch18lev1sec6">18.6. Building the Documentation Package</h3>
<p class="noindent">Remember the principle of architecture 
documentation, with which we started this chapter. This principle tells 
us that our task is to document the relevant views and to document the 
information that applies to more than one view.</p>
<h4 id="ch18lev2sec6">Documenting a View</h4>
<p class="noindent"><a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch18.html#ch18fig03">Figure 18.3</a> shows a template for documenting a view.</p>
<div class="image"><a id="ch18fig03"></a><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/18fig03.jpg" src="18.%20Documenting%20Software%20Architectures_files/18fig03.jpg" alt="Image" height="504" width="384"></div>
<p class="fig-caption">Figure 18.3. View template</p>
<p class="indent"><a id="page_346"></a>No matter what the view, the documentation for a view can be placed into a standard organization consisting of these parts:</p>
<p class="indenthangingB">• <strong>Section 1: The Primary Presentation.</strong> The <em>primary presentation</em>
 shows the elements and relations of the view. The primary presentation 
should contain the information you wish to convey about the system—in 
the vocabulary of that view. It should certainly include the primary 
elements and relations but under some circumstances might not include 
all of them. For example, you may wish to show the elements and 
relations that come into play during normal operation but relegate error
 handling or exception processing to the supporting documentation.</p>
<p class="indenthangingBP1">The primary presentation is most often 
graphical. It might be a diagram you’ve drawn in an informal notation 
using a simple drawing tool, or it might be a diagram in a semiformal or
 formal notation imported from a design or modeling tool that you’re 
using. If your primary presentation is graphical, make sure to include a
 key that explains the notation. Lack of a key is the most common 
mistake that we see in documentation in practice.</p>
<p class="indenthangingBP1">Occasionally the primary presentation will 
be textual, such as a table or a list. If that text is presented 
according to certain stylistic rules, these rules should be stated or 
incorporated by reference, as the analog to the graphical notation key. 
Regardless of whether the primary presentation is textual instead of 
graphical, its role is to present a terse summary of the most important 
information in the view.</p>
<p class="indenthangingB">• <strong>Section 2: The Element Catalog.</strong> The <em>element catalog</em>
 details at least those elements depicted in the primary presentation. 
For instance, if a diagram shows elements A, B, and C, then the element 
catalog needs to explain what A, B, and C are. In addition, if elements 
or relations relevant to this view were omitted from the primary 
presentation, they should be introduced and explained in the catalog. 
Specific parts of the catalog include the following:</p>
<p class="indenthangingBB">• <em>Elements and their properties</em>. This section names each element in the view and lists the properties of that element. Each view introduced in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch01.html#ch01">Chapter 1</a>
 listed a set of suggested properties associated with that view. For 
example, elements in a decomposition view might have the property of 
“responsibility”—an explanation of each module’s role in the system—and 
elements in a communicating-processes view might have timing parameters,
 among other things, as properties. Whether the properties are generic 
to the view chosen or the architect has introduced new ones, this is 
where they are documented and given values.</p>
<p class="indenthangingBB">• <em>Relations and their properties</em>. 
Each view has specific relation types that it depicts among the elements
 in that view. Mostly, these relations are shown in the primary 
presentation. However, if the primary presentation does not show all the
 relations or if there are exceptions to what is depicted in the primary
 presentation, this is the place to record that information.</p>
<p class="indenthangingBB">• <em>Element interfaces</em>. This section documents element interfaces.</p>
<p class="indenthangingBB"><a id="page_347"></a>• <em>Element behavior</em>. This section documents element behavior that is not obvious from the primary presentation.</p>
<p class="indenthangingB">• <strong>Section 3: Context Diagram.</strong> A <em>context diagram</em> shows how the system or portion of the system depicted in this view relates to its environment. The purpose of a <strong>context diagram</strong>
 is to depict the scope of a view. Here “context” means an environment 
with which the part of the system interacts. Entities in the environment
 may be humans, other computer systems, or physical objects, such as 
sensors or controlled devices.</p>
<p class="indenthangingB">• <strong>Section 4: Variability Guide.</strong> A <em>variability guide</em> shows how to exercise any variation points that are a part of the architecture shown in this view.</p>
<p class="indenthangingB">• <strong>Section 5: Rationale.</strong> <em>Rationale</em>
 explains why the design reflected in the view came to be. The goal of 
this section is to explain why the design is as it is and to provide a 
convincing argument that it is sound. The choice of a pattern in this 
view should be justified here by describing the architectural problem 
that the chosen pattern solves and the rationale for choosing it over 
another.</p>
<h4 id="ch18lev2sec7">Documenting Information Beyond Views</h4>
<p class="noindent">As shown in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch18.html#ch18fig04">Figure 18.4</a>, documentation beyond views can be divided into two parts:</p>
<p class="indenthangingN"><strong>1.</strong> <em>Overview of the architecture documentation.</em>
 This tells how the documentation is laid out and organized so that a 
stakeholder of the architecture can find the information he or she needs
 efficiently and reliably.</p>
<p class="indenthangingN"><strong>2.</strong> <em>Information about the architecture.</em>
 Here, the information that remains to be captured beyond the views 
themselves is a short system overview to ground any reader as to the 
purpose of the system and the way the views are related to one another, 
an overview of and rationale behind system-wide design approaches, a 
list of elements and where they appear, and a glossary and an acronym 
list for the entire architecture.</p>
<div class="image"><a id="ch18fig04"></a><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/18fig04.jpg" src="18.%20Documenting%20Software%20Architectures_files/18fig04.jpg" alt="Image" height="290" width="509"></div>
<p class="fig-caption">Figure 18.4. Summary of documentation beyond views</p>
<p class="indent"><a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch18.html#ch18fig04">Figure 18.4</a> summarizes our template for documentation beyond views. Documentation beyond views consists of the following sections:</p>
<p class="indenthangingB">• <strong>Document control information.</strong>
 List the issuing organization, the current version number, date of 
issue and status, a change history, and the procedure for submitting 
change requests to the document. Usually this is captured in the front 
matter. Change control tools can provide much of this information.</p>
<p class="indenthangingB">• <strong>Section 1: Documentation Roadmap.</strong>
 The documentation roadmap tells the reader what information is in the 
documentation and where to find it. A documentation map consists of four
 sections:</p>
<p class="indenthangingBB">• <em>Scope and summary</em>. Explain the 
purpose of the document and briefly summarize what is covered and (if 
you think it will help) what is not covered. Explain the relation to 
other documents (such as downstream design documents or upstream system 
engineering documents).</p>
<p class="indenthangingBB"><a id="page_348"></a>• <em>How the documentation is organized</em>.
 For each section in the documentation, give a short synopsis of the 
information that can be found there. An alternative to this is to use an
 annotated table of contents. This is a table that doesn’t just list 
section titles and page numbers, but also gives a synopsis with each 
entry. It provides one-stop shopping for a reader attempting to look up a
 particular kind of information.</p>
<p class="indenthangingBB">• <em>View overview</em>. The major part of 
the map describes the views that the architect has included in the 
package. For each view, the map gives the following information:</p>
<p class="indenthangingBBB">• The name of the view and what pattern it instantiates, if any.</p>
<p class="indenthangingBBB">• A description of the view’s element types,
 relation types, and property types. This lets a reader begin to 
understand the kind of information that is presented in the view.</p>
<p class="indenthangingBBB">• A description of language, modeling techniques, or analytical methods used in constructing the view.</p>
<p class="indenthangingBB">• <em>How stakeholders can use the documentation</em>.
 The map follows with a section describing which stakeholders and 
concerns are addressed by each view; this is conveniently captured as a 
table. This section shows how various stakeholders might use the 
documentation to help address their concerns. Include short scenarios, 
such as “A maintainer wishes to know the units of software that are 
likely to be changed by a proposed modification. The maintainer consults
 the decomposition view to understand the responsibilities of each 
module in order to identify the modules likely to change. The maintainer
 then consults the uses view<sup><a class="totri-footnote" id="ch18fn01" href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/footnotes.html#ch18fn01a">1</a></sup>
 to see what modules use the affected modules (and thus might also have 
to change).” To be compliant with ISO/IEC 42010-2007, you must consider 
the concerns of at least users, acquirers, developers, and maintainers.</p>
<p class="indenthangingB"><a id="page_349"></a>• <strong>Section 2: How a View Is Documented.</strong>
 This is where you explain the standard organization you’re using to 
document views—either the one described in this chapter or one of your 
own. It tells your readers how to find information in a view. If your 
organization has standardized on a template for a view, as it should, 
then you can simply refer to that standard. If you are lacking such a 
template, then text such as that given above describing our view 
template should appear in this section of your architecture 
documentation.</p>
<p class="indenthangingB">• <strong>Section 3: System Overview.</strong>
 This is a short prose description of the system’s function, its users, 
and any important background or constraints. This section provides your 
readers with a consistent mental model of the system and its purpose. 
This might be just a pointer to a concept-of-operations document.</p>
<p class="indenthangingB">• <strong>Section 4: Mapping Between Views.</strong>
 Because all the views of an architecture describe the same system, it 
stands to reason that any two views will have much in common. Helping a 
reader understand the associations between views will help that reader 
gain a powerful insight into how the architecture works as a unified 
conceptual whole.</p>
<p class="indenthangingBP1">The associations between elements across 
views in an architecture are, in general, many-to-many. For instance, 
each module may map to multiple runtime elements, and each runtime 
element may map to multiple modules.</p>
<p class="indenthangingBP1">View-to-view associations can be 
conveniently captured as tables. List the elements of the first view in 
some convenient lookup order. The table itself should be annotated or 
introduced with an explanation of the association that it depicts; that 
is, what the correspondence is between the elements across the two 
views. Examples include “is implemented by” for mapping from a 
component-and-connector view to a module view, “implements” for mapping 
from a module view to a component-and-connector view, “included in” for 
mapping from a decomposition view to a layered view, and many others.</p>
<p class="indenthangingB">• <strong>Section 5: Rationale.</strong> This 
section documents the architectural decisions that apply to more than 
one view. Prime candidates include documentation of background or 
organizational constraints or major requirements that led to decisions 
of system-wide import. The decisions about which fundamental 
architecture patterns to use are often described here.</p>
<p class="indenthangingB">• <strong>Section 6: Directory.</strong> The 
directory is a set of reference material that helps readers find more 
information quickly. It includes an index of terms, a glossary, and an 
acronym list.</p>
<h4 id="ch18lev2sec8"><a id="page_350"></a>Online Documentation, Hypertext, and Wikis</h4>
<p class="noindent">A document can be structured as linked web pages. 
Compared with documents written with a text-editing tool, web-oriented 
documents typically consist of short pages (created to fit on one 
screen) with a deeper structure. One page usually provides some overview
 information and has links to more detailed information. When done well,
 a web-based document is easier to use for people who just need overview
 information. On the other hand, it can become more difficult for people
 who need detail. Finding information can be more difficult in 
multi-page, web-based documents than in a single-file, text-based 
document, unless a search engine is available.</p>
<p class="indent">Using readily available tools, it’s possible to create a <em>shared</em>
 document that many stakeholders can contribute to. The hosting 
organization needs to decide what permissions it wants to give to 
various stakeholders; the tool used has to support the permissions 
policy. In the case of architecture documentation, we would want all 
stakeholders to comment on and add clarifying information to the 
architecture, but we would only want architects to be able to change the
 architecture or at least provide architects with a “final approval” 
mechanism. A special kind of shared document that is ideal for this 
purpose is a wiki.</p>
<h4 id="ch18lev2sec9">Follow a Release Strategy</h4>
<p class="noindent">Your project’s development plan should specify the 
process for keeping the important documentation, including architecture 
documentation, current. The architect should plan to issue releases of 
the documentation to support major project milestones, which usually 
means far enough ahead of the milestone to give developers time to put 
the architecture to work. For example, the end of each iteration or 
sprint or incremental release could be associated with providing revised
 documentation to the development team.</p>
<h4 id="ch18lev2sec10">Documenting Patterns</h4>
<p class="noindent">Architects can, and typically do, use patterns as a starting point for their design, as we have discussed in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13">Chapter 13</a>.
 These patterns might be published in existing catalogs or in an 
organization’s proprietary repository of standard designs, or created 
specifically for the problem at hand by the architect. In each of these 
cases, they provide a generic (that is, incomplete) solution approach 
that the architect will have to refine and instantiate.</p>
<p class="indent">First, record the fact that the given pattern is being
 used. Then say why this solution approach was chosen—why it is a good 
fit to the problem at hand. If the chosen approach comes from a pattern,
 this will consist essentially of showing that the problem at hand fits 
the problem and context of the pattern.</p>
<p class="indent">Using a pattern means making successive design 
decisions that eventually result in an architecture. These design 
decisions manifest themselves as newly <a id="page_351"></a>instantiated
 elements and relations among them. The architect can document a 
snapshot of the architecture at each stage. How many stages there are 
depends on many things, not the least of which is the ability of readers
 to follow the design process in case they have to revisit it in the 
future.</p>
<h3 id="ch18lev1sec7">18.7. Documenting Behavior</h3>
<p class="noindent">Documenting an architecture requires behavior 
documentation that complements structural views by describing how 
architecture elements interact with each other. Reasoning about 
characteristics such as a system’s potential to deadlock, a system’s 
ability to complete a task in the desired amount of time, or maximum 
memory consumption requires that the architecture description contain 
information about both the characteristics of individual elements as 
well as patterns of interaction among them—that is, how they behave with
 each other. In this section, we provide guidance as to what types of 
things you will want to document in order to reap these benefits. In our
 architecture view template, behavior has its own section in the element
 catalog.</p>
<p class="indent">There are two kinds of notations available for 
documenting behavior. The first kind of notation is called 
trace-oriented languages; the second is called comprehensive languages.</p>
<p class="indent"><em>Traces</em> are sequences of activities or 
interactions that describe the system’s response to a specific stimulus 
when the system is in a specific state. A trace describes a sequence of 
activities or interactions between structural elements of the system. 
Although it is conceivable to describe all possible traces to generate 
the equivalent of a comprehensive behavioral model, it is not the 
intention of trace-oriented documentation to do so. Below we describe 
four notations for documenting traces: use cases, sequence diagrams, 
communication diagrams, and activity diagrams. Although other notations 
are available (such as message sequence charts, timing diagrams, and the
 Business Process Execution Language), we have chosen these four as a 
representative sample of trace-oriented languages.</p>
<p class="indenthangingB">• <em>Use cases</em> describe how actors can 
use a system to accomplish their goals. Use cases are frequently used to
 capture the functional requirements for a system. UML provides a 
graphical notation for use case diagrams but does not say how the text 
of a use case should be written. The UML use case diagram can be used 
effectively as an overview of the actors and the behavior of a system. 
The use case description is textual and should contain the use case name
 and brief description, the actor or actors who initiate the use case 
(primary actors), other actors who participate in the use case 
(secondary actors), flow of events, alternative flows, and nonsuccess 
cases.</p>
<p class="indenthangingB">• A UML <em>sequence diagram</em> shows a sequence of interactions among instances of elements pulled from the structural documentation. It shows only <a id="page_352"></a>the
 instances participating in the scenario being documented. A sequence 
diagram has two dimensions: vertical, representing time, and horizontal,
 representing the various instances. The interactions are arranged in 
time sequence from top to bottom. <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch18.html#ch18fig05">Figure 18.5</a> is an example of a sequence diagram that illustrates the basic UML notation.</p>
<p class="indenthangingBP1">Objects (i.e., element instances) have a 
lifeline, drawn as a vertical dashed line along the time axis. The 
sequence is usually started by an actor on the far left. The instances 
interact by sending messages, which are shown as horizontal arrows. A 
message can be a method or function call, an event sent through a queue,
 or something else. The message usually maps to a resource (operation) 
in the interface of the receiver instance. A filled arrowhead on a solid
 line represents a synchronous message, whereas the open arrowhead 
represents an asynchronous message. The dashed arrow is a return 
message. The execution occurrence bars along the lifeline indicate that 
the instance is processing or blocked waiting for a return.</p>
<div class="image"><a id="ch18fig05"></a><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/18fig05.jpg" src="18.%20Documenting%20Software%20Architectures_files/18fig05.jpg" alt="Image" height="544" width="602"></div>
<p class="fig-caption">Figure 18.5. A simple example of a UML sequence diagram</p>
<p class="indenthangingB"><a id="page_353"></a>• A UML <em>communication diagram</em>
 shows a graph of interacting elements and annotates each interaction 
with a number denoting order. Similarly to sequence diagrams, instances 
shown in a communication diagram are elements described in the 
accompanying structural documentation. Communication diagrams are useful
 when the task is to verify that an architecture can fulfill the 
functional requirements. The diagrams are not useful if the 
understanding of concurrent actions is important, as when conducting a 
performance analysis.</p>
<p class="indenthangingB">• UML <em>activity diagrams</em> are similar 
to flow charts. They show a business process as a sequence of steps 
(called actions) and include notation to express conditional branching 
and concurrency, as well as to show sending and receiving events. Arrows
 between actions indicate the flow of control. Optionally, activity 
diagrams can indicate the architecture element or actor performing the 
actions. Activity diagrams can express concurrency. A fork node 
(depicted as a thick bar orthogonal to the flow arrows) splits the flow 
into two or more concurrent flows of actions. The concurrent flows may 
later be synchronized into a single flow through a join node (also 
depicted as an orthogonal bar). The join node waits for all incoming 
flows to complete before proceeding. Different from sequence and 
communication diagrams, activity diagrams don’t show the actual 
operations being performed on specific objects. Activity diagrams are 
useful to broadly describe the steps in a specific workflow. Conditional
 branching (diamond symbol) allows a single diagram to represent 
multiple traces, although it’s not usually the intent of an activity 
diagram to show all possible traces or the complete behavior for the 
system or part of it.</p>
<p class="indent">In contrast to trace notations, <em>comprehensive models</em>
 show the complete behavior of structural elements. Given this type of 
documentation, it is possible to infer all possible paths from initial 
state to final state. The state machine formalism represents the 
behavior of architecture elements because each state is an abstraction 
of all possible histories that could lead to that state. State machine 
languages allow you to complement a structural description of the 
elements of the system with constraints on interactions and timed 
reactions to both internal and environmental stimuli.</p>
<p class="indent">UML state machine diagram notation is based on the 
statechart graphical formalism developed by David Harel for modeling 
reactive systems; it allows you to trace the behavior of your system, 
given specific inputs. A UML state machine diagram shows states 
represented as boxes and transitions between states represented as 
arrows. The state machine diagrams help to model elements of the 
architecture and help to illustrate their runtime interactions. <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch18.html#ch18fig06">Figure 18.6</a> is a simple example showing the states of a vehicle cruise control system.</p>
<div class="image"><a id="page_354"></a><a id="ch18fig06"></a><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/18fig06.jpg" src="18.%20Documenting%20Software%20Architectures_files/18fig06.jpg" alt="Image" height="214" width="601"></div>
<p class="fig-caption">Figure 18.6. UML state machine diagram for the cruise control system of a motor vehicle</p>
<p class="indent">Each transition in a state machine diagram is labeled with the event causing the transition. For example, in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch18.html#ch18fig06">Figure 18.6</a>,
 the transitions correspond to the buttons the driver can press or 
driving actions that affect the cruise control system. Optionally, the 
transition can specify a guard condition, which is enclosed in brackets.
 When the event corresponding to the transition occurs, the guard 
condition is evaluated and the transition is only enabled if the guard 
is true at that time. Transitions can also have consequences, called 
actions or effects, indicated by a slash. When an action is noted, it 
indicates that the behavior following the slash will be performed when 
the transition occurs. The states may also specify entry and exit 
actions.</p>
<p class="indent">Other notations exist for describing comprehensive 
behavior. For example, Architecture Analysis and Design Language (AADL) 
can be used to reason about runtime behavior. Specification and 
Description Language (SDL) is used in telephony.</p>
<h3 id="ch18lev1sec8">18.8. Architecture Documentation and Quality Attributes</h3>
<p class="noindent">If architecture is largely about the achievement of 
quality attributes and if one of the main uses of architecture 
documentation is to serve as a basis for analysis (to make sure the 
architecture will achieve its required quality attributes), where do 
quality attributes show up in the documentation? Short of a full-fledged
 quality view (see page <a href="#ch18lev2sec5">340</a>), there are five major ways:</p>
<p class="indenthangingN"><strong>1.</strong> Any major design approach 
(such as an architecture pattern) will have quality attribute properties
 associated with it. Client-server is good for scalability, layering is 
good for portability, an information-hiding-based decomposition is good 
for modifiability, services are good for interoperability, and so forth.
 Explaining the choice of approach is likely to include a discussion 
about the satisfaction of quality attribute requirements and <a id="page_355"></a>tradeoffs incurred. Look for the place in the documentation where such an explanation occurs. In our approach, we call that <em>rationale</em>.</p>
<p class="indenthangingN"><strong>2.</strong> Individual architectural 
elements that provide a service often have quality attribute bounds 
assigned to them. Consumers of the services need to know how fast, 
secure, or reliable those services are. These quality attribute bounds 
are defined in the interface documentation for the elements, sometimes 
in the form of a service-level agreement. Or they may simply be recorded
 as <em>properties</em> that the elements exhibit.</p>
<p class="indenthangingN"><strong>3.</strong> Quality attributes often 
impart a “language” of things that you would look for. Security involves
 security levels, authenticated users, audit trails, firewalls, and the 
like. Performance brings to mind buffer capacities, deadlines, periods, 
event rates and distributions, clocks and timers, and so on. 
Availability conjures up mean time between failure, failover mechanisms,
 primary and secondary functionality, critical and noncritical 
processes, and redundant elements. Someone fluent in the “language” of a
 quality attribute can search for the kinds of architectural elements 
(and properties of those elements) that were put in place precisely to 
satisfy that quality attribute requirement.</p>
<p class="indenthangingN"><strong>4.</strong> Architecture documentation often contains a <em>mapping to requirements</em>
 that shows how requirements (including quality attribute requirements) 
are satisfied. If your requirements document establishes a requirement 
for availability, for instance, then you should be able to look it up by
 name or reference in your architecture document to see the places where
 that requirement is satisfied.</p>
<p class="indenthangingN"><strong>5.</strong> Every quality attribute 
requirement will have a constituency of stakeholders who want to know 
that it is going to be satisfied. For these stakeholders, the architect 
should provide a special place in the documentation’s introduction that 
either provides what the stakeholder is looking for, or tells the 
stakeholder where in the document to find it. It would say something 
like this: “If you are a performance analyst, you should pay attention 
to the processes and threads and their properties (defined [here]), and 
their deployment on the underlying hardware platform (defined [here]).” 
In our documentation approach, we put this 
here’s-what-you’re-looking-for information in a section called the 
documentation roadmap.</p>
<h3 id="ch18lev1sec9">18.9. Documenting Architectures That Change Faster Than You Can Document Them</h3>
<p class="noindent">When your web browser encounters a file type it’s 
never seen before, odds are that it will go to the Internet, search for 
and download the appropriate plug-in to handle the file, install it, and
 reconfigure itself to use it. Without even needing to <a id="page_356"></a>shut
 down, let alone go through the code-integrate-test development cycle, 
the browser is able to change its own architecture by adding a new 
component.</p>
<p class="indent">Service-oriented systems that utilize dynamic service 
discovery and binding also exhibit these properties. More challenging 
systems that are highly dynamic, self-organizing, and reflective 
(meaning self-aware) already exist. In these cases, the identities of 
the components interacting with each other cannot be pinned down, let 
alone their interactions, in any static architecture document.</p>
<p class="indent">Another kind of architectural dynamism, equally 
challenging from a documentation perspective, is found in systems that 
are rebuilt and redeployed with great rapidity. Some development shops, 
such as those responsible for commercial websites, build and “go live” 
with their system many times every day.</p>
<p class="indent">Whether an architecture changes at runtime, or as a 
result of a high-frequency release-and-deploy cycle, the changes occur 
much faster than the documentation cycle. In either case, nobody is 
going to hold up things until a new architecture document is produced, 
reviewed, and released.</p>
<p class="indent">But knowing the architecture of these systems is every
 bit as important, and arguably more so, than for systems in the world 
of more traditional life cycles. Here’s what you can do if you’re an 
architect in a highly dynamic environment:</p>
<p class="indenthangingB">• <em>Document what is true about all versions of your system.</em>
 Your web browser doesn’t go out and grab just any piece of software 
when it needs a new plug-in; a plug-in must have specific properties and
 a specific interface. And it doesn’t just plug in anywhere, but in a 
predetermined location in the architecture. Record those invariants as 
you would for any architecture. This may make your documented 
architecture more a description of constraints or guidelines that any 
compliant version of the system must follow. That’s fine.</p>
<p class="indenthangingB">• <em>Document the ways the architecture is allowed to change.</em>
 In the previous examples, this will usually mean adding new components 
and replacing components with new implementations. In the Views and 
Beyond approach, the place to do this is called the variability guide 
(captured in Section 4 of our view template).</p>
<h3 id="ch18lev1sec10">18.10. Documenting Architecture in an Agile Development Project</h3>
<p class="noindent">“Agile” refers to an approach to software 
development that emphasizes rapid and flexible development and 
de-emphasizes project and process infrastructure for their own sake. In <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch15.html#ch15">Chapter 15</a>
 we discuss the relationships between architecture and Agile. Here we 
focus just on how to document architecture in an Agile environment.</p>
<p class="indent"><a id="page_357"></a>The Views and Beyond and Agile 
philosophies agree strongly on a central point: If information isn’t 
needed, don’t document it. All documentation should have an intended use
 and audience in mind, and be produced in a way that serves both. One of
 the fundamental principles of technical documentation is “Write for the
 reader.” That means understanding who will read the documentation and 
how they will use it. If there is no audience, there is no need to 
produce the documentation.</p>
<p class="indent">Architecture view selection is an example of applying 
this principle. The Views and Beyond approach prescribes producing a 
view if and only if it addresses the concerns of an explicitly 
identified stakeholder community.</p>
<p class="indent">Another central idea to remember is that documentation
 is not a monolithic activity that holds up all other progress until it 
is complete. The view selection method given earlier prescribes 
producing the documentation in prioritized stages to satisfy the needs 
of the stakeholders who need it now.</p>
<p class="indent">When producing Views and Beyond-based architecture documentation using Agile principles, keep the following in mind:</p>
<p class="indenthangingB">• Adopt a template or standard organization to capture your design decisions.</p>
<p class="indenthangingB">• Plan to document a view if (but only if) it has a strongly identified stakeholder constituency.</p>
<p class="indenthangingB">• Fill in the sections of the template for a 
view, and for information beyond views, when (and in whatever order) the
 information becomes available. But only do this if writing down this 
information will make it easier (or cheaper or make success more likely)
 for someone downstream doing their job.</p>
<p class="indenthangingB">• Don’t worry about creating an architectural 
design document and then a finer-grained design document. Produce just 
enough design information to allow you to move on to code. Capture the 
design information in a format that is simple to use and simple to 
change—a wiki, perhaps.</p>
<p class="indenthangingB">• Don’t feel obliged to fill up all sections 
of the template, and certainly not all at once. We still suggest you 
define and use rich templates because they may be useful in some 
situations. But you can always write “N/A” for the sections for which 
you don’t need to record the information (perhaps because you will 
convey it orally).</p>
<p class="indenthangingB">• Agile teams sometimes make models in brief 
discussions by the whiteboard. When documenting a view, the primary 
presentation may consist of a digital picture of the whiteboard. Further
 information about the elements (element catalog), rationale discussion 
(architecture background), variability mechanisms being used 
(variability guide), and all else can be communicated verbally to the 
team—at least for now. Later on, if you find out that it’s useful to 
record a piece of information about an element, a context diagram, 
rationale for a certain design decision, or something else, the template
 will have the right place ready to receive it.</p>
<div class="sidebar"><a id="page_358"></a><hr>
<p class="title"><a id="ch18sb02"></a>The Software You’re Delivering Isn’t the Only Software That Matters</p>
<p class="sb-noindent">About ninety-nine percent of the treatment of 
architecture in this book (and others) is concerned with the software 
elements that make up the operational system that is delivered to its 
customer. Component-and-connector views show the units of runtime 
behavior of <em>that</em> system. Module views show the units of implementation that have to be built in order to create <em>that</em> system.</p>
<p class="sb-indent">A colleague of mine is a project manager for a 
Fortune 500 software company. On the day I wrote this sidebar, she found
 out that the development platform her project relied on had been 
infected with a virulent new virus, and the company’s IT department was 
removing it from service, along with <em>all</em> the backup images, 
until the virus could be completely removed. That was going to take 
about five days. After that, all of her project’s software and tooling 
would have to be reinstalled and brought back up to latest-version 
status. Her project was in user final acceptance test, racing against a 
delivery deadline, and the IT department’s decision doomed her project 
to join the countless others in our industry that are delivered late. 
The snarling email she sent to the IT department for (a) allowing the 
platform to become infected and (b) not providing a backup platform 
(real or virtual) in a timely fashion would melt your screen.</p>
<p class="sb-indent">The treatment of software architecture we describe 
in this book is perfectly capable of representing and usefully 
incorporating software other than the software that your customer is 
paying you to deliver. Allocation views, recall, are about mapping that 
software to structures in the environment. “Uses” views show which 
software elements rely on the correct presence of other software in 
order to work. Context diagrams are all about showing relations between 
your system and important elements of its environment. It would be the 
easiest thing in the world to use these constructs to represent support 
software including, in my friend’s case, the development platform.</p>
<p class="sb-indent">An avionics project I worked on years ago included 
in our decomposition view a module called the System Generation Module. 
This consisted of all of the software we needed to construct a loadable 
image of the product we were building. Not a single byte of code from 
the System Generation Module made it onto the aircraft, but it was as 
important as any other. Even if you don’t build any of your support 
software but use off-the-shelf development tools from your favorite 
vendor, someone in your organization is responsible for the care and 
feeding of that software: its acquisition, installation, configuration, 
and upgrade. That constitutes a nontrivial work assignment, which 
suggests that support software also belongs in the work assignment view 
(a kind of allocation view). And of course you always build <em>some</em> of it yourself—test scripts, build scripts, and so forth—so it’s even more deserving of a place in your architecture.</p>
<p class="sb-indent"><a id="page_359"></a>Promoting support and 
development software to first-class architectural status makes us ask 
the right questions about it, especially the most important one: What 
quality attributes do we require of it? Will it provide us with the 
right security if (for example) we want to exclude our subcontracting 
partners from access to some of our IP during development? Will it have 
the availability to be up and running at 2 a.m. Sunday morning when our 
project goes into its inevitable final delivery crunch? And if it 
crashes, will the IT folks have someone standing by to bring it back up?
 Will it be modifiable or configurable enough to support the way your 
project intends to use it?</p>
<p class="sb-indent">Think about what other software and environmental 
resources your project depends on, and consider using the architectural 
tools, models, views, and concepts at your disposal to help you do what 
architecture always helps you do: Ask the right questions at the right 
time to expose risks and begin to mitigate them. These concepts include 
quality attribute scenarios, “uses” views, and deployment and work 
assignment views that include support software.</p>
<p class="attribution">—<em>PCC</em></p>
<hr></div>
<h3 id="ch18lev1sec11">18.11. Summary</h3>
<p class="noindent">Writing architectural documentation is much like 
other types of writing. You must understand the uses to which the 
writing is to be put and the audience for the writing. Architectural 
documentation serves as a means for communication among various 
stakeholders, not only up the management chain and down to the 
developers but also across to peers.</p>
<p class="indent">An architecture is a complicated artifact, best 
expressed by focusing on particular perspectives depending on the 
message to be communicated. These perspectives are called views, and you
 must choose the views to document, must choose the notation to document
 these views, and must choose a set of views that is both minimal and 
adequate. This may involve combining various views that have a large 
overlap. You must document not only the structure of the architecture 
but also the behavior.</p>
<p class="indent">Once you have decided on the views, you must decide 
how to package the documentation. The packaging will depend on the media
 used for expressing the documentation. Print has different 
characteristics for understanding and grouping than various online 
media. Different online media will also have different characteristics.</p>
<p class="indent">The context of the project will also affect the 
documentation. Some of the contextual factors are the important quality 
attributes of the system, the rate of change of the system, and the 
project management strategy.</p>
<h3 id="ch18lev1sec12"><a id="page_360"></a>18.12. For Further Reading</h3>
<p class="noindent"><em>Documenting Software Architectures</em> (second edition) <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_051">[Clements 10a]</a>
 is a comprehensive treatment of the Views and Beyond approach. It 
describes a multitude of different views and notations for them. It also
 describes how to package the documentation into a coherent whole.</p>
<p class="indent">ISO/IEC/IEEE 42010:2011 (“eye-so-forty-two-ten” for short) is the ISO (and IEEE) standard <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_099">[ISO 11]</a> <em>Systems and software engineering—Architecture description</em>.
 The first edition of that standard, IEEE Std. 1471-2000, was developed 
by an IEEE working group drawing on experience from industry, academia, 
and other standards bodies between 1995 and 2000. ISO/IEC/IEEE 42010 is 
centered on two key ideas: a conceptual framework for architecture 
description and a statement of what information must be found in any 
ISO/IEC/IEEE 42010-compliant architecture description, using multiple 
viewpoints driven by stakeholders’ concerns.</p>
<p class="indent">Under ISO/IEC/IEEE 42010, as in the Views and Beyond approach, <em>views</em> have a central role in documenting software architecture. The architecture description of a system includes one or more views.</p>
<p class="indent">If you want to use the Views and Beyond approach to 
produce an ISO/IEC/IEEE 42010-compliant architecture document, you 
certainly can. The main additional obligation is to choose and document a
 set of viewpoints, identifying the stakeholders, their concerns, and 
the elements catalog for each view, and (to a lesser degree) address 
ISO/IEC/IEEE 42010’s other required information content.</p>
<p class="indent">AADL is an SAE standard. The SAE is an organization 
for engineering professionals in the aerospace, automotive, and 
commercial vehicle industries. The website for the AADL standard is at <a href="http://www.aadl.info/">www.aadl.info</a>.</p>
<p class="indent">SDL is a notation used in the telecom industry. It is 
targeted at describing the behavior of reactive and distributed systems 
in general and telecom systems in particular. A real-time version of SDL
 can be found at <a href="http://www.sdl-rt.org/standard/V2.2/pdf/SDL-RT.pdf">www.sdl-rt.org/standard/V2.2/pdf/SDL-RT.pdf</a>.</p>
<p class="indent">UML 2.0 added several features specifically to allow 
architecture to be modeled, such as ports. It is managed by the Object 
Management Group and can be found at <a href="http://www.omg.org/spec/UML/">www.omg.org/spec/UML/</a>.</p>
<h3 id="ch18lev1sec13">18.13. Discussion Questions</h3>
<p class="question"><strong>1.</strong> Go to the website of your 
favorite open source system. On the site, look for the architectural 
documentation for that system. What is there? What is missing? How would
 this affect your ability to contribute code to this project?</p>
<p class="question"><a id="page_361"></a><strong>2.</strong> Banks are 
justifiably cautious about security. Sketch the documentation you would 
need for an automatic teller machine (ATM) in order to reason about its 
security architecture.</p>
<p class="question"><strong>3.</strong> Suppose your company has just 
purchased another company and that you have been given the task of 
merging a system in your company with a similar system in the other 
company. What views of the other system’s architecture would you like to
 see and why? Would you ask for the same views of both systems?</p>
<p class="question"><strong>4.</strong> When would you choose to 
document behavior using trace models or using comprehensive models? What
 value do you get and what effort is required for each of them?</p>
<p class="question"><strong>5.</strong> How much of a project’s budget 
would you devote to software architecture documentation? Why? How would 
you measure the cost and the benefit?</p>
<p class="question"><strong>6.</strong> Antony Tang, an architect and one of the reviewers of this book, says that he has used a <em>development view</em>—a
 kind of quality view—that describes how the software should be 
developed in relation to the use of tools and development workflows, the
 use of standard library routines such as for exception handling, some 
coding conventions and standards, and some testing and deployment 
conventions. Sketch a definition of a development view.</p>
<div class="annotator-outer annotator-viewer annotator-hide viewer">
  <ul class="annotator-widget annotator-listing"></ul>
</div><div class="annotator-editor-wrapper"><div class="annotator-outer annotator-editor annotator-hide">
  <h3 class="title">Highlight</h3><form class="annotator-widget">
    <ul class="annotator-listing"><li class="annotator-item"><textarea maxlength="750" placeholder="Add a note (optional)" id="annotator-field-9"></textarea></li></ul>
    <div class="annotator-controls">
      <a href="#cancel" class="annotator-cancel button">Cancel</a>
<a href="#save" class="annotator-save annotator-focus button positive">Save</a>
    </div>
  </form>
</div></div><div style="display: none;" class="annotator-adder"><button><span></span></button></div></div></div>



  <div class="t-sbo-prev sbo-prev sbo-nav-bottom">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch17.html" class="prev nav-link">
      
          <span aria-hidden="true" class="pagination-label t-prev-label">Prev</span>
          <span class="visuallyhidden">Previous Chapter</span>
          <div class="pagination-title t-prev-title">17. Designing an Architecture</div>
        </a>
    
  
  </div>

  <div class="t-sbo-next sbo-next sbo-nav-bottom">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch19.html" class="next nav-link">
      
          <span aria-hidden="true" class="pagination-label t-next-label">Next</span>
          <span class="visuallyhidden">Next Chapter</span>
          <div class="pagination-title t-next-title">19. Architecture, Implementation, and Testing</div>
        </a>
    
  
  </div>

</section>
    <div class="reading-controls-bottom">
      <ul class="interface-controls js-bitlist">
        <li class="queue-control">
            <button title="Add to Queue" aria-label="Add to Queue" data-for-analytics="9780132942799:ch18.html" type="button" class="rec-fav ss-queue js-queue js-current-chapter-queue" data-queue-endpoint="/api/v1/book/9780132942799/chapter/ch18.html">
      <span>Add to Queue</span>
  </button>
        </li>
      </ul>
    </div>
  </div>
  <div class="js-related-container related"><div>
  <h2 class="bitlist-header">People who finished this also enjoyed:</h2>
  <a href="#" class="js-disable-reader-recommendations disable-reader-recommendations-btn" title="Disable our reader recommendations, you can re-enable them in your preferences."></a>
<ul class="articlelist js-bitlist t-bitlist js-related"> 
  

    
      
        





<li class="js-bit format-book js-related js-card" data-api-url="/api/v1/book/9780132906135/chapter/ch30.html">
  <div class="info">

    
    <div class="controls">
      <span class="format-title">
        Book Section
      </span>

      
        <button title="Add to Queue" aria-label="Add to Queue" type="button" class="rec-fav ss-queue js-queue" data-queue-endpoint="/api/v1/book/9780132906135/chapter/ch30.html" data-for-analytics="9780132906135:ch30.html">
            <span>Add to Queue</span>
        </button>
      

      
    </div>
    

    <div class="main">
      <span class="cover">
        <a href="https://www.safaribooksonline.com/library/view/software-systems-architecture/9780132906135/ch30.html">
          
          <span><img src="18.%20Documenting%20Software%20Architectures_files/a_008.jpg"></span>
         </a>
      </span>

      <a href="https://www.safaribooksonline.com/library/view/software-systems-architecture/9780132906135/ch30.html" class="next title-block js-bit-title t-bit-link">
        <span class="chapter-title t-bit-title">Working as a Software Architect</span>
      </a>
      <span class="book-title">from: <a href="https://www.safaribooksonline.com/library/view/software-systems-architecture/9780132906135/" class="t-book-title gray-link next">Software Systems Architecture: Working with Stakeholders Using Viewpoints and Perspectives, Second Edition</a>
        <span class="author">by Nick Rozanski</span>
        <span class="issued">Released: October 2011</span>
      </span>

      
  <div class="progress">
    
      <span class="t-time">25 mins</span>
    
  </div>




      
        


  

  <div class="book-topics">
  
    
      
        
        


<ul class="topic-display">

  
	  <li><a href="https://www.safaribooksonline.com/topics/enterprise-architecture" class="topic t-t-link" data-topic-slug="enterprise-architecture">Enterprise Architecture</a></li>
  

</ul>

      
    

  
  </div>

      
    </div>
    
  </div>

</li>


      
    

  

    
      
        





<li class="js-bit format-book js-related js-card" data-api-url="/api/v1/book/0131489062/chapter/ch08.html">
  <div class="info">

    
    <div class="controls">
      <span class="format-title">
        Book Section
      </span>

      
        <button title="Add to Queue" aria-label="Add to Queue" type="button" class="rec-fav ss-queue js-queue" data-queue-endpoint="/api/v1/book/0131489062/chapter/ch08.html" data-for-analytics="0131489062:ch08.html">
            <span>Add to Queue</span>
        </button>
      

      
    </div>
    

    <div class="main">
      <span class="cover">
        <a href="https://www.safaribooksonline.com/library/view/applying-uml-and/0131489062/ch08.html">
          
          <span><img src="18.%20Documenting%20Software%20Architectures_files/a_004.jpg"></span>
         </a>
      </span>

      <a href="https://www.safaribooksonline.com/library/view/applying-uml-and/0131489062/ch08.html" class="next title-block js-bit-title t-bit-link">
        <span class="chapter-title t-bit-title">Iteration 1—Basics</span>
      </a>
      <span class="book-title">from: <a href="https://www.safaribooksonline.com/library/view/applying-uml-and/0131489062/" class="t-book-title gray-link next">Applying UML and Patterns: An Introduction to Object-Oriented Analysis and Design and Iterative Development, Third Edition</a>
        <span class="author">by Craig Larman</span>
        <span class="issued">Released: October 2004</span>
      </span>

      
  <div class="progress">
    
      <span class="t-time">10 mins</span>
    
  </div>




      
        


  

  <div class="book-topics">
  
    
      
        
        


<ul class="topic-display">

  
	  <li><a href="https://www.safaribooksonline.com/topics/design-patterns" class="topic t-t-link" data-topic-slug="design-patterns">Design Patterns</a></li>
  

</ul>

      
    

  
  </div>

      
    </div>
    
  </div>

</li>


      
    

  

    
      
        





<li class="js-bit format-book js-related js-card" data-api-url="/api/v1/book/9780132107549/chapter/ch41.html">
  <div class="info">

    
    <div class="controls">
      <span class="format-title">
        Book Section
      </span>

      
        <button title="Add to Queue" aria-label="Add to Queue" type="button" class="rec-fav ss-queue js-queue" data-queue-endpoint="/api/v1/book/9780132107549/chapter/ch41.html" data-for-analytics="9780132107549:ch41.html">
            <span>Add to Queue</span>
        </button>
      

      
    </div>
    

    <div class="main">
      <span class="cover">
        <a href="https://www.safaribooksonline.com/library/view/domain-specific-languages/9780132107549/ch41.html">
          
          <span><img src="18.%20Documenting%20Software%20Architectures_files/a_010.jpg"></span>
         </a>
      </span>

      <a href="https://www.safaribooksonline.com/library/view/domain-specific-languages/9780132107549/ch41.html" class="next title-block js-bit-title t-bit-link">
        <span class="chapter-title t-bit-title">Chapter 41. Dynamic Reception</span>
      </a>
      <span class="book-title">from: <a href="https://www.safaribooksonline.com/library/view/domain-specific-languages/9780132107549/" class="t-book-title gray-link next">Domain Specific Languages</a>
        <span class="author">by Martin Fowler</span>
        <span class="issued">Released: September 2010</span>
      </span>

      
  <div class="progress">
    
      <span class="t-time">26 mins</span>
    
  </div>




      
        


  

  <div class="book-topics">
  
    
      
        
        


<ul class="topic-display">

  
	  <li><a href="https://www.safaribooksonline.com/topics/groovy" class="topic t-t-link" data-topic-slug="groovy">Groovy</a></li>
  

  
	  <li><a href="https://www.safaribooksonline.com/topics/software-development" class="topic t-t-link" data-topic-slug="software-development">Software Development</a></li>
  

</ul>

      
    

  
  </div>

      
    </div>
    
  </div>

</li>


      
    

  

    
      
        





<li class="js-bit format-book js-related js-card" data-api-url="/api/v1/book/0596007957/chapter/ch06.html">
  <div class="info">

    
    <div class="controls">
      <span class="format-title">
        Book Section
      </span>

      
        <button title="Add to Queue" aria-label="Add to Queue" type="button" class="rec-fav ss-queue js-queue" data-queue-endpoint="/api/v1/book/0596007957/chapter/ch06.html" data-for-analytics="0596007957:ch06.html">
            <span>Add to Queue</span>
        </button>
      

      
    </div>
    

    <div class="main">
      <span class="cover">
        <a href="https://www.safaribooksonline.com/library/view/uml-20-in/0596007957/ch06.html">
          
          <span><img src="18.%20Documenting%20Software%20Architectures_files/a_006.jpg"></span>
         </a>
      </span>

      <a href="https://www.safaribooksonline.com/library/view/uml-20-in/0596007957/ch06.html" class="next title-block js-bit-title t-bit-link">
        <span class="chapter-title t-bit-title">Deployment Diagrams</span>
      </a>
      <span class="book-title">from: <a href="https://www.safaribooksonline.com/library/view/uml-20-in/0596007957/" class="t-book-title gray-link next">UML 2.0 in a Nutshell</a>
        <span class="author">by Dan Pilone...</span>
        <span class="issued">Released: June 2005</span>
      </span>

      
  <div class="progress">
    
      <span class="t-time">5 mins</span>
    
  </div>




      
        


  

  <div class="book-topics">
  
    
      
        
        


<ul class="topic-display">

  
	  <li><a href="https://www.safaribooksonline.com/topics/software-development" class="topic t-t-link" data-topic-slug="software-development">Software Development</a></li>
  

</ul>

      
    

  
  </div>

      
    </div>
    
  </div>

</li>


      
    

  

    
      
        





<li class="js-bit format-book js-related js-card" data-api-url="/api/v1/book/0672327988/chapter/ch15.html">
  <div class="info">

    
    <div class="controls">
      <span class="format-title">
        Book Section
      </span>

      
        <button title="Add to Queue" aria-label="Add to Queue" type="button" class="rec-fav ss-queue js-queue" data-queue-endpoint="/api/v1/book/0672327988/chapter/ch15.html" data-for-analytics="0672327988:ch15.html">
            <span>Add to Queue</span>
        </button>
      

      
    </div>
    

    <div class="main">
      <span class="cover">
        <a href="https://www.safaribooksonline.com/library/view/software-testing-second/0672327988/ch15.html">
          
          <span><img src="18.%20Documenting%20Software%20Architectures_files/a_003.jpg"></span>
         </a>
      </span>

      <a href="https://www.safaribooksonline.com/library/view/software-testing-second/0672327988/ch15.html" class="next title-block js-bit-title t-bit-link">
        <span class="chapter-title t-bit-title">Automated Testing and Test Tools</span>
      </a>
      <span class="book-title">from: <a href="https://www.safaribooksonline.com/library/view/software-testing-second/0672327988/" class="t-book-title gray-link next">Software Testing, Second Edition</a>
        <span class="author">by Ron Patton</span>
        <span class="issued">Released: July 2005</span>
      </span>

      
  <div class="progress">
    
      <span class="t-time">38 mins</span>
    
  </div>




      
        


  

  <div class="book-topics">
  
    
      
        
        


<ul class="topic-display">

  
	  <li><a href="https://www.safaribooksonline.com/topics/software-development" class="topic t-t-link" data-topic-slug="software-development">Software Development</a></li>
  

</ul>

      
    

  
  </div>

      
    </div>
    
  </div>

</li>


      
    

  

    
      
        





<li class="js-bit format-book js-related js-card" data-api-url="/api/v1/book/0321127420/chapter/ch17.html">
  <div class="info">

    
    <div class="controls">
      <span class="format-title">
        Book Section
      </span>

      
        <button title="Add to Queue" aria-label="Add to Queue" type="button" class="rec-fav ss-queue js-queue" data-queue-endpoint="/api/v1/book/0321127420/chapter/ch17.html" data-for-analytics="0321127420:ch17.html">
            <span>Add to Queue</span>
        </button>
      

      
    </div>
    

    <div class="main">
      <span class="cover">
        <a href="https://www.safaribooksonline.com/library/view/patterns-of-enterprise/0321127420/ch17.html">
          
          <span><img src="18.%20Documenting%20Software%20Architectures_files/a_009.jpg"></span>
         </a>
      </span>

      <a href="https://www.safaribooksonline.com/library/view/patterns-of-enterprise/0321127420/ch17.html" class="next title-block js-bit-title t-bit-link">
        <span class="chapter-title t-bit-title">Chapter 17. Session State Patterns</span>
      </a>
      <span class="book-title">from: <a href="https://www.safaribooksonline.com/library/view/patterns-of-enterprise/0321127420/" class="t-book-title gray-link next">Patterns of Enterprise Application Architecture</a>
        <span class="author">by Martin Fowler</span>
        <span class="issued">Released: November 2002</span>
      </span>

      
  <div class="progress">
    
      <span class="t-time">15 mins</span>
    
  </div>




      
        


  

  <div class="book-topics">
  
    
      
        
        


<ul class="topic-display">

  
	  <li><a href="https://www.safaribooksonline.com/topics/design-patterns" class="topic t-t-link" data-topic-slug="design-patterns">Design Patterns</a></li>
  

</ul>

      
    

  
  </div>

      
    </div>
    
  </div>

</li>


      
    

  

    
      
        





<li class="js-bit format-book js-related js-card" data-api-url="/api/v1/book/0321247140/chapter/ch17.html">
  <div class="info">

    
    <div class="controls">
      <span class="format-title">
        Book Section
      </span>

      
        <button title="Add to Queue" aria-label="Add to Queue" type="button" class="rec-fav ss-queue js-queue" data-queue-endpoint="/api/v1/book/0321247140/chapter/ch17.html" data-for-analytics="0321247140:ch17.html">
            <span>Add to Queue</span>
        </button>
      

      
    </div>
    

    <div class="main">
      <span class="cover">
        <a href="https://www.safaribooksonline.com/library/view/design-patterns-explained/0321247140/ch17.html">
          
          <span><img src="18.%20Documenting%20Software%20Architectures_files/a_005.jpg"></span>
         </a>
      </span>

      <a href="https://www.safaribooksonline.com/library/view/design-patterns-explained/0321247140/ch17.html" class="next title-block js-bit-title t-bit-link">
        <span class="chapter-title t-bit-title">Chapter 17 The Decorator Pattern</span>
      </a>
      <span class="book-title">from: <a href="https://www.safaribooksonline.com/library/view/design-patterns-explained/0321247140/" class="t-book-title gray-link next">Design Patterns Explained: A New Perspective on Object-Oriented Design, Second Edition</a>
        <span class="author">by James R. Trott...</span>
        <span class="issued">Released: October 2004</span>
      </span>

      
  <div class="progress">
    
      <span class="t-time">16 mins</span>
    
  </div>




      
        


  

  <div class="book-topics">
  
    
      
        
        


<ul class="topic-display">

  
	  <li><a href="https://www.safaribooksonline.com/topics/design-patterns" class="topic t-t-link" data-topic-slug="design-patterns">Design Patterns</a></li>
  

</ul>

      
    

  
  </div>

      
    </div>
    
  </div>

</li>


      
    

  

    
      
        





<li class="js-bit format-book js-related js-card" data-api-url="/api/v1/book/0321439104/chapter/ch01.html">
  <div class="info">

    
    <div class="controls">
      <span class="format-title">
        Book Section
      </span>

      
        <button title="Add to Queue" aria-label="Add to Queue" type="button" class="rec-fav ss-queue js-queue" data-queue-endpoint="/api/v1/book/0321439104/chapter/ch01.html" data-for-analytics="0321439104:ch01.html">
            <span>Add to Queue</span>
        </button>
      

      
    </div>
    

    <div class="main">
      <span class="cover">
        <a href="https://www.safaribooksonline.com/library/view/practical-software-estimation/0321439104/ch01.html">
          
          <span><img src="18.%20Documenting%20Software%20Architectures_files/a_002.jpg"></span>
         </a>
      </span>

      <a href="https://www.safaribooksonline.com/library/view/practical-software-estimation/0321439104/ch01.html" class="next title-block js-bit-title t-bit-link">
        <span class="chapter-title t-bit-title">Chapter 1: Introduction</span>
      </a>
      <span class="book-title">from: <a href="https://www.safaribooksonline.com/library/view/practical-software-estimation/0321439104/" class="t-book-title gray-link next">Practical Software Estimation: Function Point Methods for Insourced and Outsourced Projects</a>
        <span class="author">by M. A. Parthasarathy</span>
        <span class="issued">Released: February 2007</span>
      </span>

      
  <div class="progress">
    
      <span class="t-time">37 mins</span>
    
  </div>




      
        


  

  <div class="book-topics">
  
    
      
        
        


<ul class="topic-display">

  
	  <li><a href="https://www.safaribooksonline.com/topics/business-management" class="topic t-t-link" data-topic-slug="business-management">Business &amp; Management</a></li>
  

</ul>

      
    

  
  </div>

      
    </div>
    
  </div>

</li>


      
    

  

    
      
        





<li class="js-bit format-book js-related js-card" data-api-url="/api/v1/book/0321246942/chapter/ch01.html">
  <div class="info">

    
    <div class="controls">
      <span class="format-title">
        Book Section
      </span>

      
        <button title="Add to Queue" aria-label="Add to Queue" type="button" class="rec-fav ss-queue js-queue" data-queue-endpoint="/api/v1/book/0321246942/chapter/ch01.html" data-for-analytics="0321246942:ch01.html">
            <span>Add to Queue</span>
        </button>
      

      
    </div>
    

    <div class="main">
      <span class="cover">
        <a href="https://www.safaribooksonline.com/library/view/it-architectures-and/0321246942/ch01.html">
          
          <span><img src="18.%20Documenting%20Software%20Architectures_files/a_007.jpg"></span>
         </a>
      </span>

      <a href="https://www.safaribooksonline.com/library/view/it-architectures-and/0321246942/ch01.html" class="next title-block js-bit-title t-bit-link">
        <span class="chapter-title t-bit-title">The Problem</span>
      </a>
      <span class="book-title">from: <a href="https://www.safaribooksonline.com/library/view/it-architectures-and/0321246942/" class="t-book-title gray-link next">IT Architectures and Middleware: Strategies for Building Large, Integrated Systems, Second Edition</a>
        <span class="author">by Chris Britton...</span>
        <span class="issued">Released: May 2004</span>
      </span>

      
  <div class="progress">
    
      <span class="t-time">31 mins</span>
    
  </div>




      
        


  

  <div class="book-topics">
  
    
      
        
        


<ul class="topic-display">

  
	  <li><a href="https://www.safaribooksonline.com/topics/enterprise-architecture" class="topic t-t-link" data-topic-slug="enterprise-architecture">Enterprise Architecture</a></li>
  

</ul>

      
    

  
  </div>

      
    </div>
    
  </div>

</li>


      
    

  

    
      
        





<li class="js-bit format-book js-related js-card" data-api-url="/api/v1/book/9780132119818/chapter/ch09.html">
  <div class="info">

    
    <div class="controls">
      <span class="format-title">
        Book Section
      </span>

      
        <button title="Add to Queue" aria-label="Add to Queue" type="button" class="rec-fav ss-queue js-queue" data-queue-endpoint="/api/v1/book/9780132119818/chapter/ch09.html" data-for-analytics="9780132119818:ch09.html">
            <span>Add to Queue</span>
        </button>
      

      
    </div>
    

    <div class="main">
      <span class="cover">
        <a href="https://www.safaribooksonline.com/library/view/100-soa-questions/9780132119818/ch09.html">
          
          <span><img src="18.%20Documenting%20Software%20Architectures_files/a.jpg"></span>
         </a>
      </span>

      <a href="https://www.safaribooksonline.com/library/view/100-soa-questions/9780132119818/ch09.html" class="next title-block js-bit-title t-bit-link">
        <span class="chapter-title t-bit-title">Chapter 8. Information</span>
      </a>
      <span class="book-title">from: <a href="https://www.safaribooksonline.com/library/view/100-soa-questions/9780132119818/" class="t-book-title gray-link next">100 SOA Questions: Asked and Answered</a>
        <span class="author">by Kerrie Holley...</span>
        <span class="issued">Released: November 2010</span>
      </span>

      
  <div class="progress">
    
      <span class="t-time">29 mins</span>
    
  </div>




      
        


  

  <div class="book-topics">
  
    
      
        
        


<ul class="topic-display">

  
	  <li><a href="https://www.safaribooksonline.com/topics/enterprise-architecture" class="topic t-t-link" data-topic-slug="enterprise-architecture">Enterprise Architecture</a></li>
  

</ul>

      
    

  
  </div>

      
    </div>
    
  </div>

</li>


      
    

  
  
</ul></div></div>
<section class="sbo-saved-archives"></section>



          
          
  





    
    
      <div id="js-subscribe-nag" class="subscribe-nag clearfix trial-panel  collapsed slideUp">
        <a href="#" class="js-toggle-nag ss-navigateup" title="Toggle open or close footer"></a>
        <div class="sample-message">
          <p class="usage-data t-collapsed-text">Enjoy Safari? 
            <a href="https://www.safaribooksonline.com/subscribe/">
              Subscribe Today
              
            </a>
          </p>
          

        <div class="expanded">
          <h2>You have 10 days left in your trial, Aejunknaja. </h2>
          <p class="t-expanded-text">Safari is your trusted guide for building a remarkable career. We hope you've been enjoying your trial—ready to join?</p>
          <a href="https://www.safaribooksonline.com/subscribe/" class="bigbutton positive">
            Subscribe Today
            
          </a>
          
            <footer style="padding-bottom: 69.2px;" class="pagefoot js-pagefoot">
    <div class="wrapper">
      <a href="https://www.safaribooksonline.com/" id="logo">Safari</a>
      <nav>
        <a href="https://www.safaribooksonline.com/public/support" class="full-support">Support</a> /
        <a href="https://www.safaribooksonline.com/contact/">Contact Us</a> /
        <a href="https://www.safaribooksonline.com/blog/">Blog</a>
      </nav>
      <div id="legal">
        <ul>
          <li>© 2016 <a class="copyright" href="https://www.safaribooksonline.com/">Safari</a> <br class="mobile-support"> <a href="https://www.safaribooksonline.com/terms/">Terms of Service</a> </li>
          <li><a href="https://www.safaribooksonline.com/membership-agreement/">Membership Agreement</a></li>
          <li><a href="https://www.safaribooksonline.com/privacy/">Privacy Policy</a></li>
        </ul>
      </div>
    </div>
  </footer>

        </div>
      </div>
    </div>

    
    



        
      </div>
      



  <footer style="padding-bottom: 69.2px;" class="pagefoot t-pagefoot">
    <a style="display: block;" href="#" class="icon-up"><div class="visuallyhidden">Back to top</div></a>
    <ul class="js-footer-nav">
      
        <li><a class="t-recommendations-footer" href="https://www.safaribooksonline.com/r/">Recommended</a></li>
      
      <li><a class="t-queue-footer" href="https://www.safaribooksonline.com/s/">Queue</a></li>
      
        <li><a class="t-recent-footer" href="https://www.safaribooksonline.com/recent/">Recent</a></li>
        <li><a class="t-topics-footer" href="https://www.safaribooksonline.com/topics?q=*&amp;limit=21">Topics</a></li>
      
      
        <li><a class="t-tutorials-footer" href="https://www.safaribooksonline.com/tutorials/">Tutorials</a></li>
      
      <li><a class="t-settings-footer js-settings" href="https://www.safaribooksonline.com/u/">Settings</a></li>
      <li><a href="https://www.safaribooksonline.com/blog/">Blog</a></li>
      <li class="full-support"><a href="https://www.safaribooksonline.com/public/support">Support</a></li>
      <li><a href="https://community.safaribooksonline.com/">Feedback</a></li>
      <li><a href="https://www.safaribooksonline.com/accounts/logout/">Sign Out</a></li>
    </ul>
    <span class="copyright">© 2016 <a href="https://www.safaribooksonline.com/" target="_blank">Safari</a>.</span>
    <br class="mobile-support">
    <a href="https://www.safaribooksonline.com/terms/">Terms of Service</a> /
    <a href="https://www.safaribooksonline.com/privacy/">Privacy Policy</a>
  </footer>

<script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"applicationTime":146,"agent":"js-agent.newrelic.com/nr-768.min.js","applicationID":"3275661","errorBeacon":"bam.nr-data.net","beacon":"bam.nr-data.net","queueTime":0,"transactionName":"YgdaZ0NSW0cEB0RdWltNfkZfUEFdCgofXFBHDVYdR1pQQxZeRl1QQj1aWkU=","licenseKey":"510f1a6865"}</script>


    

    <script src="18.%20Documenting%20Software%20Architectures_files/a" charset="utf-8"></script>
    <script src="18.%20Documenting%20Software%20Architectures_files/a_002" charset="utf-8"></script>
    
      <script src="18.%20Documenting%20Software%20Architectures_files/require.js"></script>
      <script>
        require(["/static/js/pages/_config.1113c6153f5e.js"], function (common) {
          require(["/static/js/nest/_init.1198db94d0a6.js"]);
        });
      </script>
    
    
  
  
  
  <script> // <![CDATA[
    var g = {
      position_cache: {
        
          "chapter": "/api/v1/book/9780132942799/chapter/ch10.html",
          "book_id": "9780132942799",
          "chapter_uri": "ch10.html",
          "position": 0,
          "user_uuid": "10f9e41b-1414-4ac1-bc80-973364aac808",
          "next_chapter_uri": "/library/view/software-architecture-in/9780132942799/ch11.html"
        
      },
      title: "Software Architecture in Practice, Third Edition",
      author_list: "Rick Kazman, Paul Clements, Len Bass",
      format: "book",
      source: "application/epub+zip",
      is_system_book: true,
      is_public: false,
      loaded_from_server: true,
      allow_scripts: false,
      has_mathml: false
    };
    // ]]>
  </script>
  
  


  
  <script>
    
      
        

        
          
            window.PUBLIC_ANNOTATIONS = true;
          
        

      

      
        window.MOBILE_PUBLIC_ANNOTATIONS = false;
      

    

  </script>

  
    
  


    
    


  

<div style="top: 200px; left: 1450px;" class="font-flyout"><div class="font-controls-panel">
	<div class="nightmodes">
		<ul>
			<li class="day"><a href="#" id="day-mode" title="Day Mode">
				<i class="fa fa-sun-o"></i>
				<span>Day Mode</span></a></li>
			<li class="cloudy"><a href="#" id="cloudy-mode" title="Cloudy Mode">
				<i class="fa fa-cloud"></i>
				<span>Cloud Mode</span>
			</a></li>
			<li class="night"><a href="#" id="night-mode" title="Night Mode">
				<i class="fa fa-moon-o"></i>
				<span>Night Mode</span>
			</a></li>
		</ul>
	</div>

	<div class="font-resizer resizer">
		<div class="draggable-containment-wrapper">
			<i class="fa fa-font left"></i>
			<span style="width: 50%;" class="filler"></span>
			<div style="position: relative; left: 80px;" id="js-font-size-draggable" class="draggable ui-widget-content ui-draggable ui-draggable-handle"></div>
			<i class="fa fa-font right"></i>
		</div>
	</div>

	<div class="column-resizer resizer">
		<div class="draggable-containment-wrapper">
			<i class="fa fa-compress left"></i>
			<span style="width: 50%;" class="filler"></span>
			<div style="position: relative; left: 80px;" id="js-column-size-draggable" class="draggable ui-widget-content ui-draggable ui-draggable-handle"></div>
			<i class="fa fa-expand right"></i>
		</div>
	</div>

	<a id="reset" class="button" href="#">Reset</a>
</div>
</div><div class="annotator-notice"></div></body></html>