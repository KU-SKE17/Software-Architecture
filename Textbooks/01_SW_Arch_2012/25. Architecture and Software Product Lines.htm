<!--[if IE]><![endif]-->
<!DOCTYPE html>
<!--[if IE 8]><html class="no-js ie8 oldie" lang="en" prefix="og: http://ogp.me/ns/# og:book: http://ogp.me/ns/book# og:video: http://ogp.me/ns/video#"

    
        itemscope itemtype="http://schema.org/Book http://schema.org/ItemPage"" data-login-url="/accounts/login/"
data-offline-url="/"
data-url="/library/view/software-architecture-in/9780132942799/ch10.html"
data-csrf-cookie="csrfsafari"
data-highlight-privacy=""


  data-user-id="640574"
  data-user-uuid="10f9e41b-1414-4ac1-bc80-973364aac808"
  data-username="aejunknaja"
  data-account-type="Trial"
  
  data-activated-trial-date="01/12/2016"
  


  data-archive="9780132942799"
  data-publishers="Addison-Wesley Professional"



  data-htmlfile-name="ch10.html"
  data-epub-title="Software Architecture in Practice, Third Edition" data-debug=0 data-testing=0><![endif]-->
<!--[if gt IE 8]><!-->
<html style="" class=" js flexbox flexboxlegacy no-touch no-websqldatabase indexeddb history csscolumns csstransforms localstorage sessionstorage applicationcache svg inlinesvg no-zoom" prefix="og: http://ogp.me/ns/# og:book: http://ogp.me/ns/book# og:video: http://ogp.me/ns/video#" itemscope="" itemtype="http://schema.org/Book http://schema.org/ItemPage" "="" data-login-url="/accounts/login/" data-offline-url="/" data-url="/library/view/software-architecture-in/9780132942799/ch10.html" data-csrf-cookie="csrfsafari" data-highlight-privacy="" data-user-id="640574" data-user-uuid="10f9e41b-1414-4ac1-bc80-973364aac808" data-username="aejunknaja" data-account-type="Trial" data-activated-trial-date="01/12/2016" data-archive="9780132942799" data-publishers="Addison-Wesley Professional" data-htmlfile-name="ch10.html" data-epub-title="Software Architecture in Practice, Third Edition" data-debug="0" data-testing="0" lang="en"><!--<![endif]--><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta charset="utf-8"><meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"><meta name="author" content="Safari Books Online"><meta name="format-detection" content="telephone=no"><meta http-equiv="cleartype" content="on"><meta name="HandheldFriendly" content="True"><meta name="MobileOptimized" content="320"><meta name="apple-itunes-app" content="app-id=881697395, app-argument=safaridetail://9780132942799"><meta name="viewport" content="width=device-width, minimum-scale=1.0, initial-scale=1.0, maximum-scale=1.0"><meta property="twitter:account_id" content="4503599627559754"><script src="25.%20Architecture%20and%20Software%20Product%20Lines_files/510f1a6865" type="text/javascript"></script><script src="25.%20Architecture%20and%20Software%20Product%20Lines_files/nr-768.js"></script><script src="25.%20Architecture%20and%20Software%20Product%20Lines_files/linkid.js" async="" type="text/javascript"></script><script src="25.%20Architecture%20and%20Software%20Product%20Lines_files/analytics.js" async=""></script><script type="text/javascript">(window.NREUM||(NREUM={})).loader_config={xpid:"VQQDUVVVGwACU1RUAQA="};window.NREUM||(NREUM={}),__nr_require=function(t,e,n){function r(n){if(!e[n]){var o=e[n]={exports:{}};t[n][0].call(o.exports,function(e){var o=t[n][1][e];return r(o||e)},o,o.exports)}return e[n].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<n.length;o++)r(n[o]);return r}({QJf3ax:[function(t,e){function n(t){function e(e,n,a){t&&t(e,n,a),a||(a={});for(var c=s(e),f=c.length,u=i(a,o,r),d=0;f>d;d++)c[d].apply(u,n);return u}function a(t,e){f[t]=s(t).concat(e)}function s(t){return f[t]||[]}function c(){return n(e)}var f={};return{on:a,emit:e,create:c,listeners:s,_events:f}}function r(){return{}}var o="nr@context",i=t("gos");e.exports=n()},{gos:"7eSDFh"}],ee:[function(t,e){e.exports=t("QJf3ax")},{}],3:[function(t){function e(t){try{i.console&&console.log(t)}catch(e){}}var n,r=t("ee"),o=t(1),i={};try{n=localStorage.getItem("__nr_flags").split(","),console&&"function"==typeof console.log&&(i.console=!0,-1!==n.indexOf("dev")&&(i.dev=!0),-1!==n.indexOf("nr_dev")&&(i.nrDev=!0))}catch(a){}i.nrDev&&r.on("internal-error",function(t){e(t.stack)}),i.dev&&r.on("fn-err",function(t,n,r){e(r.stack)}),i.dev&&(e("NR AGENT IN DEVELOPMENT MODE"),e("flags: "+o(i,function(t){return t}).join(", ")))},{1:24,ee:"QJf3ax"}],4:[function(t){function e(t,e,n,i,s){try{c?c-=1:r("err",[s||new UncaughtException(t,e,n)])}catch(f){try{r("ierr",[f,(new Date).getTime(),!0])}catch(u){}}return"function"==typeof a?a.apply(this,o(arguments)):!1}function UncaughtException(t,e,n){this.message=t||"Uncaught error with no additional information",this.sourceURL=e,this.line=n}function n(t){r("err",[t,(new Date).getTime()])}var r=t("handle"),o=t(6),i=t("ee"),a=window.onerror,s=!1,c=0;t("loader").features.err=!0,t(5),window.onerror=e;try{throw new Error}catch(f){"stack"in f&&(t(1),t(2),"addEventListener"in window&&t(3),window.XMLHttpRequest&&XMLHttpRequest.prototype&&XMLHttpRequest.prototype.addEventListener&&window.XMLHttpRequest&&XMLHttpRequest.prototype&&XMLHttpRequest.prototype.addEventListener&&!/CriOS/.test(navigator.userAgent)&&t(4),s=!0)}i.on("fn-start",function(){s&&(c+=1)}),i.on("fn-err",function(t,e,r){s&&(this.thrown=!0,n(r))}),i.on("fn-end",function(){s&&!this.thrown&&c>0&&(c-=1)}),i.on("internal-error",function(t){r("ierr",[t,(new Date).getTime(),!0])})},{1:11,2:10,3:8,4:12,5:3,6:25,ee:"QJf3ax",handle:"D5DuLP",loader:"G9z0Bl"}],5:[function(t){if(window.addEventListener){var e=t("handle"),n=t("ee");t(1),window.addEventListener("click",function(){e("inc",["ck"])},!1),window.addEventListener("hashchange",function(){e("inc",["hc"])},!1),n.on("pushState-start",function(){e("inc",["ps"])})}},{1:9,ee:"QJf3ax",handle:"D5DuLP"}],6:[function(t){t("loader").features.ins=!0},{loader:"G9z0Bl"}],7:[function(t){function e(){}if(window.performance&&window.performance.timing&&window.performance.getEntriesByType){var n=t("ee"),r=t("handle"),o=t(1),i=t(2);t("loader").features.stn=!0,t(3);var a=Event;n.on("fn-start",function(t){var e=t[0];e instanceof a&&(this.bstStart=Date.now())}),n.on("fn-end",function(t,e){var n=t[0];n instanceof a&&r("bst",[n,e,this.bstStart,Date.now()])}),o.on("fn-start",function(t,e,n){this.bstStart=Date.now(),this.bstType=n}),o.on("fn-end",function(t,e){r("bstTimer",[e,this.bstStart,Date.now(),this.bstType])}),i.on("fn-start",function(){this.bstStart=Date.now()}),i.on("fn-end",function(t,e){r("bstTimer",[e,this.bstStart,Date.now(),"requestAnimationFrame"])}),n.on("pushState-start",function(){this.time=Date.now(),this.startPath=location.pathname+location.hash}),n.on("pushState-end",function(){r("bstHist",[location.pathname+location.hash,this.startPath,this.time])}),"addEventListener"in window.performance&&(window.performance.addEventListener("webkitresourcetimingbufferfull",function(){r("bstResource",[window.performance.getEntriesByType("resource")]),window.performance.webkitClearResourceTimings()},!1),window.performance.addEventListener("resourcetimingbufferfull",function(){r("bstResource",[window.performance.getEntriesByType("resource")]),window.performance.clearResourceTimings()},!1)),document.addEventListener("scroll",e,!1),document.addEventListener("keypress",e,!1),document.addEventListener("click",e,!1)}},{1:11,2:10,3:9,ee:"QJf3ax",handle:"D5DuLP",loader:"G9z0Bl"}],8:[function(t,e){function n(t){i.inPlace(t,["addEventListener","removeEventListener"],"-",r)}function r(t){return t[1]}var o=t("ee").create(),i=t(1)(o),a=t("gos");if(e.exports=o,n(window),"getPrototypeOf"in Object){for(var s=document;s&&!s.hasOwnProperty("addEventListener");)s=Object.getPrototypeOf(s);s&&n(s);for(var c=XMLHttpRequest.prototype;c&&!c.hasOwnProperty("addEventListener");)c=Object.getPrototypeOf(c);c&&n(c)}else XMLHttpRequest.prototype.hasOwnProperty("addEventListener")&&n(XMLHttpRequest.prototype);o.on("addEventListener-start",function(t,e){function n(){return s}if(t[1]){var r=t[1];if("function"==typeof r){var s=a(r,"nr@wrapped",function(){return i(r,"fn-",n,r.name||"anonymous")});this.wrapped=t[1]=s,o.emit("initEventContext",[t,e],this.wrapped)}else"function"==typeof r.handleEvent&&i.inPlace(r,["handleEvent"],"fn-")}}),o.on("removeEventListener-start",function(t){var e=this.wrapped;e&&(t[1]=e)})},{1:26,ee:"QJf3ax",gos:"7eSDFh"}],9:[function(t,e){var n=t("ee").create(),r=t(1)(n);e.exports=n,r.inPlace(window.history,["pushState","replaceState"],"-")},{1:26,ee:"QJf3ax"}],10:[function(t,e){var n=t("ee").create(),r=t(1)(n);e.exports=n,r.inPlace(window,["requestAnimationFrame","mozRequestAnimationFrame","webkitRequestAnimationFrame","msRequestAnimationFrame"],"raf-"),n.on("raf-start",function(t){t[0]=r(t[0],"fn-")})},{1:26,ee:"QJf3ax"}],11:[function(t,e){function n(t,e,n){t[0]=i(t[0],"fn-",null,n)}function r(t,e,n){function r(){return a}this.ctx={};var a={"nr@context":this.ctx};o.emit("initTimerContext",[t,n],a),t[0]=i(t[0],"fn-",r,n)}var o=t("ee").create(),i=t(1)(o);e.exports=o,i.inPlace(window,["setTimeout","setImmediate"],"setTimer-"),i.inPlace(window,["setInterval"],"setInterval-"),i.inPlace(window,["clearTimeout","clearImmediate"],"clearTimeout-"),o.on("setInterval-start",n),o.on("setTimer-start",r)},{1:26,ee:"QJf3ax"}],12:[function(t,e){function n(){f.inPlace(this,p,"fn-",o)}function r(t,e){f.inPlace(e,["onreadystatechange"],"fn-")}function o(t,e){return e}function i(t,e){for(var n in t)e[n]=t[n];return e}var a=t("ee").create(),s=t(1),c=t(2),f=c(a),u=c(s),d=window.XMLHttpRequest,p=["onload","onerror","onabort","onloadstart","onloadend","onprogress","ontimeout"];e.exports=a,window.XMLHttpRequest=function(t){var e=new d(t);try{a.emit("new-xhr",[],e),e.hasOwnProperty("addEventListener")&&u.inPlace(e,["addEventListener","removeEventListener"],"-",o),e.addEventListener("readystatechange",n,!1)}catch(r){try{a.emit("internal-error",[r])}catch(i){}}return e},i(d,XMLHttpRequest),XMLHttpRequest.prototype=d.prototype,f.inPlace(XMLHttpRequest.prototype,["open","send"],"-xhr-",o),a.on("send-xhr-start",r),a.on("open-xhr-start",r)},{1:8,2:26,ee:"QJf3ax"}],13:[function(t){function e(t){var e=this.params,r=this.metrics;if(!this.ended){this.ended=!0;for(var i=0;c>i;i++)t.removeEventListener(s[i],this.listener,!1);if(!e.aborted){if(r.duration=(new Date).getTime()-this.startTime,4===t.readyState){e.status=t.status;var a=t.responseType,f="arraybuffer"===a||"blob"===a||"json"===a?t.response:t.responseText,u=n(f);if(u&&(r.rxSize=u),this.sameOrigin){var d=t.getResponseHeader("X-NewRelic-App-Data");d&&(e.cat=d.split(", ").pop())}}else e.status=0;r.cbTime=this.cbTime,o("xhr",[e,r,this.startTime])}}}function n(t){if("string"==typeof t&&t.length)return t.length;if("object"!=typeof t)return void 0;if("undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer&&t.byteLength)return t.byteLength;if("undefined"!=typeof Blob&&t instanceof Blob&&t.size)return t.size;if("undefined"!=typeof FormData&&t instanceof FormData)return void 0;try{return JSON.stringify(t).length}catch(e){return void 0}}function r(t,e){var n=i(e),r=t.params;r.host=n.hostname+":"+n.port,r.pathname=n.pathname,t.sameOrigin=n.sameOrigin}if(window.XMLHttpRequest&&XMLHttpRequest.prototype&&XMLHttpRequest.prototype.addEventListener&&!/CriOS/.test(navigator.userAgent)){t("loader").features.xhr=!0;var o=t("handle"),i=t(2),a=t("ee"),s=["load","error","abort","timeout"],c=s.length,f=t(1),u=window.XMLHttpRequest;t(4),t(3),a.on("new-xhr",function(){this.totalCbs=0,this.called=0,this.cbTime=0,this.end=e,this.ended=!1,this.xhrGuids={}}),a.on("open-xhr-start",function(t){this.params={method:t[0]},r(this,t[1]),this.metrics={}}),a.on("open-xhr-end",function(t,e){"loader_config"in NREUM&&"xpid"in NREUM.loader_config&&this.sameOrigin&&e.setRequestHeader("X-NewRelic-ID",NREUM.loader_config.xpid)}),a.on("send-xhr-start",function(t,e){var r=this.metrics,o=t[0],i=this;if(r&&o){var f=n(o);f&&(r.txSize=f)}this.startTime=(new Date).getTime(),this.listener=function(t){try{"abort"===t.type&&(i.params.aborted=!0),("load"!==t.type||i.called===i.totalCbs&&(i.onloadCalled||"function"!=typeof e.onload))&&i.end(e)}catch(n){try{a.emit("internal-error",[n])}catch(r){}}};for(var u=0;c>u;u++)e.addEventListener(s[u],this.listener,!1)}),a.on("xhr-cb-time",function(t,e,n){this.cbTime+=t,e?this.onloadCalled=!0:this.called+=1,this.called!==this.totalCbs||!this.onloadCalled&&"function"==typeof n.onload||this.end(n)}),a.on("xhr-load-added",function(t,e){var n=""+f(t)+!!e;this.xhrGuids&&!this.xhrGuids[n]&&(this.xhrGuids[n]=!0,this.totalCbs+=1)}),a.on("xhr-load-removed",function(t,e){var n=""+f(t)+!!e;this.xhrGuids&&this.xhrGuids[n]&&(delete this.xhrGuids[n],this.totalCbs-=1)}),a.on("addEventListener-end",function(t,e){e instanceof u&&"load"===t[0]&&a.emit("xhr-load-added",[t[1],t[2]],e)}),a.on("removeEventListener-end",function(t,e){e instanceof u&&"load"===t[0]&&a.emit("xhr-load-removed",[t[1],t[2]],e)}),a.on("fn-start",function(t,e,n){e instanceof u&&("onload"===n&&(this.onload=!0),("load"===(t[0]&&t[0].type)||this.onload)&&(this.xhrCbStart=(new Date).getTime()))}),a.on("fn-end",function(t,e){this.xhrCbStart&&a.emit("xhr-cb-time",[(new Date).getTime()-this.xhrCbStart,this.onload,e],e)})}},{1:"XL7HBI",2:14,3:12,4:8,ee:"QJf3ax",handle:"D5DuLP",loader:"G9z0Bl"}],14:[function(t,e){e.exports=function(t){var e=document.createElement("a"),n=window.location,r={};e.href=t,r.port=e.port;var o=e.href.split("://");return!r.port&&o[1]&&(r.port=o[1].split("/")[0].split("@").pop().split(":")[1]),r.port&&"0"!==r.port||(r.port="https"===o[0]?"443":"80"),r.hostname=e.hostname||n.hostname,r.pathname=e.pathname,r.protocol=o[0],"/"!==r.pathname.charAt(0)&&(r.pathname="/"+r.pathname),r.sameOrigin=!e.hostname||e.hostname===document.domain&&e.port===n.port&&e.protocol===n.protocol,r}},{}],15:[function(t,e){function n(t){return function(){r(t,[(new Date).getTime()].concat(i(arguments)))}}var r=t("handle"),o=t(1),i=t(2);"undefined"==typeof window.newrelic&&(newrelic=window.NREUM);var a=["setPageViewName","addPageAction","setCustomAttribute","finished","addToTrace","inlineHit","noticeError"];o(a,function(t,e){window.NREUM[e]=n("api-"+e)}),e.exports=window.NREUM},{1:24,2:25,handle:"D5DuLP"}],gos:[function(t,e){e.exports=t("7eSDFh")},{}],"7eSDFh":[function(t,e){function n(t,e,n){if(r.call(t,e))return t[e];var o=n();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(t,e,{value:o,writable:!0,enumerable:!1}),o}catch(i){}return t[e]=o,o}var r=Object.prototype.hasOwnProperty;e.exports=n},{}],D5DuLP:[function(t,e){function n(t,e,n){return r.listeners(t).length?r.emit(t,e,n):void(r.q&&(r.q[t]||(r.q[t]=[]),r.q[t].push(e)))}var r=t("ee").create();e.exports=n,n.ee=r,r.q={}},{ee:"QJf3ax"}],handle:[function(t,e){e.exports=t("D5DuLP")},{}],XL7HBI:[function(t,e){function n(t){var e=typeof t;return!t||"object"!==e&&"function"!==e?-1:t===window?0:i(t,o,function(){return r++})}var r=1,o="nr@id",i=t("gos");e.exports=n},{gos:"7eSDFh"}],id:[function(t,e){e.exports=t("XL7HBI")},{}],G9z0Bl:[function(t,e){function n(){var t=p.info=NREUM.info,e=f.getElementsByTagName("script")[0];if(t&&t.licenseKey&&t.applicationID&&e){s(d,function(e,n){e in t||(t[e]=n)});var n="https"===u.split(":")[0]||t.sslForHttp;p.proto=n?"https://":"http://",a("mark",["onload",i()]);var r=f.createElement("script");r.src=p.proto+t.agent,e.parentNode.insertBefore(r,e)}}function r(){"complete"===f.readyState&&o()}function o(){a("mark",["domContent",i()])}function i(){return(new Date).getTime()}var a=t("handle"),s=t(1),c=window,f=c.document;t(2);var u=(""+location).split("?")[0],d={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-768.min.js"},p=e.exports={offset:i(),origin:u,features:{}};f.addEventListener?(f.addEventListener("DOMContentLoaded",o,!1),c.addEventListener("load",n,!1)):(f.attachEvent("onreadystatechange",r),c.attachEvent("onload",n)),a("mark",["firstbyte",i()])},{1:24,2:15,handle:"D5DuLP"}],loader:[function(t,e){e.exports=t("G9z0Bl")},{}],24:[function(t,e){function n(t,e){var n=[],o="",i=0;for(o in t)r.call(t,o)&&(n[i]=e(o,t[o]),i+=1);return n}var r=Object.prototype.hasOwnProperty;e.exports=n},{}],25:[function(t,e){function n(t,e,n){e||(e=0),"undefined"==typeof n&&(n=t?t.length:0);for(var r=-1,o=n-e||0,i=Array(0>o?0:o);++r<o;)i[r]=t[e+r];return i}e.exports=n},{}],26:[function(t,e){function n(t){return!(t&&"function"==typeof t&&t.apply&&!t[i])}var r=t("ee"),o=t(1),i="nr@original",a=Object.prototype.hasOwnProperty;e.exports=function(t){function e(t,e,r,a){function nrWrapper(){var n,i,s,f;try{i=this,n=o(arguments),s=r&&r(n,i)||{}}catch(d){u([d,"",[n,i,a],s])}c(e+"start",[n,i,a],s);try{return f=t.apply(i,n)}catch(p){throw c(e+"err",[n,i,p],s),p}finally{c(e+"end",[n,i,f],s)}}return n(t)?t:(e||(e=""),nrWrapper[i]=t,f(t,nrWrapper),nrWrapper)}function s(t,r,o,i){o||(o="");var a,s,c,f="-"===o.charAt(0);for(c=0;c<r.length;c++)s=r[c],a=t[s],n(a)||(t[s]=e(a,f?s+o:o,i,s))}function c(e,n,r){try{t.emit(e,n,r)}catch(o){u([o,e,n,r])}}function f(t,e){if(Object.defineProperty&&Object.keys)try{var n=Object.keys(t);return n.forEach(function(n){Object.defineProperty(e,n,{get:function(){return t[n]},set:function(e){return t[n]=e,e}})}),e}catch(r){u([r])}for(var o in t)a.call(t,o)&&(e[o]=t[o]);return e}function u(e){try{t.emit("internal-error",e)}catch(n){}}return t||(t=r),e.inPlace=s,e.flag=i,e}},{1:25,ee:"QJf3ax"}]},{},["G9z0Bl",4,13,7,6,5]);</script><link rel="apple-touch-icon" href="https://www.safaribooksonline.com/static/images/apple-touch-icon.dc4dcf1f75e0.png"><link rel="shortcut icon" href="https://www.safaribooksonline.com/favicon.ico" type="image/x-icon"><link href="25.%20Architecture%20and%20Software%20Product%20Lines_files/css.css" rel="stylesheet" type="text/css"><title>25. Architecture and Software Product Lines - Software Architecture in Practice, Third Edition</title><link rel="stylesheet" href="25.%20Architecture%20and%20Software%20Product%20Lines_files/e4f5174e8e7b.css" type="text/css"><link rel="stylesheet" type="text/css" href="25.%20Architecture%20and%20Software%20Product%20Lines_files/annotator.css"><link rel="stylesheet" href="25.%20Architecture%20and%20Software%20Product%20Lines_files/font-awesome.css"><style type="text/css" title="ibis-book">#sbo-rt-content div{margin-top:4pt;margin-bottom:4pt;margin-right:15pt}#sbo-rt-content h1{margin-top:15pt;margin-bottom:12pt;text-align:center;font-weight:bold}#sbo-rt-content h2{margin-top:7pt;margin-bottom:25pt;text-align:left;font-weight:bold}#sbo-rt-content h3{margin-top:9pt;margin-bottom:8pt;font-weight:bold;text-align:left}#sbo-rt-content h4{margin-top:9pt;margin-bottom:6pt;text-align:left;font-weight:bold}#sbo-rt-content h5{margin-top:9pt;margin-bottom:6pt;font-weight:bold;text-align:left}#sbo-rt-content h6{margin-top:9pt;margin-bottom:6pt;font-weight:bold;text-align:left}#sbo-rt-content .cover{margin-top:2pt;margin-bottom:2pt;text-align:center}#sbo-rt-content .author{margin-top:40pt;font-weight:bold;text-align:center}#sbo-rt-content div.image,#sbo-rt-content img{max-width:99%;max-height:99%}#sbo-rt-content .image{margin-bottom:5pt;text-align:center}#sbo-rt-content .toc-part{margin-top:25pt;margin-bottom:5pt;margin-left:10pt;text-align:left}#sbo-rt-content .toc-chapter{margin-top:10pt;margin-bottom:5pt;margin-left:25pt;text-align:left}#sbo-rt-content .toc-chapter1{margin-top:10pt;margin-bottom:5pt;margin-left:18pt;text-align:left}#sbo-rt-content .toc-section{margin-top:4pt;margin-bottom:4pt;margin-left:55pt;text-align:left}#sbo-rt-content .indexmain{margin-top:2pt;margin-bottom:2pt;text-align:left}#sbo-rt-content .indexmain1{margin-top:18pt;margin-bottom:2pt;text-align:left}#sbo-rt-content .indexsub{margin-top:2pt;margin-bottom:2pt;margin-left:35pt;text-indent:-15pt;text-align:left}#sbo-rt-content .copy{margin-top:8pt;margin-bottom:8pt;text-indent:.024pt}#sbo-rt-content .indent{margin-top:4pt;margin-bottom:5pt;text-indent:18pt;text-align:left}#sbo-rt-content .indenthangingB{margin-top:4pt;margin-bottom:4pt;margin-left:40pt;text-indent:-7pt;text-align:left}#sbo-rt-content .indenthangingBB{margin-top:4pt;margin-bottom:4pt;margin-left:58pt;text-indent:-6.5pt;text-align:left}#sbo-rt-content .indenthangingBBB{margin-top:4pt;margin-bottom:4pt;margin-left:80pt;text-indent:-6pt;text-align:left}#sbo-rt-content .indenthangingBP{margin-top:4pt;margin-bottom:4pt;margin-left:40pt;text-align:left}#sbo-rt-content .indenthangingBP1{margin-top:4pt;margin-bottom:4pt;margin-left:30pt;text-indent:15pt;text-align:left}#sbo-rt-content .tab-caption{font-weight:bold;margin-top:14pt;margin-bottom:8pt;text-align:center;page-break-after:avoid;page-break-inside:avoid}#sbo-rt-content .source{font-size:medium;margin-top:2pt;margin-bottom:2pt;page-break-before:avoid;page-break-inside:avoid;text-align:center}#sbo-rt-content .fig-caption{font-weight:bold;margin-top:4pt;margin-bottom:14pt;text-align:center;page-break-before:avoid;page-break-inside:avoid}#sbo-rt-content .fig-caption2{font-weight:bold;margin-top:4pt;margin-bottom:14pt;text-align:left;page-break-before:avoid;page-break-inside:avoid}#sbo-rt-content .blockquote{margin-top:7pt;margin-bottom:2pt;margin-left:60pt;text-align:left}#sbo-rt-content .attribution{margin-top:2pt;margin-bottom:17pt;margin-right:40pt;text-align:right}#sbo-rt-content .attribution1{margin-top:2pt;margin-bottom:17pt;margin-right:15pt;text-align:right}#sbo-rt-content .attri{margin-left:100pt;margin-right:100pt}#sbo-rt-content .toc-preface{margin-top:5pt;margin-bottom:5pt;margin-left:65pt;text-align:left}#sbo-rt-content .toc-appendix{margin-top:10pt;margin-bottom:5pt;margin-left:55pt;text-align:left}#sbo-rt-content .toc-index{margin-top:10pt;margin-bottom:5pt;margin-left:55pt;text-align:left}#sbo-rt-content .bib{margin-top:10pt;margin-bottom:5pt;margin-left:15pt;text-align:left}#sbo-rt-content .footnote{font-size:small;margin-top:4pt;margin-bottom:4pt;margin-left:20pt;text-indent:-11pt;text-align:left}#sbo-rt-content .pre{font-family:"Courier New";font-size:small;margin-top:5pt;margin-bottom:5pt;margin-left:13pt}#sbo-rt-content .pre1{font-family:"Courier New";font-size:small;margin-top:5pt;margin-bottom:5pt;margin-left:25pt}#sbo-rt-content .codelink{font-size:small;margin-top:6pt;margin-bottom:6pt;font-weight:bold;page-break-after:avoid}#sbo-rt-content .image1{text-align:center;page-break-before:always}#sbo-rt-content div.image1,#sbo-rt-content img{max-width:99%;max-height:99%}#sbo-rt-content code{font-size:small}#sbo-rt-content .edition{font-size:15pt;margin-top:15pt;margin-bottom:15pt;text-align:center;font-weight:bold}#sbo-rt-content .equation{text-align:center}#sbo-rt-content .indenthangingN{margin-top:4pt;margin-bottom:4pt;margin-left:50pt;text-indent:-12pt;text-align:left}#sbo-rt-content .indenthangingNaa{margin-top:4pt;margin-bottom:4pt;margin-left:48pt;text-indent:-11pt;text-align:left}#sbo-rt-content .indenthangingNP1{margin-top:4pt;margin-bottom:4pt;margin-left:30pt;text-align:left}#sbo-rt-content .indenthangingNP{margin-top:4pt;margin-bottom:4pt;margin-left:30pt;text-indent:15pt;text-align:left}#sbo-rt-content .indenthangingN1{margin-top:4pt;margin-bottom:4pt;margin-left:50pt;text-indent:-17.5pt;text-align:left}#sbo-rt-content .indenthangingNB{margin-top:4pt;margin-bottom:4pt;margin-left:75pt;text-indent:-7.5pt;text-align:left}#sbo-rt-content .noindent{margin-top:4pt;margin-bottom:4pt;text-indent:.02pt}#sbo-rt-content .publisher{margin-top:130pt;margin-bottom:2pt;text-align:center}#sbo-rt-content .publishertext{margin-top:6pt;margin-bottom:2pt;text-align:center}#sbo-rt-content .sidebar{font-size:medium;margin-top:6pt;margin-bottom:12pt;margin-left:24pt;margin-right:24pt}#sbo-rt-content .sb-noindent{margin-top:4pt;margin-bottom:4pt;text-indent:.02pt;margin-left:15pt;margin-right:15pt}#sbo-rt-content .sb-indent{margin-top:4pt;margin-bottom:5pt;text-indent:15pt;margin-left:15pt;margin-right:15pt}#sbo-rt-content .title{font-size:110%;margin-top:4pt;margin-bottom:4pt;font-weight:bold;margin-left:7pt;page-break-inside:avoid;page-break-after:avoid}#sbo-rt-content .question{margin-top:4pt;margin-bottom:4pt;margin-left:30pt;text-indent:-12pt;text-align:left}#sbo-rt-content .questiona{margin-top:4pt;margin-bottom:4pt;margin-left:70pt;text-indent:-11.5pt;text-align:left}#sbo-rt-content .questionP{margin-top:4pt;margin-bottom:4pt;margin-left:30pt;text-align:left}#sbo-rt-content .step{margin-top:4pt;margin-bottom:4pt;margin-left:65pt;text-indent:-38pt;text-align:left}#sbo-rt-content .division{font-size:100%;margin-top:4pt;margin-bottom:4pt;font-weight:bold;margin-left:10pt}#sbo-rt-content .question1{margin-top:4pt;margin-bottom:4pt;margin-left:29pt;text-indent:-18pt;text-align:left}#sbo-rt-content .copy1{margin-top:8pt;margin-bottom:8pt;margin-left:24pt;text-align:left;text-indent:.024pt}#sbo-rt-content .copy2{margin-top:8pt;margin-bottom:8pt;font-size:140%;text-align:left;text-indent:.024pt}#sbo-rt-content .copy3{margin-top:8pt;margin-bottom:8pt;font-size:130%;text-align:left;text-indent:.024pt}#sbo-rt-content .imagefir{text-align:center}</style><link rel="canonical" href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch10.html"><meta name="description" content="10. Testability Testing leads to failure, and failure leads to understanding —Burt Rutan Industry estimates indicate that between 30 and 50 percent (or in some cases, even more) of the ... "><meta property="og:title" content="10. Testability"><meta itemprop="isPartOf" content="/library/view/software-architecture-in/9780132942799/"><meta itemprop="name" content="10. Testability"><meta property="og:url" itemprop="url" content="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch10.html"><meta property="og:site_name" content="Safari"><meta property="og:image" itemprop="thumbnailUrl" content="https://www.safaribooksonline.com/library/cover/9780132942799/"><meta property="og:description" itemprop="description" content="10. Testability Testing leads to failure, and failure leads to understanding —Burt Rutan Industry estimates indicate that between 30 and 50 percent (or in some cases, even more) of the ... "><meta itemprop="inLanguage" content="en"><meta itemprop="publisher" content="Addison-Wesley Professional"><meta property="og:type" content="book"><meta property="og:book:isbn" itemprop="isbn" content="9780132942799"><meta property="og:book:author" itemprop="author" content="Rick Kazman"><meta property="og:book:author" itemprop="author" content="Paul Clements"><meta property="og:book:author" itemprop="author" content="Len Bass"><meta property="og:book:tag" itemprop="about" content="Core Programming"><meta name="twitter:card" content="summary"><meta name="twitter:site" content="@safari"><style type="text/css" id="font-styles" data-template="#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-size: &lt;%= font_size %&gt; !important; }"></style><style type="text/css" id="font-family" data-template="#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-family: &lt;%= font_family %&gt; !important; }"></style><style type="text/css" id="column-width" data-template="#sbo-rt-content { max-width: &lt;%= column_width %&gt;% !important; margin: 0 auto !important; }"></style><!--[if lt IE 9]><script src="/static/js/src/respond.min.fa78ffe6f7ba.js"></script><![endif]--><script type="text/javascript" src="25.%20Architecture%20and%20Software%20Product%20Lines_files/ecc99425e988.js" async=""></script><noscript><meta http-equiv="refresh" content="0; url=/library/no-js/" /></noscript><script type="text/javascript">
  (function(i,s,o,g,r,a,m) {
    i['GoogleAnalyticsObject']=r;
    i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();
    a=s.createElement(o),m=s.getElementsByTagName(o)[0];
    a.async=1;
    a.src=g;
    m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  var matches = document.cookie.match(/BrowserCookie\s*=\s*([a-f0-9\-]{36})/),
      user_uuid = null;

  if (matches && matches.length === 2) {
    user_uuid = matches[1];
  }


  ga('create', 'UA-39299553-7', {'userId': '10f9e41b-1414-4ac1-bc80-973364aac808' });


ga('set', 'dimension1', 'Trial');
ga('set', 'dimension6', user_uuid);


  ga('set', 'dimension2', '10f9e41b-1414-4ac1-bc80-973364aac808');
  




  //enable enhanced link tracking
  ga('require', 'linkid', 'linkid.js');

  // reading interface will track pageviews itself
  if (document.location.pathname.indexOf("/library/view") !== 0) {
    ga('send', 'pageview');
  }
</script><script src="25.%20Architecture%20and%20Software%20Product%20Lines_files/_config.js" data-requiremodule="/static/js/pages/_config.1113c6153f5e.js" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="25.%20Architecture%20and%20Software%20Product%20Lines_files/_init.js" data-requiremodule="/static/js/nest/_init.1198db94d0a6.js" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><style id="annotator-dynamic-style">.annotator-adder, .annotator-outer, .annotator-notice {
  z-index: 100019;
}
.annotator-filter {
  z-index: 100009;
}</style></head>


<body class="reading sidenav  js-show-related scalefonts subscribe-panel library nav-collapsed">

    
      <div class="hide working" role="status">
        <div class="working-image"></div>
      </div>
      <div class="sbo-site-nav">
        



<a href="#container" class="skip">Skip to content</a><header class="topbar t-topbar"><nav role="navigation" class="js-site-nav"><ul class="topnav"><li class="logo t-logo"><a href="https://www.safaribooksonline.com/home/" class="l0 safari js-keyboard-nav-home"><em>Safari</em></a></li><li><a href="https://www.safaribooksonline.com/r/" class="t-recommendations-nav l0 ss-picks None"><span>Recommended</span></a></li><li><a href="https://www.safaribooksonline.com/s/" class="t-queue-nav l0 ss-queue None"><span>Queue</span></a></li><li class="search"><a href="#" class="t-search-nav trigger ss-search l0" data-dropdown-selector=".searchbox"><span>Search</span></a></li><li class="usermenu dropdown"><a href="#" class="trigger l0 ss-navigatedown nav-dropdown"><span>Expand Nav</span></a><div class="drop-content"><ul><li><a href="https://www.safaribooksonline.com/recent/" class="t-recent-nav l1 ss-recent None">Recent</a></li><li><a href="https://www.safaribooksonline.com/topics" class="t-topics-link l1 ss-hexbase None">Topics</a></li><li><a href="https://www.safaribooksonline.com/tutorials/" class="l1 ss-toots t-tutorials-nav js-toggle-menu-item None"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20" version="1.1"><title>icon for tutorials
  </title><desc></desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M15.8 18.2C15.8 18.2 15.9 18.2 16 18.2 16.1 18.2 16.2 18.2 16.4 18.2 16.5 18.2 16.7 18.1 16.9 18 17 17.9 17.1 17.8 17.2 17.7 17.3 17.6 17.4 17.5 17.4 17.4 17.5 17.2 17.6 16.9 17.6 16.7 17.6 16.6 17.6 16.5 17.6 16.4 17.5 16.2 17.5 16.1 17.4 15.9 17.3 15.8 17.2 15.6 17 15.5 16.8 15.3 16.6 15.3 16.4 15.2 16.2 15.2 16 15.2 15.8 15.2 15.7 15.2 15.5 15.3 15.3 15.4 15.2 15.4 15.1 15.5 15 15.7 14.9 15.8 14.8 15.9 14.7 16 14.7 16.1 14.6 16.3 14.6 16.4 14.6 16.5 14.6 16.6 14.6 16.6 14.6 16.7 14.6 16.9 14.6 17 14.6 17.1 14.7 17.3 14.7 17.4 14.8 17.6 15 17.7 15.1 17.9 15.2 18 15.3 18 15.5 18.1 15.5 18.1 15.6 18.2 15.7 18.2 15.7 18.2 15.7 18.2 15.8 18.2L15.8 18.2ZM9.4 11.5C9.5 11.5 9.5 11.5 9.6 11.5 9.7 11.5 9.9 11.5 10 11.5 10.2 11.5 10.3 11.4 10.5 11.3 10.6 11.2 10.8 11.1 10.9 11 10.9 10.9 11 10.8 11.1 10.7 11.2 10.5 11.2 10.2 11.2 10 11.2 9.9 11.2 9.8 11.2 9.7 11.2 9.5 11.1 9.4 11 9.2 10.9 9.1 10.8 8.9 10.6 8.8 10.5 8.7 10.3 8.6 10 8.5 9.9 8.5 9.7 8.5 9.5 8.5 9.3 8.5 9.1 8.6 9 8.7 8.8 8.7 8.7 8.8 8.6 9 8.5 9.1 8.4 9.2 8.4 9.3 8.2 9.5 8.2 9.8 8.2 10 8.2 10.1 8.2 10.2 8.2 10.3 8.2 10.5 8.3 10.6 8.4 10.7 8.5 10.9 8.6 11.1 8.7 11.2 8.9 11.3 9 11.4 9.1 11.4 9.2 11.4 9.3 11.5 9.3 11.5 9.3 11.5 9.4 11.5 9.4 11.5L9.4 11.5ZM3 4.8C3.1 4.8 3.1 4.8 3.2 4.8 3.4 4.8 3.5 4.8 3.7 4.8 3.8 4.8 4 4.7 4.1 4.6 4.3 4.5 4.4 4.4 4.5 4.3 4.6 4.2 4.6 4.1 4.7 4 4.8 3.8 4.8 3.5 4.8 3.3 4.8 3.1 4.8 3 4.8 2.9 4.7 2.8 4.7 2.6 4.6 2.5 4.5 2.3 4.4 2.2 4.2 2.1 4 1.9 3.8 1.9 3.6 1.8 3.5 1.8 3.3 1.8 3.1 1.8 2.9 1.8 2.7 1.9 2.6 2 2.4 2.1 2.3 2.2 2.2 2.3 2.1 2.4 2 2.5 2 2.6 1.8 2.8 1.8 3 1.8 3.3 1.8 3.4 1.8 3.5 1.8 3.6 1.8 3.8 1.9 3.9 2 4 2.1 4.2 2.2 4.4 2.4 4.5 2.5 4.6 2.6 4.7 2.7 4.7 2.8 4.7 2.9 4.8 2.9 4.8 3 4.8 3 4.8 3 4.8L3 4.8ZM13.1 15.2C13.2 15.1 13.2 15.1 13.2 15.1 13.3 14.9 13.4 14.7 13.6 14.5 13.8 14.2 14.1 14 14.4 13.8 14.7 13.6 15.1 13.5 15.5 13.4 15.9 13.4 16.3 13.4 16.7 13.5 17.2 13.5 17.6 13.7 17.9 13.9 18.2 14.1 18.5 14.4 18.7 14.7 18.9 15 19.1 15.3 19.2 15.6 19.3 15.9 19.4 16.1 19.4 16.4 19.4 17 19.3 17.5 19.1 18.1 19 18.3 18.9 18.5 18.7 18.7 18.5 19 18.3 19.2 18 19.4 17.7 19.6 17.3 19.8 16.9 19.9 16.6 20 16.3 20 16 20 15.8 20 15.6 20 15.4 19.9 15.4 19.9 15.4 19.9 15.4 19.9 15.2 19.9 15 19.8 14.9 19.8 14.8 19.7 14.7 19.7 14.6 19.7 14.4 19.6 14.3 19.5 14.1 19.3 13.7 19.1 13.4 18.7 13.2 18.4 13.1 18.1 12.9 17.8 12.9 17.5 12.8 17.3 12.8 17.1 12.8 16.9L3.5 14.9C3.3 14.9 3.1 14.8 3 14.8 2.7 14.7 2.4 14.5 2.1 14.3 1.7 14 1.4 13.7 1.2 13.3 1 13 0.9 12.6 0.8 12.3 0.7 12 0.7 11.7 0.7 11.4 0.7 11 0.8 10.5 1 10.1 1.1 9.8 1.3 9.5 1.6 9.2 1.8 8.9 2.1 8.7 2.4 8.5 2.8 8.3 3.2 8.1 3.6 8.1 3.9 8 4.2 8 4.5 8 4.6 8 4.8 8 4.9 8.1L6.8 8.5C6.8 8.4 6.8 8.4 6.8 8.4 6.9 8.2 7.1 8 7.2 7.8 7.5 7.5 7.7 7.3 8 7.1 8.4 6.9 8.7 6.8 9.1 6.7 9.5 6.7 10 6.7 10.4 6.8 10.8 6.8 11.2 7 11.5 7.2 11.8 7.5 12.1 7.7 12.4 8 12.6 8.3 12.7 8.6 12.8 8.9 12.9 9.2 13 9.4 13 9.7 13 9.7 13 9.8 13 9.8 13.6 9.9 14.2 10.1 14.9 10.2 15 10.2 15 10.2 15.1 10.2 15.3 10.2 15.4 10.2 15.6 10.2 15.8 10.1 16 10 16.2 9.9 16.4 9.8 16.5 9.6 16.6 9.5 16.8 9.2 16.9 8.8 16.9 8.5 16.9 8.3 16.9 8.2 16.8 8 16.8 7.8 16.7 7.7 16.6 7.5 16.5 7.3 16.3 7.2 16.2 7.1 16 7 15.9 6.9 15.8 6.9 15.7 6.9 15.6 6.8 15.5 6.8L6.2 4.8C6.2 5 6 5.2 5.9 5.3 5.7 5.6 5.5 5.8 5.3 6 4.9 6.2 4.5 6.4 4.1 6.5 3.8 6.6 3.5 6.6 3.2 6.6 3 6.6 2.8 6.6 2.7 6.6 2.6 6.6 2.6 6.5 2.6 6.5 2.5 6.5 2.3 6.5 2.1 6.4 1.8 6.3 1.6 6.1 1.3 6 1 5.7 0.7 5.4 0.5 5 0.3 4.7 0.2 4.4 0.1 4.1 0 3.8 0 3.6 0 3.3 0 2.8 0.1 2.2 0.4 1.7 0.5 1.5 0.7 1.3 0.8 1.1 1.1 0.8 1.3 0.6 1.6 0.5 2 0.3 2.3 0.1 2.7 0.1 3.1 0 3.6 0 4 0.1 4.4 0.2 4.8 0.3 5.1 0.5 5.5 0.8 5.7 1 6 1.3 6.2 1.6 6.3 1.9 6.4 2.3 6.5 2.5 6.6 2.7 6.6 3 6.6 3 6.6 3.1 6.6 3.1 9.7 3.8 12.8 4.4 15.9 5.1 16.1 5.1 16.2 5.2 16.4 5.2 16.7 5.3 16.9 5.5 17.2 5.6 17.5 5.9 17.8 6.2 18.1 6.5 18.3 6.8 18.4 7.2 18.6 7.5 18.6 7.9 18.7 8.2 18.7 8.6 18.7 9 18.6 9.4 18.4 9.8 18.3 10.1 18.2 10.3 18 10.6 17.8 10.9 17.5 11.1 17.3 11.3 16.9 11.6 16.5 11.8 16 11.9 15.7 12 15.3 12 15 12 14.8 12 14.7 12 14.5 11.9 13.9 11.8 13.3 11.7 12.6 11.5 12.5 11.7 12.4 11.9 12.3 12 12.1 12.3 11.9 12.5 11.7 12.7 11.3 12.9 10.9 13.1 10.5 13.2 10.2 13.3 9.9 13.3 9.6 13.3 9.4 13.3 9.2 13.3 9 13.2 9 13.2 9 13.2 9 13.2 8.8 13.2 8.7 13.2 8.5 13.1 8.2 13 8 12.8 7.7 12.6 7.4 12.4 7.1 12 6.8 11.7 6.7 11.4 6.6 11.1 6.5 10.8 6.4 10.6 6.4 10.4 6.4 10.2 5.8 10.1 5.2 9.9 4.5 9.8 4.4 9.8 4.4 9.8 4.3 9.8 4.1 9.8 4 9.8 3.8 9.8 3.6 9.9 3.4 10 3.2 10.1 3 10.2 2.9 10.4 2.8 10.5 2.6 10.8 2.5 11.1 2.5 11.5 2.5 11.6 2.5 11.8 2.6 12 2.6 12.1 2.7 12.3 2.8 12.5 2.9 12.6 3.1 12.8 3.2 12.9 3.3 13 3.5 13.1 3.6 13.1 3.7 13.1 3.8 13.2 3.9 13.2L13.1 15.2 13.1 15.2Z" fill="currentColor"></path></g></svg><em>Tutorials</em></a></li><li class="nav-highlights"><a href="https://www.safaribooksonline.com/u/001o000000ijSMHAA2/" class="t-highlights-nav l1 ss-highlights None">Highlights</a></li><li><a href="https://www.safaribooksonline.com/u/" class="t-settings-nav l1 js-settings ss-settings None">Settings</a></li><li><a href="https://community.safaribooksonline.com/" class="l1 no-icon">Feedback</a></li><li><a href="https://www.safaribooksonline.com/accounts/logout/" class="l1 no-icon">Sign Out</a></li></ul><ul class="profile"><li><a href="https://www.safaribooksonline.com/u/" class="l2 None">Settings</a><span class="l2 t-nag-notification" id="nav-nag"><strong class="trial-green">10</strong> days left in your trial.
  
  

  
    
      

<a class="" href="https://www.safaribooksonline.com/subscribe/">Subscribe</a>.


    
  

  

</span></li><li><a href="https://community.safaribooksonline.com/" class="l2">Feedback</a></li><li><a href="https://www.safaribooksonline.com/accounts/logout/" class="l2">Sign Out</a></li></ul></div></li></ul></nav></header>


      </div>
      <div style="height: auto;" id="container" class="application">
        
          <div class="nav-container clearfix">
            


            
            
          </div>

          

  <div class="js-toc">
    
      <div class="sbo-reading-menu sbo-menu-top"><section class="sbo-toc-container toc-menu"><a href="#" class="sbo-toc-thumb"><span class="sbo-title ss-list"><h1><div class="visuallyhidden">Table of Contents for </div>
      
      Software Architecture in Practice, Third Edition
      
    </h1></span></a><div class="toc-contents"></div></section></div>

    

    <div class="interface-controls interface-controls-top">
      <ul class="interface-control-btns js-bitlist js-reader">
        <li class="js-search-in-archive search-in-archive t-search-in-archive"><a href="#" title="Search in archive" class="js-search-controls search-controls"><span class="icon">Search in book...</span></a><form class="search-archive-bar js-search-form"><input name="q" placeholder="Search inside this book..." autocomplete="off" type="search"></form><div class="js-search-results search-archive-results"></div></li><li class="queue-control"><button title="Add to Queue" aria-label="Add to Queue" data-for-analytics="9780132942799:ch25.html" type="button" class="rec-fav ss-queue js-queue js-current-chapter-queue" data-queue-endpoint="/api/v1/book/9780132942799/chapter/ch25.html"><span>Add to Queue</span></button></li><li class="js-font-control-panel font-control-activator"><a href="#" data-push-state="false" id="font-controls" title="Change font size" aria-label="Change font size"><span class="icon">Toggle Font Controls</span></a></li><li class="dropdown sharing-controls"><a href="#" class="trigger" data-push-state="false" title="Share" aria-label="Share"><i class="fa fa-share"></i></a><ul class="social-sharing dropdown-menu"><li><a class="twitter share-button t-twitter" target="_blank" aria-label="Share this section on Twitter" title="Share this section on Twitter" href="https://twitter.com/share?url=https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch10.html&amp;text=Software%20Architecture%20in%20Practice%2C%20Third%20Edition&amp;via=safari"><span>Twitter</span></a></li><li><a class="facebook share-button t-facebook" target="_blank" aria-label="Share this section on Facebook" title="Share this section on Facebook" href="https://www.facebook.com/sharer/sharer.php?u=https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch10.html"><span>Facebook</span></a></li><li><a class="googleplus share-button t-googleplus" target="_blank" aria-label="Share this secton on Google Plus" title="Share this secton on Google Plus" href="https://plus.google.com/share?url=https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch10.html"><span>Google Plus</span></a></li><li><a class="email share-button t-email" aria-label="Share this section via email" title="Share this section via email" href="mailto:?subject=Safari:%2010.%20Testability&amp;body=https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch10.html%0D%0Afrom%20Software%20Architecture%20in%20Practice%2C%20Third%20Edition%0D%0A"><span>Email</span></a></li></ul></li>
      </ul>
    </div>

    <section role="document">
	  <div class="t-sbo-prev sbo-prev sbo-nav-top">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch24.html" class="prev nav-link">
      
          <span aria-hidden="true" class="pagination-label t-prev-label">Prev</span>
          <span class="visuallyhidden">Previous Chapter</span>
          <div class="pagination-title t-prev-title">24. Architecture Competence</div>
        </a>
    
  
  </div>

  <div class="t-sbo-next sbo-next sbo-nav-top">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/part05.html" class="next nav-link">
      
          <span aria-hidden="true" class="pagination-label t-next-label">Next</span>
          <span class="visuallyhidden">Next Chapter</span>
          <div class="pagination-title t-next-title">Part Five: The Brave New World</div>
        </a>
    
  
  </div>



<div id="sbo-rt-content"><div class="annotator-wrapper"><h2 id="ch25"><a id="page_479"></a>25. Architecture and Software Product Lines</h2>
<div class="attri">
<p class="blockquote"><em>Coming together is a beginning. Keeping together is progress. Working together is success.</em></p>
<p class="attribution">—Henry Ford</p>
</div>
<p class="noindent">A software architecture represents a significant 
investment of time and effort, usually by senior talent. So it is 
natural to want to maximize the return on this investment by reusing an 
architecture across multiple systems.</p>
<p class="indent">There are many ways this happens in practice. The patterns we discussed in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13">Chapter 13</a>
 are a big step in this direction; using a pattern is reusing a package 
of architectural decisions (albeit not a complete architecture). And 
strictly speaking, every time you make a change to a system, you are 
reusing its architecture (or whatever portion of its architecture you 
don’t have to change).</p>
<p class="indent">This chapter shows yet another way to reuse a software
 architecture (and many other assets as well) across a family of related
 systems, and the benefits that doing so can bring. Many 
software-producing organizations tend to produce systems or products 
that resemble each other more than they differ. This is an opportunity 
for reusing the architecture across these similar products. These 
software product lines simplify the creation of new members of a family 
of similar systems.</p>
<p class="indent">This kind of reuse has been shown to bring substantial
 benefits that include reduced cost of construction, higher quality, and
 greatly reduced time to market. This is the lure of the software 
product line approach to system building.</p>
<p class="indent">The Software Engineering Institute defines a software 
product line as “a set of software-intensive systems sharing a common, 
managed set of features that satisfy the specific needs of a particular 
market segment or mission and that are developed from a common set of 
core assets in a prescribed way.”</p>
<p class="indent">The vision is of a set of reusable assets (called core
 assets) based on a common architecture and the software elements that 
populate that architecture. The <a id="page_480"></a>core assets also 
include designs and their documentation, user manuals, project 
management artifacts such as budgets and schedules, software test plans 
and test cases, and more.</p>
<p class="indent">The product line approach works because the core 
assets were built specifically to support multiple members of the same 
family of products. Hence, reusing them is faster and less expensive 
than reinventing those software assets for each new product or system in
 the organization’s portfolio. Core assets, including the architecture, 
are usually designed with built-in variation points—places where they 
can be quickly tailored in preplanned ways.</p>
<p class="indent">Once the core assets are in place, system building becomes a matter of</p>
<p class="indenthangingB">• Accessing the appropriate assets in the core asset base</p>
<p class="indenthangingB">• Exercising the variation points to configure them as required for the system being built</p>
<p class="indenthangingB">• Assembling that system</p>
<p class="noindent">In the ideal case, this can be done automatically. 
Additional software developed for an individual product, if needed at 
all, tends to account for a small fraction of the total software. 
Integration and testing replace design and coding as the predominant 
activities.</p>
<p class="noindent">Product lines are nothing new in manufacturing. Many
 historians trace the concept to Eli Whitney’s use of interchangeable 
parts to build rifles in the early 1800s, but earlier examples also 
exist. Today, there are hundreds of examples in manufacturing: think of 
the products of companies like General Motors, Toyota, Boeing, Airbus, 
Dell, even McDonald’s, and the portfolio of similar products that each 
one produces. Each company exploits commonality in different ways. 
Boeing, for example, developed the 757 and 767 in tandem, and the parts 
lists of these two very different aircraft overlap by about 60 percent.</p>
<p class="noindent">The improvements in cost, time to market, and 
productivity that come with a successful software product line can be 
breathtaking. Consider:</p>
<p class="indenthangingB">• Nokia credits the software product line 
approach with giving it flexibility to bring over a dozen phones to 
market each year, as opposed to the three or so it could manage before, 
all with an unprecedented variety of features.</p>
<p class="indenthangingB">• Cummins, Inc., was able to reduce the time 
it takes to produce the software for a diesel engine from about a year 
to about a week.</p>
<p class="indenthangingB">• Hewlett-Packard builds products using 
one-quarter of the staff, in one-third of the time, and with one 
twenty-fifth the number of defects, compared with software built before 
the advent of software product line engineering.</p>
<p class="indenthangingB">• Deutsche Bank estimates $4 million in 
savings per year realized from building its global transaction and 
settlement software as a product line.</p>
<p class="indenthangingB">• Philips reports reduced faults during 
integration in its high-end television portfolio by adopting the product
 line approach. Product diversity used to be one of the top three 
concerns of their architects. Now it doesn’t even make the list of 
concerns at all; the product line approach has taken <a id="page_481"></a>software development off the critical path—the software no longer determines the delivery date of the product.</p>
<p class="indenthangingB">• With a product line of satellite ground 
control systems it commissioned, the U.S. National Reconnaissance Office
 reported the first product requiring 10 percent the expected number of 
developers and having one-tenth the expected number of defects.</p>
<p class="indenthangingB">• In Philips’s medical systems product line, 
the software product line approach has cut both software defects and 
time to market by more than half.</p>
<p class="noindent">Creating a successful product line depends on a 
coordinated strategy involving software engineering, technical 
management, and organization management. Because this is a book on 
software architecture, we focus on the architectural aspects of software
 product lines, but all aspects must work together in order for an 
organization to successfully create a product line.</p>
<div class="sidebar"><hr>
<p class="title"><a id="ch25sb01"></a>That Silver Lining Might Have a Cloud</p>
<p class="sb-noindent">The software product line paradigm is a powerful 
way to leverage an investment in architecture (and other core assets) 
into a family of related systems and thus see order-of-magnitude 
improvements in time to market, quality, and productivity. These results
 are possible and have been demonstrated by companies large and small in
 many different domains. The effects are real. Further, data from many 
sources and companies confirms with astonishing consistency that, to 
make the investment pay off, an organization needs to build only three 
products. This is the minimum number we would expect to have in a 
product line.</p>
<p class="sb-indent">But other results are possible as well, and a 
spectacular crash-and-burn is not out of the question when trying to 
adopt this approach. Product line practice, like any technology, needs 
careful thought given to its adoption, and a company’s history, 
situation, and culture must be taken into account. Factors that can 
contribute to product line failure include these:</p>
<p class="indenthangingB">• Lack of a champion in a position of sufficient control and visibility</p>
<p class="indenthangingB">• Failure of management to provide sustained and unwavering support</p>
<p class="indenthangingB">• Reluctance of middle managers to relinquish autocratic control of projects</p>
<p class="indenthangingB">• Failure to clearly identify business goals for adopting the product line approach</p>
<p class="indenthangingB">• Abandoning the approach at the first sign of difficulty</p>
<p class="indenthangingB">• Failure to adequately train staff in the approach and failure to explain or justify the change adequately</p>
<p class="indenthangingB">• Lack of discipline in managing the architecture’s variation points</p>
<p class="indenthangingB">• Scoping the product line too broadly or too narrowly</p>
<p class="indenthangingB">• Lack of product line tooling to help manage and exercise the variation points</p>
<p class="sb-indent"><a id="page_482"></a>Fortunately, there are 
strategies for overcoming most of these factors. One good strategy is to
 launch a small but visible pilot project to demonstrate the 
quantitative benefits of software product lines. The pilot can be 
staffed by those most willing to try something new while the skeptics go
 about their business. It can work out process issues, clarify roles and
 responsibilities, and in general work out the bugs before the approach 
is transitioned to a wider setting.</p>
<p class="attribution">—<em>PCC</em></p>
<hr></div>
<h3 id="ch25lev1sec1">25.1. An Example of Product Line Variability</h3>
<p class="noindent">The following example will help us illustrate the 
concept of product line variability. In a product line of software to 
support U.S. bank loan offices, suppose we have a software module that 
calculates what a customer owes in the current month. For 18 of the 21 
products in our product line, this module is completely adequate. 
However, our company is about to enter the market in the state of 
Delaware, which has certain laws that affect what a customer can owe. 
For the three products we plan to sell in Delaware, we need a module 
that differs from the “standard” module. Analysis shows that the 
difference will affect about 250 lines of source code in our 8,000-line 
module.</p>
<p class="indent">To build one of the Delaware products, what do we do? 
An obvious option is to copy the module, change the 250 or so lines, and
 use the new version in the three products. This practice is called 
“clone-and-own”—the new projects “clone” the module, change it, and then
 “own” the new version. Most companies, when faced with this situation, 
resort to clone-and-own. It’s expedient in that it provides a quick 
start to a new product, but it comes with a substantial cost down the 
road.</p>
<p class="indent">The problem with clone-and-own is that it doesn’t 
scale. Suppose each of our 21 products comprises roughly 100 modules. If
 each module is allowed to diverge for each product, that’s potentially 
2,100 modules that the maintenance staff has to deal with, each one 
spiraling off on its own separate maintenance trajectory based on the 
needs of the lone project each version is used in. Many companies’ 
growth in a market is limited—brought to a halt, in fact—by their 
inability to staff the maintenance of so many separate versions of so 
many different assets composing the products in their portfolio. An 
organization fielding several versions of several products finds itself 
dealing with a staggeringly complex code base. The strain begins to show
 when a systematic change needs to be made to all of the products—for 
example, to add a new feature, or migrate to a new platform, or make the
 user interface work in a different language. Because each version of 
each component used in each product has been allowed to evolve 
separately, now suddenly making a systematic change becomes 
prohibitively expensive (and <a id="page_483"></a>only gets worse each time a new product is added—the labor involved grows as the <em>square</em>
 of the number of products). It only takes a few such portfolio-wide 
changes before organizations feel that they’ve hit a wall of complexity 
and expense.</p>
<p class="indent">So much for clone-and-own. What else can we do? 
Instead of allowing up to 21 versions of each module, we would much 
rather find a way to take advantage of the fact that these nearly 
identical modules vary only in small, well-defined ways. To take 
advantage of their similarities, we introduce a <em>variation mechanism</em> into the module. (Variation mechanisms are often realized as tactics, such as the “defer binding” set of tactics described in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch07.html#ch07">Chapter 7</a>.)
 This variation mechanism will let us maintain a single module that can 
adapt to the range of variations in the applications (in our example, 
the 21 banking products) that it has to support. If we plan to market 
our products in states that, like Delaware, have their own laws 
affecting what a customer owes, we may need to support additional 
variations of the module. So our variation mechanism should be able to 
accommodate those possibilities as well.</p>
<p class="indent">The payoff for this up-front planning is that an asset used in any of the products exists as a <em>single</em>
 version that (through the exercising of built-in variation mechanisms) 
works for all of the products in the product line. And now, making a 
portfolio-wide change merely consists of changing the core assets that 
are affected. Because all future versions of all products use the same 
core assets, changing the core asset base has the effect of changing all
 of the products in the organization’s portfolio.</p>
<h3 id="ch25lev1sec2">25.2. What Makes a Software Product Line Work?</h3>
<p class="noindent">What makes product lines succeed is that the 
commonalities shared by the products can be exploited through reuse to 
achieve production economies. The potential for reuse is broad and 
far-ranging, including the following:</p>
<p class="indenthangingB">• <em>Requirements</em>. Most of the 
requirements are common with those of earlier systems and so can be 
reused. In fact, many organizations simply maintain a single set of 
requirements that apply across the entire family as a core asset; the 
requirements for a particular system are then written as “delta” 
documents off the full set. In any case, most of the effort consumed by 
requirements analysis is saved from system to system.</p>
<p class="indenthangingB">• <em>Architectural design</em>. An 
architecture for a software system represents a large investment of time
 from the organization’s most talented engineers. As we have seen, the 
quality goals for a system—performance, reliability, modifiability, and 
so forth—are largely promoted or inhibited once the architecture is in 
place. If the architecture is wrong, the system cannot be <a id="page_484"></a>saved. For a new product, however, this most important design step is already done and need not be repeated.</p>
<p class="indenthangingB">• <em>Software elements</em>. Software 
elements are applicable across individual products. Element reuse 
includes the (often difficult) initial design work. Design successes are
 captured and reused; design dead ends are avoided, not repeated. This 
includes design of each element’s interface, its documentation, its test
 plans and procedures, and any models (such as performance models) used 
to predict or measure its behavior. One reusable set of elements is the 
system’s user interface, which represents an enormous and vital set of 
design decisions. And as a result of this interface reuse, products in a
 product line usually enjoy the same look and feel as each other, an 
advantage in the marketplace.</p>
<p class="indenthangingB">• <em>Modeling and analysis</em>. Performance 
models, schedulability analysis, distributed system issues (such as 
proving the absence of deadlock), allocation of processes to processors,
 fault tolerance schemes, and network load policies all carry over from 
product to product. Companies that build real-time distributed systems 
report that one of the major headaches associated with production has 
all but vanished. When they field a new product in their product line, 
they have high confidence that the timing problems have been worked out 
and that the bugs associated with distributed computing—synchronization,
 network loading, and absence of deadlock—have been eliminated.</p>
<p class="indenthangingB">• <em>Testing</em>. Test plans, test 
processes, test cases, test data, test harnesses, and the communication 
paths required to report and fix problems are already in place.</p>
<p class="indenthangingB">• <em>Project planning artifacts</em>. 
Budgeting and scheduling are more predictable because experience is a 
high-fidelity indicator of future performance. Work breakdown structures
 need not be invented each time. Teams, team size, and team composition 
are all easily determined.</p>
<p class="indent">All of these represent valuable core assets, each of 
which can be imbued with its own variation points that can be exercised 
to build a product. We’ll look at architectural variation points later 
in this chapter, but for now imagine that any artifact represented by 
text can consist of text blocks that are exposed or hidden for a 
particular product. Thus, the artifact that is maintained in the core 
asset base represents a superset of any version that will be produced 
for a product.</p>
<p class="indent">Artifact reuse in turn enables reuse of knowledge:</p>
<p class="indenthangingB">• <em>Processes, methods, and tools</em>. 
Configuration control procedures and facilities, documentation plans and
 approval processes, tool environments, system generation and 
distribution procedures, coding standards, and many other day-to-day 
engineering support activities can all be carried over from product to 
product. The software development process is in place and has been used 
before.</p>
<div class="sidebar"><a id="page_485"></a><hr>
<p class="title"><a id="ch25sb02"></a>Giving Software Reuse a New Lease on Life</p>
<p class="sb-noindent">Software product lines rely on reuse, but reuse 
has a long but less than stellar history in software engineering, with 
the promise almost always exceeding the payoff. One reason for this 
failure is that until now reuse has been predicated on the idea of “If 
you build it, they will come.” A reuse library is stocked with snippets 
from previous projects, and developers are expected to check it first 
before coding new elements. Almost everything conspires against this 
model. If the library is too sparse, the developer will not find 
anything of use and will stop looking. If the library is too rich, it 
will be hard to understand and search. If the elements are too small, it
 is easier to rewrite them than to find them and carry out whatever 
modifications they might need. If the elements are too large, it is 
difficult to determine exactly what they do in detail, which in any case
 is not likely to be exactly right for the new application. In most 
reuse libraries, pedigree is hazy at best. The developer cannot be sure 
exactly what the element does, how reliable it is, or under what 
conditions it was tested. And there is almost never a match between the 
quality attributes needed for the new application and those provided by 
the elements in the library.</p>
<p class="sb-indent">In any case, it is common that the elements were 
written for a different architectural model than the one the developer 
of the new system is using. Even if you find something that does the 
right thing with the right quality attributes, it is doubtful that it 
will be the right kind of architectural element (if you need an object, 
you might find a process), that it will have the right interaction 
protocol, that it will comply with the new application’s error-handling 
or failover policies, and so on.</p>
<p class="sb-indent">This has led to so many reuse failures that many 
project managers have given up on the idea. “Bah!” they exclaim. “We 
tried reuse before, and it doesn’t work!”</p>
<p class="sb-indent">Software product lines make reuse work by 
establishing a strict context for it. The architecture is defined; the 
functionality is set; the quality attributes are known. Nothing is 
placed in the reuse library—or “core asset base” in product line 
terms—that was not built to be reused in that product line. Product 
lines work by relying on strategic or planned, not opportunistic, reuse.</p>
<p class="attribution">—<em>PCC</em></p>
<hr></div>
<p class="indenthangingB">• <em>People</em>. Because of the commonality 
of applications, personnel can be transferred among projects as 
required. Their expertise is applicable across the entire line.</p>
<p class="indenthangingB">• <em>Exemplar systems</em>. Deployed products
 serve as high-quality demonstration prototypes or engineering models of
 performance, security, safety, and reliability.</p>
<p class="indenthangingB"><a id="page_486"></a>• <em>Defect elimination</em>.
 Product lines enhance quality because each new system takes advantage 
of the defect elimination in its forebears. Developer and customer 
confidence both rise with each new instantiation. The more complicated 
the system, the higher the payoff for solving vexing performance, 
distribution, reliability, and other engineering issues once for the 
entire family.</p>
<p class="indent">All of this reuse helps products launch more quickly, 
with higher quality, lower cost, and more predictable budget and 
schedule. This is critical for getting a product to market in a timely 
fashion. However, these benefits do not come for free. A product line 
may require a substantial up-front investment of time and effort to set 
up and manage, as well as to keep the core assets responsive to changing
 market needs.</p>
<h3 id="ch25lev1sec3">25.3. Product Line Scope</h3>
<p class="noindent">One of the most important inputs to an architect 
building an architecture for a software product line is the product 
line’s scope. A product line’s scope is a statement about what systems 
an organization is willing to build as part of its line and what systems
 it is not willing to build. Defining a product line’s scope is like 
drawing a doughnut in the space of all possible systems, as shown in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch25.html#ch25fig01">Figure 25.1</a>.
 The doughnut’s center represents the systems that the organization 
could easily build using its base of core assets; these are within its 
production capability. Systems outside the doughnut are out of scope 
because they are ones the product line’s core assets are not well 
equipped to handle; this would be like asking Toyota to build, say, 
apple pies on one of its automotive assembly lines.</p>
<div class="image"><a id="ch25fig01"></a><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/25fig01.jpg" src="25.%20Architecture%20and%20Software%20Product%20Lines_files/25fig01.jpg" alt="Image" height="234" width="370"></div>
<p class="fig-caption">Figure 25.1. The space of all possible systems is
 divided into areas within scope (white), areas outside of scope 
(speckled), and areas that require case-by-case disposition (gray).</p>
<p class="indent"><a id="page_487"></a>Systems on the doughnut itself 
could be handled, but with some effort. These often represent 
invitations from the marketplace asking the organization to extend its 
product line. To take advantage of such an opportunity, the organization
 would have to broaden its production capability—that is, make its core 
asset base able to handle the new product. These opportunities require 
case-by-case disposition as they arise, to see if the potential payoff 
(such as entry into a slightly different area of the market) would 
outweigh the cost to modify the core assets. This would be like asking 
Toyota to build a riding lawnmower.</p>
<p class="indent">The scope represents the organization’s best 
prediction about what products it will be asked to build in the 
foreseeable future. Input to the scoping process comes from the 
organization’s strategic planners, marketing staff, domain analysts who 
can catalog similar systems (both existing and on the drawing board), 
and technology experts.</p>
<p class="indent">A product line scope is a critical factor in the 
success of the product line. Scope too narrowly (the products only vary 
in a small number of features) and an insufficient number of products 
will be derived to justify the investment in development. Scope too 
broadly (the products vary in kind as well as in features) and the 
effort required to develop individual products from the core assets is 
too great to lead to significant savings. Scope can be refined as a 
portion of the initial establishment of the product line or 
opportunistically depending on the product line adoption strategy (see 
the section on adoption strategies in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch25.html#ch25lev1sec8">Section 25.8</a>).</p>
<p class="indent">The problem in defining the scope is not in finding commonality—a creative architect can find points of commonality between <em>any</em>
 two systems—but in finding commonality that can be exploited to 
substantially reduce the cost of constructing the systems that an 
organization intends to build. When considering scope, more than just 
the systems being built should be considered. Market segmentation and 
types of customer interactions assumed will help determine the scope of 
any particular product line. For example, Philips, the Dutch 
manufacturer of consumer electronics, has distinct product lines for 
home video electronic systems and digital video communication. Video is 
the common thread, but one is a mass market, where the customer is 
assumed to have very little video sophistication, and the other is a 
much smaller market consisting purely of video professionals. The 
products being developed reflect these assumptions about the 
sophistication of customers and the amount of care each customer will 
receive. These differences were sufficient to keep Philips from 
attempting to develop a single product line for both markets.</p>
<p class="indent">Narrowly scoped product lines offer opportunities to 
build specialized tools to support the specification of new products. 
For example, General Motors’ Powertrain division builds a software 
product line of automotive software. It makes an individual product from
 its product line core assets based on contracts stored in a database. 
Each element has well-defined interfaces and possible variation points. A
 tool searches the database based on desired features and assembles the 
product.</p>
<p class="indent"><a id="page_488"></a>The scope definition is vital to 
the product line architect because the scope defines what is common 
across all members of the product line, and the specific ways in which 
the products differ from each other. The fixed part of a product line 
architecture reflects what is constant, and the architecture’s variation
 points accommodate the variations among products.</p>
<h3 id="ch25lev1sec4">25.4. The Quality Attribute of Variability</h3>
<p class="noindent">Scoping decisions, which tell the product line 
architect what kinds of systems are “in” and what kinds of systems are 
“out” of the product line, lead to the introduction of variability in 
the core assets. In fact, the quality attribute of variability is most 
closely associated with product lines. Some may feature high-performance
 products, or high-security products, or high-availability products, but
 <em>all</em> product lines feature variability aimed at satisfying the commonalities and variations identified by the product line’s scope.</p>
<p class="indent">We introduced variability in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch12.html#ch12">Chapter 12</a>.
 There we said that variability is a special form of modifiability, 
pertaining to the ability of a core asset to adapt to usages in the 
different product contexts that are within the product line scope. The 
goal of variability in a software product line is to make it easy to 
build and maintain products in the product line over time.</p>
<p class="indent"><a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch25.html#ch25tab01">Table 25.1</a>
 gives the general scenario for variability. The source is some actor in
 the product line organization who identifies a need for variation; this
 actor is probably someone involved in setting the product line’s scope,
 such as a marketer.</p>
<p class="tab-caption"><a id="ch25tab01"></a>Table 25.1. The General Scenario for Variability</p>
<div class="image"><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/25tab01.jpg" src="25.%20Architecture%20and%20Software%20Product%20Lines_files/25tab01.jpg" alt="Image" height="675" width="630"></div>
<p class="indent">Identifying variation is a constant, iterative process
 in the life of a software product line. Because of the many different 
ways a product can vary, particular variants can be identified at 
virtually any time during the development process. Some variations are 
identified during product line requirement elicitations; others, during 
architecture design; and still others, during implementation. Variations
 may also be identified during implementation of the second (and 
subsequent) products as well.</p>
<p class="indent">Product line architectures feature <em>variability</em> as an important quality attribute. They achieve this by incorporation of <em>variation mechanisms</em>, which we will discuss in more detail shortly.</p>
<h3 id="ch25lev1sec5">25.5. The Role of a Product Line Architecture</h3>
<p class="noindent">Of all of the assets in a core asset repository, the
 software architecture plays the most central role. There is both a 
tactical and a strategic reason for this.</p>
<p class="indent"><a id="page_489"></a>The tactical reason is the 
importance the architecture plays in building products in a product 
line. The essence of building a successful software product line is 
discriminating between what is expected to remain constant across all 
family members and what is expected to vary. Software architecture is 
ideal for handling this variation, because all architectures are 
abstractions that admit multiple instances. By its very nature every 
architecture is a statement about what we expect to remain constant and 
what we admit may vary. For example, interfaces to components are 
designed to remain stable, with anticipated changes hidden behind those 
interfaces.</p>
<p class="indent">In a software product line, the architecture has to 
encompass both the varying and the nonvarying aspects. A product line 
architecture must be designed to accommodate a set of explicitly allowed
 variations. Thus, identifying <a id="page_490"></a>the allowable 
variations is part of the architect’s responsibility, as is providing 
built-in mechanisms for achieving them. Those variations may be 
substantial. Products in a software product line exist simultaneously 
and may vary in terms of their behavior, quality attributes, platform, 
network, physical configuration, middleware, scale factors, and so 
forth.</p>
<p class="indent">The strategic reason has to do with the capability it 
imparts to an organization outside the realm of an existing product 
line. As we saw in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch02.html#ch02">Chapters 2</a> and <a class="totri-footnote" href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch03.html#ch03">3</a>,
 an architecture can serve as a technical platform for launching new 
applications and even new business models, and it can serve as a 
springboard for an organization diving into a new business area. This 
seems to be especially true for product line architectures. There are 
many cases where an organization has taken advantage of its production 
capability—that is, its core asset base crowned by a product line 
architecture—by using that capability to enter new markets. For example,
 Cummins took its product line of automotive diesel engines to enter and
 quickly dominate the neighboring market for industrial diesel engines. 
Industrial diesel engines power things like rock crushers and ski lifts,
 markets of low volume and high specialization. Systems in that market 
built uniquely for each application are expensive and don’t yield a high
 return. But a product line that includes industrial diesel engines in 
its scope, and whose production capability supports industrial diesel 
engines, is a recipe for rapid market capture.</p>
<p class="indent">A product line architect needs to consider three things that are unique to product line architectures:</p>
<p class="indenthangingB">• <em>Identifying variation points.</em> This 
is done by using the scope definition and product line requirements as 
input. The product line architect determines where in the architecture 
variation points should be made available to support the rapid building 
of products.</p>
<p class="indenthangingB">• <em>Supporting variation points.</em> This is done by introducing variation mechanisms, which will be discussed in the next section.</p>
<p class="indenthangingB">• <em>Evaluating the architecture for product line suitability</em>, which will be discussed later in this chapter.</p>
<h3 id="ch25lev1sec6">25.6. Variation Mechanisms</h3>
<p class="noindent">In a conventional architecture, the mechanism for 
achieving different instances often comes down to modifying the code. 
But in a software product line, modifying code is undesirable, because 
this leads to a large number of separately maintained implementations 
that quickly outstrip an organization’s ability to keep them up to date 
and consistent.</p>
<p class="indent">Three primary <em>architectural</em> variation mechanisms are these:</p>
<p class="indenthangingB"><a id="page_491"></a>• <em>Inclusion or omission of elements.</em>
 This decision can be reflected in the build procedures for different 
products, or the implementation of an element can be conditionally 
compiled based on some parameter indicating its presence or absence.</p>
<p class="indenthangingB">• <em>Inclusion of a different number of replicated elements.</em>
 For instance, high-capacity variants might be produced by adding more 
servers—the actual number should be unspecified, as a point of 
variation, and may be done dynamically.</p>
<p class="indenthangingB">• <em>Selection of different versions of 
elements that have the same interface but different behavioral or 
quality attribute characteristics.</em> Selection can occur at compile 
time, build time, or runtime. Selection mechanisms include static 
libraries, which contain external functions linked after compilation 
time; dynamic link libraries, which have the flexibility of static 
libraries but defer the decision until runtime based on context and 
execution conditions; and add-ons (e.g., plug-ins, extensions, and 
themes), which add or modify application functionality at runtime. By 
changing the libraries, we can change the implementation of functions 
whose names and signatures are known.</p>
<p class="indent">Some variation mechanisms can be introduced that 
change aspects of a particular software element. Modifying the source 
code each time the element is used in a new product—that is, 
clone-and-own—falls into this category, although it is undesirable. More
 sophisticated techniques include the following:</p>
<p class="indenthangingB">• <em>Extension points.</em> These are identified places in the architecture where additional behavior or functionality can be safely added.</p>
<p class="indenthangingB">• <em>Reflection.</em> This is the ability of a
 program to manipulate data on itself or its execution environment or 
state. Reflective programs can adjust their behavior based on their 
context.</p>
<p class="indenthangingB">• <em>Overloading.</em> This is a means of 
reusing a named functionality to operate on different types. Overloading
 promotes code reuse, but at the cost of understandability and code 
complexity.</p>
<p class="indent">Other commonly used variation mechanisms include those in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch25.html#ch25tab02">Table 25.2</a>.</p>
<p class="tab-caption"><a id="ch25tab02"></a>Table 25.2. Common Variation Mechanisms</p>
<div class="image"><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/25tab02.jpg" src="25.%20Architecture%20and%20Software%20Product%20Lines_files/25tab02.jpg" alt="Image" height="751" width="629"></div>
<p class="indent">Choosing the right variation mechanism affects numerous costs:</p>
<p class="indenthangingB">• The skill set required to implement, or 
learn and use, the specific variation mechanism, such as server or 
framework programming</p>
<p class="indenthangingB">• The one-time costs of building or acquiring 
the tools (such as compilers or generators) required to create the 
variation mechanism</p>
<p class="indenthangingB">• The recurring cost and time to exercise the variation mechanism</p>
<p class="indent">The choice of variation mechanism also affects downstream users and developers:</p>
<p class="indenthangingB">• The targeted group of users that use the 
mechanism for product-specific adaptation, such as product developer, 
integrator, system administrator, and end user</p>
<p class="indent"><a id="page_492"></a>Finally, the choice of variation mechanism affects product quality:</p>
<p class="indenthangingB">• The impact of the variation mechanism on quality, such as possible performance penalties or memory consumption</p>
<p class="indenthangingB">• The impact on the mechanism’s maintainability</p>
<p class="indent">The architect should document the choice of variation 
mechanisms. In fact, the documentation of variation mechanisms is the 
primary way in which the documentation for a product line architecture 
differs from that of a conventional architecture. In the documentation 
template we presented in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch18.html#ch18">Chapter 18</a>, the section called the <em>variability guide</em>
 is reserved for exactly this purpose. The variability guide should 
describe each variation mechanism, how and when to exercise it, and what
 allowed variations it supports. The architecture documentation should 
also describe the architecture’s instantiation process—that is, how its 
variation points are exercised. Also, if certain combinations of 
variations are disallowed, then the documentation needs to explain valid
 and invalid variation choices.</p>
<h3 id="ch25lev1sec7"><a id="page_493"></a>25.7. Evaluating a Product Line Architecture</h3>
<p class="noindent">Like any other, the architecture for a software 
product line should be evaluated for fitness of purpose. The 
architecture should be evaluated for its robustness and generality, to 
make sure it can serve as the basis for products in the product line’s 
envisioned scope. It should also be evaluated to make sure it meets the 
specific behavioral and quality requirements of the product at hand. We 
begin by focusing on the what and how of the evaluation and then turn to
 when it should take place.</p>
<p class="indent"><strong>What and How to Evaluate.</strong> The 
evaluation will have to focus on the variation points to make sure they 
are appropriate, that they offer sufficient flexibility to cover the 
product line’s intended scope, that they allow products to be built 
quickly, and that they do not impose unacceptable runtime performance 
costs. If your evaluation is scenario based, expect to elicit scenarios 
that involve instantiating the architecture to support different 
products in the family. Also, different products in the product line may
 have different quality attribute requirements, and the architecture 
will have to be evaluated for its ability to provide all required 
combinations. Here again, try to elicit scenarios that capture the 
quality attributes required of family members.</p>
<p class="indent">Often, some of the hardware and other 
performance-affecting factors for a product line architecture are 
unknown to begin with. In this case, evaluation can establish bounds on 
the performance that the architecture is able to achieve, assuming 
bounds on hardware and other variables. The evaluation can identify 
potential contention so that you can put in place the policies and 
strategies to resolve it.</p>
<p class="indent"><strong>When to Evaluate.</strong> An evaluation 
should be performed on an instance or variation of the architecture that
 will be used to build one or more products in the product line. The 
extent to which this is a separate, dedicated evaluation depends on the 
extent to which the product’s requirements differ from the product line 
architecture envelope. If it does not differ, the product architecture 
evaluation can be abbreviated, because many of the issues normally 
raised in a single product evaluation will have been dealt with in the 
product line evaluation. In fact, just as the product architecture is a 
variation of the product line architecture, the product architecture 
evaluation is a variation of the product line architecture evaluation. 
Therefore, depending on the evaluation method used, the evaluation 
artifacts (scenarios, checklists, and so on) <a id="page_494"></a>will 
have reuse potential, and you should create them with that in mind. The 
results of evaluation of product architectures often provide useful 
feedback to the product line architects and fuel architectural 
improvements.</p>
<p class="indent">When a new product is proposed that falls outside the 
scope of the original product line (for which the architecture was 
presumably evaluated), the product line architecture can be reevaluated 
to see if it will suffice for it. If it does, the product line’s scope 
can be expanded to include the new product, or to spawn a new product 
line. If it does not, the evaluation can determine how the architecture 
will have to be modified to accommodate the new product. The product 
line and product instance architectures can be evaluated not only to 
determine architectural risks but also to understand economic 
consequences (see <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch23.html#ch23">Chapter 23</a>), to determine which products will yield the most return.</p>
<h3 id="ch25lev1sec8">25.8. Key Software Product Line Issues</h3>
<p class="noindent">It takes considerable maturity in the developing 
organization to successfully field a product line. Technology is not the
 only barrier to this; organization, process, and business issues are 
equally vital to master to fully reap the benefits of the software 
product line approach.</p>
<p class="indent">Architecture definition is an important activity for 
any project, but as we saw in the previous section, it needs to 
emphasize variation points in a software product line. Configuration 
management is also an important activity for any project, but it is more
 complex for a software product line because each product is the result 
of binding a large number of variations. The configuration management 
problem for product lines is to reproduce any version of any product 
delivered to any customer, where “product” means code and supporting 
artifacts ranging from requirement specs and test cases to user manuals 
and installation guides. This involves knowing what version of each core
 asset was used in a product’s construction, how every asset was 
tailored, and what special-purpose code or documentation was added.</p>
<p class="indent">Examining every facet of launching a product line and 
institutionalizing a product line culture is outside the scope of this 
book, but the next sections will examine a few of the key areas that 
must be addressed. These are issues that an organization will have to 
face when considering whether to adopt a product line approach for 
software development and, if so, how to go about it.</p>
<h4 id="ch25lev2sec1">Adoption Strategies</h4>
<p class="noindent">An organization’s culture and context will 
dramatically affect how it goes about adopting a product line approach. 
Here are some of the important organizational and process factors that 
we have seen in practice.</p>
<h5 id="ch25lev3sec1"><a id="page_495"></a>Top-Down vs. Bottom-Up</h5>
<p class="noindent">Top-down adoption arises when a (typically high 
level) manager decrees that the organization will use the approach. The 
problem is to get employees in the trenches to change the way they work.
 Bottom-up adoption happens when designers and developers working at the
 product level realize that they are needlessly duplicating each other’s
 work and begin to share resources and develop generic core assets. The 
problem is finding a manager willing to sponsor the work and spread the 
technique to other parts of the organization. Both approaches work; both
 are helped enormously by the presence of a strong <em>champion</em>—someone
 who has thoroughly internalized the product line vision and can share 
that compelling vision with others. (It works better if the champion is 
in a position of some authority.)</p>
<h5 id="ch25lev3sec2">Proactive vs. Reactive</h5>
<p class="noindent">There are two primary models for how an organization may grow a product line:</p>
<p class="indenthangingB">• In a proactive product line, an organization
 defines the family using a comprehensive definition of scope. They do 
this not with a crystal ball but by taking advantage of their experience
 in the application area, their knowledge about the market and 
technology trends, and their good business sense. The proactive model 
allows the organization to make the most far-reaching strategic 
decisions. Explicitly scoping the product line allows you to look at 
areas that are underrepresented by products already in the marketplace, 
make small extensions to the product line, and move quickly to fill the 
gap. In short, proactive product line scope allows an organization to 
take charge of its own fate. Sometimes an organization does not have the
 ability to forecast the needs of the market with the certainty 
suggested by the proactive model. The proactive model also takes some 
time to define and implement, and in that time the organization needs to
 continue to construct products.</p>
<p class="indenthangingB">• In a reactive product line, an organization 
builds the next member or members of the product family from earlier 
products. This is best used when there is uncertainty of requirements. 
Perhaps the domain is a new one. Perhaps the market is in flux. Or 
perhaps the organization cannot afford to build a core asset base that 
will cover the entire scope all at once. In the reactive model, with 
each new product the architecture is extended as needed and the core 
asset base is built up from what has turned out to be common. The 
reactive model puts much less emphasis on up-front planning and 
strategic direction setting. Rather, the organization lets itself be 
taken where the market dictates. This is an example of agile 
architecting, as described in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch15.html#ch15">Chapter 15</a>.</p>
<h5 id="ch25lev3sec3">Incremental vs. Big Bang</h5>
<p class="noindent">If you are proactively building a product line, you 
still need to choose how to populate it: all at once or incrementally 
over time. Populating the core asset base all at once is a strategy that
 has worked successfully for some organizations. However, it tends to 
require all or nearly all of the <a id="page_496"></a>organization’s 
resources be focused on that task, at the expense of new product 
production. A different approach is to populate the core asset base 
incrementally, as circumstances and resources permit. Each product that 
goes out the door is built with whatever core assets are available at 
the time. That means that early products will include software not 
derived from core assets. But those products will still be better off 
(that is, faster to market, of higher quality, and easier to maintain) 
than products built entirely from unique code. And it’s entirely 
possible that some of the software unique to those early products can be
 extracted, adapted, and generalized to become core assets themselves, 
thus helping populate the core asset base in a reactive fashion.</p>
<p class="indent">Knowing the various adoption models can help an 
organization choose the one that is right for it. For example, the 
proactive model requires a heavier initial investment but less rework 
than the reactive model. The reactive model relies exclusively on rework
 with little initial investment. Which model should act as a guide for a
 particular organization depends on the business situation.</p>
<h4 id="ch25lev2sec2">Creating Products and Evolving a Product Line</h4>
<p class="noindent">An organization that has a product line will have an
 architecture and a collection of elements associated with it. From time
 to time, the organization will create a new member of the product line 
that will have features both in common with and different from those of 
other members.</p>
<p class="indent">One problem associated with a product line is managing
 its evolution. As time passes, the line—or, more precisely, the set of 
core assets from which products are built—must evolve. That evolution 
will be driven by both external and internal sources:</p>
<p class="indent"><em>External sources</em></p>
<p class="indenthangingB">• New versions of existing elements within the
 line will be released by their vendors, and future products will need 
to be constructed from them.</p>
<p class="indenthangingB">• New externally created elements may be added
 to the line. Thus, for example, functions that were previously 
performed by internally developed elements may now be performed by 
elements acquired externally, or vice versa. Or future products will 
need to take advantage of new technology, as embodied in externally 
developed elements.</p>
<p class="indenthangingB">• New features may be added to the product line to keep it responsive to user needs or competitive pressures.</p>
<p class="indent"><em>Internal sources</em></p>
<p class="indenthangingB">• Some entity within the organization must 
determine if new functions added to a product are within the product 
line’s scope. If so, they can simply be built from the asset base. If 
not, a decision must be made: either the enhanced product spins off from
 the product line, following its own evolutionary path, or the asset 
base must be expanded to include it. Updating the <a id="page_497"></a>line
 may be the wisest choice if the new functionality is likely to be used 
in future products, but this capability comes at the cost of the time 
necessary to update the core assets.</p>
<p class="indenthangingB">• An organization may wish to replace old 
products with ones built from the most up-to-date version of the asset 
base. Keeping products compatible with the product line takes time and 
effort. But not doing so may make future upgrades more time consuming, 
because either the product will need to be brought into compliance with 
the latest product line elements or it will not be able to take 
advantage of improvements in the line.</p>
<h4 id="ch25lev2sec3">Organizational Structure</h4>
<p class="noindent">An asset base on which products depend, but which 
has its own evolutionary path (perhaps driven by technology change), 
requires an organization to decide how to manage both it and product 
development. There are two main organizational strategies from which to 
choose, plus a number of minor variations. The two main structures 
reflect different answers to the question “Shall we have a dedicated 
group whose sole job is to build and maintain our core asset base?”</p>
<p class="indenthangingN"><strong>1.</strong> <em>We’re all in this together.</em>
 In this scheme, there is no separate core asset group. The 
product-building development teams coordinate closely, and divide up the
 core asset responsibilities among themselves. That is, Product Team 1 
might be assigned responsibility for the development and maintenance of 
Core Assets 3, 6, 9, 12, and 15; Product Team 2 might take Core Assets 
1, 4, and 8; and so forth. This works well enough for small 
organizations, but as size grows the communication channels become 
untenable. Also, each team has to resist the temptation to build core 
assets that are especially appropriate to its needs, but less so to 
other teams’ needs.</p>
<p class="indenthangingN"><strong>2.</strong> <em>Separate core asset unit.</em>
 In this scheme, a special unit is given responsibility for the 
development and maintenance of the core asset base. Separate development
 teams in the organization’s business units build the products. In this 
scheme, the core asset unit (sometimes called a domain engineering unit)
 assumes the responsibility for the overall strategic direction of the 
product line. To the product teams, they appear almost like an external 
supplier. The product teams coordinate among themselves to set the core 
asset team’s development and test priorities, based on product delivery 
obligations.</p>
<h3 id="ch25lev1sec9">25.9. Summary</h3>
<p class="noindent">This chapter presented an architecture-based 
development paradigm known as software product lines. The product line 
approach is steadily climbing in <a id="page_498"></a>popularity as more organizations see true order-of-magnitude improvements in cost, schedule, and quality from using it.</p>
<p class="indent">Like all technologies, however, this one holds some 
surprises for the unaware. Architecturally, the key is identifying and 
managing commonalities and variations, but nontechnical issues must be 
addressed as well, including how the organization adopts the model, 
structures itself, and maintains its external interfaces.</p>
<h3 id="ch25lev1sec10">25.10. For Further Reading</h3>
<p class="noindent"><a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_048">[Clements 01a]</a>
 is a comprehensive treatment of software product lines. It includes a 
number of case studies as well as a thorough discussion of product line 
“practice areas,” which are areas of expertise a product line 
organization should have (or should develop) to help bring about product
 line success.</p>
<p class="indent"><a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_188">[van der Linden 07]</a> contains a rich set of product line case studies.</p>
<p class="indent"><a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_003">[Anastasopoulos 00]</a> presents a good list of variation mechanisms, as do <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_100">[Jacobson 97]</a> and <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_183">[Svahnberg 00]</a>. <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_007">[Bachmann 05]</a> provides a list of their own, as well as a treatment of each in terms of cost (it was the source for <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch25.html#ch25tab02">Table 25.2</a>). Organizational models for software product lines are treated in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_031">[Bosch 00]</a>.</p>
<p class="indent">There is an active software product line community of 
research and practice. The Software Product Line Conference (SPLC) is 
the mainstream forum for new software product line research and success 
stories. You can find it at <a href="http://www.splc.net/">www.splc.net</a>.
 SPLC maintains a “Software Product Line Hall of Fame,” which showcases 
successful software product lines that can serve as engineering models 
(and inspiration) to aspiring product line organizations. Each year, new
 members of the Hall of Fame are nominated, and in most years a new 
candidate is inducted. You can see the winners at <a href="http://www.splc.net/fame.html">www.splc.net/fame.html</a>.</p>
<p class="indent">The SEI’s website contains a wealth of material about 
software product lines, including a collection of “getting started” 
material: <a href="http://www.sei.cmu.edu/productlines">www.sei.cmu.edu/productlines</a>.</p>
<h3 id="ch25lev1sec11">25.11. Discussion Questions</h3>
<p class="question"><strong>1.</strong> Variability is achieved by 
adding variation mechanisms to a system. Variation mechanisms include 
inheritance, component substitution, plug-ins, templates, parameters 
(including text preprocessors), generators, aspects, runtime 
conditionals, and a configurator tool. Because variability can be seen 
as a kind of modifiability, see if you can map each of these variation 
mechanisms to one or more modifiability tactics given in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch07.html#ch07">Chapter 7</a>.</p>
<p class="question"><a id="page_499"></a><strong>2.</strong> Suppose a 
company builds two similar systems using a large set of common assets, 
including an architecture. Which of the following would you say 
constitutes a product line?</p>
<p class="indenthangingNB">• Sharing only an architecture but no elements.</p>
<p class="indenthangingNB">• Sharing only a single element.</p>
<p class="indenthangingNB">• Sharing the same operating system and programming language runtime libraries.</p>
<p class="indenthangingNB">• Sharing the same team of developers.</p>
<p class="questionP">Defend your answer.</p>
<p class="question"><strong>3.</strong> Pick a type of system you’re 
familiar with—for example, an automobile or a smartphone. Think of three
 instances of that kind of system. Make a list of all of the things the 
three instances have in common. Now make a list of all of the things 
that distinguish the three instances from each other (that is, their 
variation points). If automobiles turn out to be too complex, start with
 a simpler kind of “system,” such as an electric light.</p>
<p class="question"><strong>4.</strong> Write some concrete scenarios to express the variability you identified in the previous question.</p>
<p class="question"><strong>5.</strong> Do the list of variation mechanisms in this chapter constitute tactics for variability? Discuss.</p>
<p class="question"><strong>6.</strong> In many software product lines, 
products differ by the quality attributes they exhibit. For instance, a 
company might sell a cheap, low-security version of its product 
alongside a more expensive, high-security version of the same product. 
Which variation mechanisms might you choose to achieve this kind of 
variability?</p>
<div class="annotator-outer annotator-viewer annotator-hide viewer">
  <ul class="annotator-widget annotator-listing"></ul>
</div><div class="annotator-editor-wrapper"><div class="annotator-outer annotator-editor annotator-hide">
  <h3 class="title">Highlight</h3><form class="annotator-widget">
    <ul class="annotator-listing"><li class="annotator-item"><textarea maxlength="750" placeholder="Add a note (optional)" id="annotator-field-17"></textarea></li></ul>
    <div class="annotator-controls">
      <a href="#cancel" class="annotator-cancel button">Cancel</a>
<a href="#save" class="annotator-save annotator-focus button positive">Save</a>
    </div>
  </form>
</div></div><div style="display: none;" class="annotator-adder"><button><span></span></button></div></div></div>



  <div class="t-sbo-prev sbo-prev sbo-nav-bottom">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch24.html" class="prev nav-link">
      
          <span aria-hidden="true" class="pagination-label t-prev-label">Prev</span>
          <span class="visuallyhidden">Previous Chapter</span>
          <div class="pagination-title t-prev-title">24. Architecture Competence</div>
        </a>
    
  
  </div>

  <div class="t-sbo-next sbo-next sbo-nav-bottom">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/part05.html" class="next nav-link">
      
          <span aria-hidden="true" class="pagination-label t-next-label">Next</span>
          <span class="visuallyhidden">Next Chapter</span>
          <div class="pagination-title t-next-title">Part Five: The Brave New World</div>
        </a>
    
  
  </div>

</section>
    <div class="reading-controls-bottom">
      <ul class="interface-controls js-bitlist">
        <li class="queue-control">
            <button title="Add to Queue" aria-label="Add to Queue" data-for-analytics="9780132942799:ch25.html" type="button" class="rec-fav ss-queue js-queue js-current-chapter-queue" data-queue-endpoint="/api/v1/book/9780132942799/chapter/ch25.html">
      <span>Add to Queue</span>
  </button>
        </li>
      </ul>
    </div>
  </div>
  <div class="js-related-container related"></div>
<section class="sbo-saved-archives"></section>



          
          
  





    
    
      <div id="js-subscribe-nag" class="subscribe-nag clearfix trial-panel  collapsed slideUp">
        <a href="#" class="js-toggle-nag ss-navigateup" title="Toggle open or close footer"></a>
        <div class="sample-message">
          <p class="usage-data t-collapsed-text">Enjoy Safari? 
            <a href="https://www.safaribooksonline.com/subscribe/">
              Subscribe Today
              
            </a>
          </p>
          

        <div class="expanded">
          <h2>You have 10 days left in your trial, Aejunknaja. </h2>
          <p class="t-expanded-text">Safari is your trusted guide for building a remarkable career. We hope you've been enjoying your trial—ready to join?</p>
          <a href="https://www.safaribooksonline.com/subscribe/" class="bigbutton positive">
            Subscribe Today
            
          </a>
          
            <footer style="padding-bottom: 69.2px;" class="pagefoot js-pagefoot">
    <div class="wrapper">
      <a href="https://www.safaribooksonline.com/" id="logo">Safari</a>
      <nav>
        <a href="https://www.safaribooksonline.com/public/support" class="full-support">Support</a> /
        <a href="https://www.safaribooksonline.com/contact/">Contact Us</a> /
        <a href="https://www.safaribooksonline.com/blog/">Blog</a>
      </nav>
      <div id="legal">
        <ul>
          <li>© 2016 <a class="copyright" href="https://www.safaribooksonline.com/">Safari</a> <br class="mobile-support"> <a href="https://www.safaribooksonline.com/terms/">Terms of Service</a> </li>
          <li><a href="https://www.safaribooksonline.com/membership-agreement/">Membership Agreement</a></li>
          <li><a href="https://www.safaribooksonline.com/privacy/">Privacy Policy</a></li>
        </ul>
      </div>
    </div>
  </footer>

        </div>
      </div>
    </div>

    
    



        
      </div>
      



  <footer style="padding-bottom: 69.2px;" class="pagefoot t-pagefoot">
    <a style="display: none;" href="#" class="icon-up"><div class="visuallyhidden">Back to top</div></a>
    <ul class="js-footer-nav">
      
        <li><a class="t-recommendations-footer" href="https://www.safaribooksonline.com/r/">Recommended</a></li>
      
      <li><a class="t-queue-footer" href="https://www.safaribooksonline.com/s/">Queue</a></li>
      
        <li><a class="t-recent-footer" href="https://www.safaribooksonline.com/recent/">Recent</a></li>
        <li><a class="t-topics-footer" href="https://www.safaribooksonline.com/topics?q=*&amp;limit=21">Topics</a></li>
      
      
        <li><a class="t-tutorials-footer" href="https://www.safaribooksonline.com/tutorials/">Tutorials</a></li>
      
      <li><a class="t-settings-footer js-settings" href="https://www.safaribooksonline.com/u/">Settings</a></li>
      <li><a href="https://www.safaribooksonline.com/blog/">Blog</a></li>
      <li class="full-support"><a href="https://www.safaribooksonline.com/public/support">Support</a></li>
      <li><a href="https://community.safaribooksonline.com/">Feedback</a></li>
      <li><a href="https://www.safaribooksonline.com/accounts/logout/">Sign Out</a></li>
    </ul>
    <span class="copyright">© 2016 <a href="https://www.safaribooksonline.com/" target="_blank">Safari</a>.</span>
    <br class="mobile-support">
    <a href="https://www.safaribooksonline.com/terms/">Terms of Service</a> /
    <a href="https://www.safaribooksonline.com/privacy/">Privacy Policy</a>
  </footer>

<script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"applicationTime":146,"agent":"js-agent.newrelic.com/nr-768.min.js","applicationID":"3275661","errorBeacon":"bam.nr-data.net","beacon":"bam.nr-data.net","queueTime":0,"transactionName":"YgdaZ0NSW0cEB0RdWltNfkZfUEFdCgofXFBHDVYdR1pQQxZeRl1QQj1aWkU=","licenseKey":"510f1a6865"}</script>


    

    <script src="25.%20Architecture%20and%20Software%20Product%20Lines_files/a_002" charset="utf-8"></script>
    <script src="25.%20Architecture%20and%20Software%20Product%20Lines_files/a" charset="utf-8"></script>
    
      <script src="25.%20Architecture%20and%20Software%20Product%20Lines_files/require.js"></script>
      <script>
        require(["/static/js/pages/_config.1113c6153f5e.js"], function (common) {
          require(["/static/js/nest/_init.1198db94d0a6.js"]);
        });
      </script>
    
    
  
  
  
  <script> // <![CDATA[
    var g = {
      position_cache: {
        
          "chapter": "/api/v1/book/9780132942799/chapter/ch10.html",
          "book_id": "9780132942799",
          "chapter_uri": "ch10.html",
          "position": 0,
          "user_uuid": "10f9e41b-1414-4ac1-bc80-973364aac808",
          "next_chapter_uri": "/library/view/software-architecture-in/9780132942799/ch11.html"
        
      },
      title: "Software Architecture in Practice, Third Edition",
      author_list: "Rick Kazman, Paul Clements, Len Bass",
      format: "book",
      source: "application/epub+zip",
      is_system_book: true,
      is_public: false,
      loaded_from_server: true,
      allow_scripts: false,
      has_mathml: false
    };
    // ]]>
  </script>
  
  


  
  <script>
    
      
        

        
          
            window.PUBLIC_ANNOTATIONS = true;
          
        

      

      
        window.MOBILE_PUBLIC_ANNOTATIONS = false;
      

    

  </script>

  
    
  


    
    


  

<div style="top: 200px; left: 1450px;" class="font-flyout"><div class="font-controls-panel">
	<div class="nightmodes">
		<ul>
			<li class="day"><a href="#" id="day-mode" title="Day Mode">
				<i class="fa fa-sun-o"></i>
				<span>Day Mode</span></a></li>
			<li class="cloudy"><a href="#" id="cloudy-mode" title="Cloudy Mode">
				<i class="fa fa-cloud"></i>
				<span>Cloud Mode</span>
			</a></li>
			<li class="night"><a href="#" id="night-mode" title="Night Mode">
				<i class="fa fa-moon-o"></i>
				<span>Night Mode</span>
			</a></li>
		</ul>
	</div>

	<div class="font-resizer resizer">
		<div class="draggable-containment-wrapper">
			<i class="fa fa-font left"></i>
			<span style="width: 50%;" class="filler"></span>
			<div style="position: relative; left: 80px;" id="js-font-size-draggable" class="draggable ui-widget-content ui-draggable ui-draggable-handle"></div>
			<i class="fa fa-font right"></i>
		</div>
	</div>

	<div class="column-resizer resizer">
		<div class="draggable-containment-wrapper">
			<i class="fa fa-compress left"></i>
			<span style="width: 50%;" class="filler"></span>
			<div style="position: relative; left: 80px;" id="js-column-size-draggable" class="draggable ui-widget-content ui-draggable ui-draggable-handle"></div>
			<i class="fa fa-expand right"></i>
		</div>
	</div>

	<a id="reset" class="button" href="#">Reset</a>
</div>
</div><div class="annotator-notice"></div></body></html>