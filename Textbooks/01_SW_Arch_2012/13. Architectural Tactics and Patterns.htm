<!--[if IE]><![endif]-->
<!DOCTYPE html>
<!--[if IE 8]><html class="no-js ie8 oldie" lang="en" prefix="og: http://ogp.me/ns/# og:book: http://ogp.me/ns/book# og:video: http://ogp.me/ns/video#"

    
        itemscope itemtype="http://schema.org/Book http://schema.org/ItemPage"" data-login-url="/accounts/login/"
data-offline-url="/"
data-url="/library/view/software-architecture-in/9780132942799/ch10.html"
data-csrf-cookie="csrfsafari"
data-highlight-privacy=""


  data-user-id="640574"
  data-user-uuid="10f9e41b-1414-4ac1-bc80-973364aac808"
  data-username="aejunknaja"
  data-account-type="Trial"
  
  data-activated-trial-date="01/12/2016"
  


  data-archive="9780132942799"
  data-publishers="Addison-Wesley Professional"



  data-htmlfile-name="ch10.html"
  data-epub-title="Software Architecture in Practice, Third Edition" data-debug=0 data-testing=0><![endif]-->
<!--[if gt IE 8]><!-->
<html style="" class=" js flexbox flexboxlegacy no-touch no-websqldatabase indexeddb history csscolumns csstransforms localstorage sessionstorage applicationcache svg inlinesvg no-zoom" prefix="og: http://ogp.me/ns/# og:book: http://ogp.me/ns/book# og:video: http://ogp.me/ns/video#" itemscope="" itemtype="http://schema.org/Book http://schema.org/ItemPage" "="" data-login-url="/accounts/login/" data-offline-url="/" data-url="/library/view/software-architecture-in/9780132942799/ch10.html" data-csrf-cookie="csrfsafari" data-highlight-privacy="" data-user-id="640574" data-user-uuid="10f9e41b-1414-4ac1-bc80-973364aac808" data-username="aejunknaja" data-account-type="Trial" data-activated-trial-date="01/12/2016" data-archive="9780132942799" data-publishers="Addison-Wesley Professional" data-htmlfile-name="ch10.html" data-epub-title="Software Architecture in Practice, Third Edition" data-debug="0" data-testing="0" lang="en"><!--<![endif]--><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta charset="utf-8"><meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"><meta name="author" content="Safari Books Online"><meta name="format-detection" content="telephone=no"><meta http-equiv="cleartype" content="on"><meta name="HandheldFriendly" content="True"><meta name="MobileOptimized" content="320"><meta name="apple-itunes-app" content="app-id=881697395, app-argument=safaridetail://9780132942799"><meta name="viewport" content="width=device-width, minimum-scale=1.0, initial-scale=1.0, maximum-scale=1.0"><meta property="twitter:account_id" content="4503599627559754"><script src="13.%20Architectural%20Tactics%20and%20Patterns_files/510f1a6865" type="text/javascript"></script><script src="13.%20Architectural%20Tactics%20and%20Patterns_files/nr-768.js"></script><script src="13.%20Architectural%20Tactics%20and%20Patterns_files/linkid.js" async="" type="text/javascript"></script><script src="13.%20Architectural%20Tactics%20and%20Patterns_files/analytics.js" async=""></script><script type="text/javascript">(window.NREUM||(NREUM={})).loader_config={xpid:"VQQDUVVVGwACU1RUAQA="};window.NREUM||(NREUM={}),__nr_require=function(t,e,n){function r(n){if(!e[n]){var o=e[n]={exports:{}};t[n][0].call(o.exports,function(e){var o=t[n][1][e];return r(o||e)},o,o.exports)}return e[n].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<n.length;o++)r(n[o]);return r}({QJf3ax:[function(t,e){function n(t){function e(e,n,a){t&&t(e,n,a),a||(a={});for(var c=s(e),f=c.length,u=i(a,o,r),d=0;f>d;d++)c[d].apply(u,n);return u}function a(t,e){f[t]=s(t).concat(e)}function s(t){return f[t]||[]}function c(){return n(e)}var f={};return{on:a,emit:e,create:c,listeners:s,_events:f}}function r(){return{}}var o="nr@context",i=t("gos");e.exports=n()},{gos:"7eSDFh"}],ee:[function(t,e){e.exports=t("QJf3ax")},{}],3:[function(t){function e(t){try{i.console&&console.log(t)}catch(e){}}var n,r=t("ee"),o=t(1),i={};try{n=localStorage.getItem("__nr_flags").split(","),console&&"function"==typeof console.log&&(i.console=!0,-1!==n.indexOf("dev")&&(i.dev=!0),-1!==n.indexOf("nr_dev")&&(i.nrDev=!0))}catch(a){}i.nrDev&&r.on("internal-error",function(t){e(t.stack)}),i.dev&&r.on("fn-err",function(t,n,r){e(r.stack)}),i.dev&&(e("NR AGENT IN DEVELOPMENT MODE"),e("flags: "+o(i,function(t){return t}).join(", ")))},{1:24,ee:"QJf3ax"}],4:[function(t){function e(t,e,n,i,s){try{c?c-=1:r("err",[s||new UncaughtException(t,e,n)])}catch(f){try{r("ierr",[f,(new Date).getTime(),!0])}catch(u){}}return"function"==typeof a?a.apply(this,o(arguments)):!1}function UncaughtException(t,e,n){this.message=t||"Uncaught error with no additional information",this.sourceURL=e,this.line=n}function n(t){r("err",[t,(new Date).getTime()])}var r=t("handle"),o=t(6),i=t("ee"),a=window.onerror,s=!1,c=0;t("loader").features.err=!0,t(5),window.onerror=e;try{throw new Error}catch(f){"stack"in f&&(t(1),t(2),"addEventListener"in window&&t(3),window.XMLHttpRequest&&XMLHttpRequest.prototype&&XMLHttpRequest.prototype.addEventListener&&window.XMLHttpRequest&&XMLHttpRequest.prototype&&XMLHttpRequest.prototype.addEventListener&&!/CriOS/.test(navigator.userAgent)&&t(4),s=!0)}i.on("fn-start",function(){s&&(c+=1)}),i.on("fn-err",function(t,e,r){s&&(this.thrown=!0,n(r))}),i.on("fn-end",function(){s&&!this.thrown&&c>0&&(c-=1)}),i.on("internal-error",function(t){r("ierr",[t,(new Date).getTime(),!0])})},{1:11,2:10,3:8,4:12,5:3,6:25,ee:"QJf3ax",handle:"D5DuLP",loader:"G9z0Bl"}],5:[function(t){if(window.addEventListener){var e=t("handle"),n=t("ee");t(1),window.addEventListener("click",function(){e("inc",["ck"])},!1),window.addEventListener("hashchange",function(){e("inc",["hc"])},!1),n.on("pushState-start",function(){e("inc",["ps"])})}},{1:9,ee:"QJf3ax",handle:"D5DuLP"}],6:[function(t){t("loader").features.ins=!0},{loader:"G9z0Bl"}],7:[function(t){function e(){}if(window.performance&&window.performance.timing&&window.performance.getEntriesByType){var n=t("ee"),r=t("handle"),o=t(1),i=t(2);t("loader").features.stn=!0,t(3);var a=Event;n.on("fn-start",function(t){var e=t[0];e instanceof a&&(this.bstStart=Date.now())}),n.on("fn-end",function(t,e){var n=t[0];n instanceof a&&r("bst",[n,e,this.bstStart,Date.now()])}),o.on("fn-start",function(t,e,n){this.bstStart=Date.now(),this.bstType=n}),o.on("fn-end",function(t,e){r("bstTimer",[e,this.bstStart,Date.now(),this.bstType])}),i.on("fn-start",function(){this.bstStart=Date.now()}),i.on("fn-end",function(t,e){r("bstTimer",[e,this.bstStart,Date.now(),"requestAnimationFrame"])}),n.on("pushState-start",function(){this.time=Date.now(),this.startPath=location.pathname+location.hash}),n.on("pushState-end",function(){r("bstHist",[location.pathname+location.hash,this.startPath,this.time])}),"addEventListener"in window.performance&&(window.performance.addEventListener("webkitresourcetimingbufferfull",function(){r("bstResource",[window.performance.getEntriesByType("resource")]),window.performance.webkitClearResourceTimings()},!1),window.performance.addEventListener("resourcetimingbufferfull",function(){r("bstResource",[window.performance.getEntriesByType("resource")]),window.performance.clearResourceTimings()},!1)),document.addEventListener("scroll",e,!1),document.addEventListener("keypress",e,!1),document.addEventListener("click",e,!1)}},{1:11,2:10,3:9,ee:"QJf3ax",handle:"D5DuLP",loader:"G9z0Bl"}],8:[function(t,e){function n(t){i.inPlace(t,["addEventListener","removeEventListener"],"-",r)}function r(t){return t[1]}var o=t("ee").create(),i=t(1)(o),a=t("gos");if(e.exports=o,n(window),"getPrototypeOf"in Object){for(var s=document;s&&!s.hasOwnProperty("addEventListener");)s=Object.getPrototypeOf(s);s&&n(s);for(var c=XMLHttpRequest.prototype;c&&!c.hasOwnProperty("addEventListener");)c=Object.getPrototypeOf(c);c&&n(c)}else XMLHttpRequest.prototype.hasOwnProperty("addEventListener")&&n(XMLHttpRequest.prototype);o.on("addEventListener-start",function(t,e){function n(){return s}if(t[1]){var r=t[1];if("function"==typeof r){var s=a(r,"nr@wrapped",function(){return i(r,"fn-",n,r.name||"anonymous")});this.wrapped=t[1]=s,o.emit("initEventContext",[t,e],this.wrapped)}else"function"==typeof r.handleEvent&&i.inPlace(r,["handleEvent"],"fn-")}}),o.on("removeEventListener-start",function(t){var e=this.wrapped;e&&(t[1]=e)})},{1:26,ee:"QJf3ax",gos:"7eSDFh"}],9:[function(t,e){var n=t("ee").create(),r=t(1)(n);e.exports=n,r.inPlace(window.history,["pushState","replaceState"],"-")},{1:26,ee:"QJf3ax"}],10:[function(t,e){var n=t("ee").create(),r=t(1)(n);e.exports=n,r.inPlace(window,["requestAnimationFrame","mozRequestAnimationFrame","webkitRequestAnimationFrame","msRequestAnimationFrame"],"raf-"),n.on("raf-start",function(t){t[0]=r(t[0],"fn-")})},{1:26,ee:"QJf3ax"}],11:[function(t,e){function n(t,e,n){t[0]=i(t[0],"fn-",null,n)}function r(t,e,n){function r(){return a}this.ctx={};var a={"nr@context":this.ctx};o.emit("initTimerContext",[t,n],a),t[0]=i(t[0],"fn-",r,n)}var o=t("ee").create(),i=t(1)(o);e.exports=o,i.inPlace(window,["setTimeout","setImmediate"],"setTimer-"),i.inPlace(window,["setInterval"],"setInterval-"),i.inPlace(window,["clearTimeout","clearImmediate"],"clearTimeout-"),o.on("setInterval-start",n),o.on("setTimer-start",r)},{1:26,ee:"QJf3ax"}],12:[function(t,e){function n(){f.inPlace(this,p,"fn-",o)}function r(t,e){f.inPlace(e,["onreadystatechange"],"fn-")}function o(t,e){return e}function i(t,e){for(var n in t)e[n]=t[n];return e}var a=t("ee").create(),s=t(1),c=t(2),f=c(a),u=c(s),d=window.XMLHttpRequest,p=["onload","onerror","onabort","onloadstart","onloadend","onprogress","ontimeout"];e.exports=a,window.XMLHttpRequest=function(t){var e=new d(t);try{a.emit("new-xhr",[],e),e.hasOwnProperty("addEventListener")&&u.inPlace(e,["addEventListener","removeEventListener"],"-",o),e.addEventListener("readystatechange",n,!1)}catch(r){try{a.emit("internal-error",[r])}catch(i){}}return e},i(d,XMLHttpRequest),XMLHttpRequest.prototype=d.prototype,f.inPlace(XMLHttpRequest.prototype,["open","send"],"-xhr-",o),a.on("send-xhr-start",r),a.on("open-xhr-start",r)},{1:8,2:26,ee:"QJf3ax"}],13:[function(t){function e(t){var e=this.params,r=this.metrics;if(!this.ended){this.ended=!0;for(var i=0;c>i;i++)t.removeEventListener(s[i],this.listener,!1);if(!e.aborted){if(r.duration=(new Date).getTime()-this.startTime,4===t.readyState){e.status=t.status;var a=t.responseType,f="arraybuffer"===a||"blob"===a||"json"===a?t.response:t.responseText,u=n(f);if(u&&(r.rxSize=u),this.sameOrigin){var d=t.getResponseHeader("X-NewRelic-App-Data");d&&(e.cat=d.split(", ").pop())}}else e.status=0;r.cbTime=this.cbTime,o("xhr",[e,r,this.startTime])}}}function n(t){if("string"==typeof t&&t.length)return t.length;if("object"!=typeof t)return void 0;if("undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer&&t.byteLength)return t.byteLength;if("undefined"!=typeof Blob&&t instanceof Blob&&t.size)return t.size;if("undefined"!=typeof FormData&&t instanceof FormData)return void 0;try{return JSON.stringify(t).length}catch(e){return void 0}}function r(t,e){var n=i(e),r=t.params;r.host=n.hostname+":"+n.port,r.pathname=n.pathname,t.sameOrigin=n.sameOrigin}if(window.XMLHttpRequest&&XMLHttpRequest.prototype&&XMLHttpRequest.prototype.addEventListener&&!/CriOS/.test(navigator.userAgent)){t("loader").features.xhr=!0;var o=t("handle"),i=t(2),a=t("ee"),s=["load","error","abort","timeout"],c=s.length,f=t(1),u=window.XMLHttpRequest;t(4),t(3),a.on("new-xhr",function(){this.totalCbs=0,this.called=0,this.cbTime=0,this.end=e,this.ended=!1,this.xhrGuids={}}),a.on("open-xhr-start",function(t){this.params={method:t[0]},r(this,t[1]),this.metrics={}}),a.on("open-xhr-end",function(t,e){"loader_config"in NREUM&&"xpid"in NREUM.loader_config&&this.sameOrigin&&e.setRequestHeader("X-NewRelic-ID",NREUM.loader_config.xpid)}),a.on("send-xhr-start",function(t,e){var r=this.metrics,o=t[0],i=this;if(r&&o){var f=n(o);f&&(r.txSize=f)}this.startTime=(new Date).getTime(),this.listener=function(t){try{"abort"===t.type&&(i.params.aborted=!0),("load"!==t.type||i.called===i.totalCbs&&(i.onloadCalled||"function"!=typeof e.onload))&&i.end(e)}catch(n){try{a.emit("internal-error",[n])}catch(r){}}};for(var u=0;c>u;u++)e.addEventListener(s[u],this.listener,!1)}),a.on("xhr-cb-time",function(t,e,n){this.cbTime+=t,e?this.onloadCalled=!0:this.called+=1,this.called!==this.totalCbs||!this.onloadCalled&&"function"==typeof n.onload||this.end(n)}),a.on("xhr-load-added",function(t,e){var n=""+f(t)+!!e;this.xhrGuids&&!this.xhrGuids[n]&&(this.xhrGuids[n]=!0,this.totalCbs+=1)}),a.on("xhr-load-removed",function(t,e){var n=""+f(t)+!!e;this.xhrGuids&&this.xhrGuids[n]&&(delete this.xhrGuids[n],this.totalCbs-=1)}),a.on("addEventListener-end",function(t,e){e instanceof u&&"load"===t[0]&&a.emit("xhr-load-added",[t[1],t[2]],e)}),a.on("removeEventListener-end",function(t,e){e instanceof u&&"load"===t[0]&&a.emit("xhr-load-removed",[t[1],t[2]],e)}),a.on("fn-start",function(t,e,n){e instanceof u&&("onload"===n&&(this.onload=!0),("load"===(t[0]&&t[0].type)||this.onload)&&(this.xhrCbStart=(new Date).getTime()))}),a.on("fn-end",function(t,e){this.xhrCbStart&&a.emit("xhr-cb-time",[(new Date).getTime()-this.xhrCbStart,this.onload,e],e)})}},{1:"XL7HBI",2:14,3:12,4:8,ee:"QJf3ax",handle:"D5DuLP",loader:"G9z0Bl"}],14:[function(t,e){e.exports=function(t){var e=document.createElement("a"),n=window.location,r={};e.href=t,r.port=e.port;var o=e.href.split("://");return!r.port&&o[1]&&(r.port=o[1].split("/")[0].split("@").pop().split(":")[1]),r.port&&"0"!==r.port||(r.port="https"===o[0]?"443":"80"),r.hostname=e.hostname||n.hostname,r.pathname=e.pathname,r.protocol=o[0],"/"!==r.pathname.charAt(0)&&(r.pathname="/"+r.pathname),r.sameOrigin=!e.hostname||e.hostname===document.domain&&e.port===n.port&&e.protocol===n.protocol,r}},{}],15:[function(t,e){function n(t){return function(){r(t,[(new Date).getTime()].concat(i(arguments)))}}var r=t("handle"),o=t(1),i=t(2);"undefined"==typeof window.newrelic&&(newrelic=window.NREUM);var a=["setPageViewName","addPageAction","setCustomAttribute","finished","addToTrace","inlineHit","noticeError"];o(a,function(t,e){window.NREUM[e]=n("api-"+e)}),e.exports=window.NREUM},{1:24,2:25,handle:"D5DuLP"}],gos:[function(t,e){e.exports=t("7eSDFh")},{}],"7eSDFh":[function(t,e){function n(t,e,n){if(r.call(t,e))return t[e];var o=n();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(t,e,{value:o,writable:!0,enumerable:!1}),o}catch(i){}return t[e]=o,o}var r=Object.prototype.hasOwnProperty;e.exports=n},{}],D5DuLP:[function(t,e){function n(t,e,n){return r.listeners(t).length?r.emit(t,e,n):void(r.q&&(r.q[t]||(r.q[t]=[]),r.q[t].push(e)))}var r=t("ee").create();e.exports=n,n.ee=r,r.q={}},{ee:"QJf3ax"}],handle:[function(t,e){e.exports=t("D5DuLP")},{}],XL7HBI:[function(t,e){function n(t){var e=typeof t;return!t||"object"!==e&&"function"!==e?-1:t===window?0:i(t,o,function(){return r++})}var r=1,o="nr@id",i=t("gos");e.exports=n},{gos:"7eSDFh"}],id:[function(t,e){e.exports=t("XL7HBI")},{}],G9z0Bl:[function(t,e){function n(){var t=p.info=NREUM.info,e=f.getElementsByTagName("script")[0];if(t&&t.licenseKey&&t.applicationID&&e){s(d,function(e,n){e in t||(t[e]=n)});var n="https"===u.split(":")[0]||t.sslForHttp;p.proto=n?"https://":"http://",a("mark",["onload",i()]);var r=f.createElement("script");r.src=p.proto+t.agent,e.parentNode.insertBefore(r,e)}}function r(){"complete"===f.readyState&&o()}function o(){a("mark",["domContent",i()])}function i(){return(new Date).getTime()}var a=t("handle"),s=t(1),c=window,f=c.document;t(2);var u=(""+location).split("?")[0],d={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-768.min.js"},p=e.exports={offset:i(),origin:u,features:{}};f.addEventListener?(f.addEventListener("DOMContentLoaded",o,!1),c.addEventListener("load",n,!1)):(f.attachEvent("onreadystatechange",r),c.attachEvent("onload",n)),a("mark",["firstbyte",i()])},{1:24,2:15,handle:"D5DuLP"}],loader:[function(t,e){e.exports=t("G9z0Bl")},{}],24:[function(t,e){function n(t,e){var n=[],o="",i=0;for(o in t)r.call(t,o)&&(n[i]=e(o,t[o]),i+=1);return n}var r=Object.prototype.hasOwnProperty;e.exports=n},{}],25:[function(t,e){function n(t,e,n){e||(e=0),"undefined"==typeof n&&(n=t?t.length:0);for(var r=-1,o=n-e||0,i=Array(0>o?0:o);++r<o;)i[r]=t[e+r];return i}e.exports=n},{}],26:[function(t,e){function n(t){return!(t&&"function"==typeof t&&t.apply&&!t[i])}var r=t("ee"),o=t(1),i="nr@original",a=Object.prototype.hasOwnProperty;e.exports=function(t){function e(t,e,r,a){function nrWrapper(){var n,i,s,f;try{i=this,n=o(arguments),s=r&&r(n,i)||{}}catch(d){u([d,"",[n,i,a],s])}c(e+"start",[n,i,a],s);try{return f=t.apply(i,n)}catch(p){throw c(e+"err",[n,i,p],s),p}finally{c(e+"end",[n,i,f],s)}}return n(t)?t:(e||(e=""),nrWrapper[i]=t,f(t,nrWrapper),nrWrapper)}function s(t,r,o,i){o||(o="");var a,s,c,f="-"===o.charAt(0);for(c=0;c<r.length;c++)s=r[c],a=t[s],n(a)||(t[s]=e(a,f?s+o:o,i,s))}function c(e,n,r){try{t.emit(e,n,r)}catch(o){u([o,e,n,r])}}function f(t,e){if(Object.defineProperty&&Object.keys)try{var n=Object.keys(t);return n.forEach(function(n){Object.defineProperty(e,n,{get:function(){return t[n]},set:function(e){return t[n]=e,e}})}),e}catch(r){u([r])}for(var o in t)a.call(t,o)&&(e[o]=t[o]);return e}function u(e){try{t.emit("internal-error",e)}catch(n){}}return t||(t=r),e.inPlace=s,e.flag=i,e}},{1:25,ee:"QJf3ax"}]},{},["G9z0Bl",4,13,7,6,5]);</script><link rel="apple-touch-icon" href="https://www.safaribooksonline.com/static/images/apple-touch-icon.dc4dcf1f75e0.png"><link rel="shortcut icon" href="https://www.safaribooksonline.com/favicon.ico" type="image/x-icon"><link href="13.%20Architectural%20Tactics%20and%20Patterns_files/css.css" rel="stylesheet" type="text/css"><title>13. Architectural Tactics and Patterns - Software Architecture in Practice, Third Edition</title><link rel="stylesheet" href="13.%20Architectural%20Tactics%20and%20Patterns_files/e4f5174e8e7b.css" type="text/css"><link rel="stylesheet" type="text/css" href="13.%20Architectural%20Tactics%20and%20Patterns_files/annotator.css"><link rel="stylesheet" href="13.%20Architectural%20Tactics%20and%20Patterns_files/font-awesome.css"><style type="text/css" title="ibis-book">#sbo-rt-content div{margin-top:4pt;margin-bottom:4pt;margin-right:15pt}#sbo-rt-content h1{margin-top:15pt;margin-bottom:12pt;text-align:center;font-weight:bold}#sbo-rt-content h2{margin-top:7pt;margin-bottom:25pt;text-align:left;font-weight:bold}#sbo-rt-content h3{margin-top:9pt;margin-bottom:8pt;font-weight:bold;text-align:left}#sbo-rt-content h4{margin-top:9pt;margin-bottom:6pt;text-align:left;font-weight:bold}#sbo-rt-content h5{margin-top:9pt;margin-bottom:6pt;font-weight:bold;text-align:left}#sbo-rt-content h6{margin-top:9pt;margin-bottom:6pt;font-weight:bold;text-align:left}#sbo-rt-content .cover{margin-top:2pt;margin-bottom:2pt;text-align:center}#sbo-rt-content .author{margin-top:40pt;font-weight:bold;text-align:center}#sbo-rt-content div.image,#sbo-rt-content img{max-width:99%;max-height:99%}#sbo-rt-content .image{margin-bottom:5pt;text-align:center}#sbo-rt-content .toc-part{margin-top:25pt;margin-bottom:5pt;margin-left:10pt;text-align:left}#sbo-rt-content .toc-chapter{margin-top:10pt;margin-bottom:5pt;margin-left:25pt;text-align:left}#sbo-rt-content .toc-chapter1{margin-top:10pt;margin-bottom:5pt;margin-left:18pt;text-align:left}#sbo-rt-content .toc-section{margin-top:4pt;margin-bottom:4pt;margin-left:55pt;text-align:left}#sbo-rt-content .indexmain{margin-top:2pt;margin-bottom:2pt;text-align:left}#sbo-rt-content .indexmain1{margin-top:18pt;margin-bottom:2pt;text-align:left}#sbo-rt-content .indexsub{margin-top:2pt;margin-bottom:2pt;margin-left:35pt;text-indent:-15pt;text-align:left}#sbo-rt-content .copy{margin-top:8pt;margin-bottom:8pt;text-indent:.024pt}#sbo-rt-content .indent{margin-top:4pt;margin-bottom:5pt;text-indent:18pt;text-align:left}#sbo-rt-content .indenthangingB{margin-top:4pt;margin-bottom:4pt;margin-left:40pt;text-indent:-7pt;text-align:left}#sbo-rt-content .indenthangingBB{margin-top:4pt;margin-bottom:4pt;margin-left:58pt;text-indent:-6.5pt;text-align:left}#sbo-rt-content .indenthangingBBB{margin-top:4pt;margin-bottom:4pt;margin-left:80pt;text-indent:-6pt;text-align:left}#sbo-rt-content .indenthangingBP{margin-top:4pt;margin-bottom:4pt;margin-left:40pt;text-align:left}#sbo-rt-content .indenthangingBP1{margin-top:4pt;margin-bottom:4pt;margin-left:30pt;text-indent:15pt;text-align:left}#sbo-rt-content .tab-caption{font-weight:bold;margin-top:14pt;margin-bottom:8pt;text-align:center;page-break-after:avoid;page-break-inside:avoid}#sbo-rt-content .source{font-size:medium;margin-top:2pt;margin-bottom:2pt;page-break-before:avoid;page-break-inside:avoid;text-align:center}#sbo-rt-content .fig-caption{font-weight:bold;margin-top:4pt;margin-bottom:14pt;text-align:center;page-break-before:avoid;page-break-inside:avoid}#sbo-rt-content .fig-caption2{font-weight:bold;margin-top:4pt;margin-bottom:14pt;text-align:left;page-break-before:avoid;page-break-inside:avoid}#sbo-rt-content .blockquote{margin-top:7pt;margin-bottom:2pt;margin-left:60pt;text-align:left}#sbo-rt-content .attribution{margin-top:2pt;margin-bottom:17pt;margin-right:40pt;text-align:right}#sbo-rt-content .attribution1{margin-top:2pt;margin-bottom:17pt;margin-right:15pt;text-align:right}#sbo-rt-content .attri{margin-left:100pt;margin-right:100pt}#sbo-rt-content .toc-preface{margin-top:5pt;margin-bottom:5pt;margin-left:65pt;text-align:left}#sbo-rt-content .toc-appendix{margin-top:10pt;margin-bottom:5pt;margin-left:55pt;text-align:left}#sbo-rt-content .toc-index{margin-top:10pt;margin-bottom:5pt;margin-left:55pt;text-align:left}#sbo-rt-content .bib{margin-top:10pt;margin-bottom:5pt;margin-left:15pt;text-align:left}#sbo-rt-content .footnote{font-size:small;margin-top:4pt;margin-bottom:4pt;margin-left:20pt;text-indent:-11pt;text-align:left}#sbo-rt-content .pre{font-family:"Courier New";font-size:small;margin-top:5pt;margin-bottom:5pt;margin-left:13pt}#sbo-rt-content .pre1{font-family:"Courier New";font-size:small;margin-top:5pt;margin-bottom:5pt;margin-left:25pt}#sbo-rt-content .codelink{font-size:small;margin-top:6pt;margin-bottom:6pt;font-weight:bold;page-break-after:avoid}#sbo-rt-content .image1{text-align:center;page-break-before:always}#sbo-rt-content div.image1,#sbo-rt-content img{max-width:99%;max-height:99%}#sbo-rt-content code{font-size:small}#sbo-rt-content .edition{font-size:15pt;margin-top:15pt;margin-bottom:15pt;text-align:center;font-weight:bold}#sbo-rt-content .equation{text-align:center}#sbo-rt-content .indenthangingN{margin-top:4pt;margin-bottom:4pt;margin-left:50pt;text-indent:-12pt;text-align:left}#sbo-rt-content .indenthangingNaa{margin-top:4pt;margin-bottom:4pt;margin-left:48pt;text-indent:-11pt;text-align:left}#sbo-rt-content .indenthangingNP1{margin-top:4pt;margin-bottom:4pt;margin-left:30pt;text-align:left}#sbo-rt-content .indenthangingNP{margin-top:4pt;margin-bottom:4pt;margin-left:30pt;text-indent:15pt;text-align:left}#sbo-rt-content .indenthangingN1{margin-top:4pt;margin-bottom:4pt;margin-left:50pt;text-indent:-17.5pt;text-align:left}#sbo-rt-content .indenthangingNB{margin-top:4pt;margin-bottom:4pt;margin-left:75pt;text-indent:-7.5pt;text-align:left}#sbo-rt-content .noindent{margin-top:4pt;margin-bottom:4pt;text-indent:.02pt}#sbo-rt-content .publisher{margin-top:130pt;margin-bottom:2pt;text-align:center}#sbo-rt-content .publishertext{margin-top:6pt;margin-bottom:2pt;text-align:center}#sbo-rt-content .sidebar{font-size:medium;margin-top:6pt;margin-bottom:12pt;margin-left:24pt;margin-right:24pt}#sbo-rt-content .sb-noindent{margin-top:4pt;margin-bottom:4pt;text-indent:.02pt;margin-left:15pt;margin-right:15pt}#sbo-rt-content .sb-indent{margin-top:4pt;margin-bottom:5pt;text-indent:15pt;margin-left:15pt;margin-right:15pt}#sbo-rt-content .title{font-size:110%;margin-top:4pt;margin-bottom:4pt;font-weight:bold;margin-left:7pt;page-break-inside:avoid;page-break-after:avoid}#sbo-rt-content .question{margin-top:4pt;margin-bottom:4pt;margin-left:30pt;text-indent:-12pt;text-align:left}#sbo-rt-content .questiona{margin-top:4pt;margin-bottom:4pt;margin-left:70pt;text-indent:-11.5pt;text-align:left}#sbo-rt-content .questionP{margin-top:4pt;margin-bottom:4pt;margin-left:30pt;text-align:left}#sbo-rt-content .step{margin-top:4pt;margin-bottom:4pt;margin-left:65pt;text-indent:-38pt;text-align:left}#sbo-rt-content .division{font-size:100%;margin-top:4pt;margin-bottom:4pt;font-weight:bold;margin-left:10pt}#sbo-rt-content .question1{margin-top:4pt;margin-bottom:4pt;margin-left:29pt;text-indent:-18pt;text-align:left}#sbo-rt-content .copy1{margin-top:8pt;margin-bottom:8pt;margin-left:24pt;text-align:left;text-indent:.024pt}#sbo-rt-content .copy2{margin-top:8pt;margin-bottom:8pt;font-size:140%;text-align:left;text-indent:.024pt}#sbo-rt-content .copy3{margin-top:8pt;margin-bottom:8pt;font-size:130%;text-align:left;text-indent:.024pt}#sbo-rt-content .imagefir{text-align:center}</style><link rel="canonical" href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch10.html"><meta name="description" content="10. Testability Testing leads to failure, and failure leads to understanding —Burt Rutan Industry estimates indicate that between 30 and 50 percent (or in some cases, even more) of the ... "><meta property="og:title" content="10. Testability"><meta itemprop="isPartOf" content="/library/view/software-architecture-in/9780132942799/"><meta itemprop="name" content="10. Testability"><meta property="og:url" itemprop="url" content="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch10.html"><meta property="og:site_name" content="Safari"><meta property="og:image" itemprop="thumbnailUrl" content="https://www.safaribooksonline.com/library/cover/9780132942799/"><meta property="og:description" itemprop="description" content="10. Testability Testing leads to failure, and failure leads to understanding —Burt Rutan Industry estimates indicate that between 30 and 50 percent (or in some cases, even more) of the ... "><meta itemprop="inLanguage" content="en"><meta itemprop="publisher" content="Addison-Wesley Professional"><meta property="og:type" content="book"><meta property="og:book:isbn" itemprop="isbn" content="9780132942799"><meta property="og:book:author" itemprop="author" content="Rick Kazman"><meta property="og:book:author" itemprop="author" content="Paul Clements"><meta property="og:book:author" itemprop="author" content="Len Bass"><meta property="og:book:tag" itemprop="about" content="Core Programming"><meta name="twitter:card" content="summary"><meta name="twitter:site" content="@safari"><style type="text/css" id="font-styles" data-template="#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-size: &lt;%= font_size %&gt; !important; }"></style><style type="text/css" id="font-family" data-template="#sbo-rt-content, #sbo-rt-content p, #sbo-rt-content div { font-family: &lt;%= font_family %&gt; !important; }"></style><style type="text/css" id="column-width" data-template="#sbo-rt-content { max-width: &lt;%= column_width %&gt;% !important; margin: 0 auto !important; }"></style><!--[if lt IE 9]><script src="/static/js/src/respond.min.fa78ffe6f7ba.js"></script><![endif]--><script type="text/javascript" src="13.%20Architectural%20Tactics%20and%20Patterns_files/ecc99425e988.js" async=""></script><noscript><meta http-equiv="refresh" content="0; url=/library/no-js/" /></noscript><script type="text/javascript">
  (function(i,s,o,g,r,a,m) {
    i['GoogleAnalyticsObject']=r;
    i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();
    a=s.createElement(o),m=s.getElementsByTagName(o)[0];
    a.async=1;
    a.src=g;
    m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  var matches = document.cookie.match(/BrowserCookie\s*=\s*([a-f0-9\-]{36})/),
      user_uuid = null;

  if (matches && matches.length === 2) {
    user_uuid = matches[1];
  }


  ga('create', 'UA-39299553-7', {'userId': '10f9e41b-1414-4ac1-bc80-973364aac808' });


ga('set', 'dimension1', 'Trial');
ga('set', 'dimension6', user_uuid);


  ga('set', 'dimension2', '10f9e41b-1414-4ac1-bc80-973364aac808');
  




  //enable enhanced link tracking
  ga('require', 'linkid', 'linkid.js');

  // reading interface will track pageviews itself
  if (document.location.pathname.indexOf("/library/view") !== 0) {
    ga('send', 'pageview');
  }
</script><script src="13.%20Architectural%20Tactics%20and%20Patterns_files/_config.js" data-requiremodule="/static/js/pages/_config.1113c6153f5e.js" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="13.%20Architectural%20Tactics%20and%20Patterns_files/_init.js" data-requiremodule="/static/js/nest/_init.1198db94d0a6.js" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><style id="annotator-dynamic-style">.annotator-adder, .annotator-outer, .annotator-notice {
  z-index: 100019;
}
.annotator-filter {
  z-index: 100009;
}</style></head>


<body class="reading sidenav  js-show-related scalefonts subscribe-panel library nav-collapsed">

    
      <div class="hide working" role="status">
        <div class="working-image"></div>
      </div>
      <div class="sbo-site-nav">
        



<a href="#container" class="skip">Skip to content</a><header class="topbar t-topbar"><nav role="navigation" class="js-site-nav"><ul class="topnav"><li class="logo t-logo"><a href="https://www.safaribooksonline.com/home/" class="l0 safari js-keyboard-nav-home"><em>Safari</em></a></li><li><a href="https://www.safaribooksonline.com/r/" class="t-recommendations-nav l0 ss-picks None"><span>Recommended</span></a></li><li><a href="https://www.safaribooksonline.com/s/" class="t-queue-nav l0 ss-queue None"><span>Queue</span></a></li><li class="search"><a href="#" class="t-search-nav trigger ss-search l0" data-dropdown-selector=".searchbox"><span>Search</span></a></li><li class="usermenu dropdown"><a href="#" class="trigger l0 ss-navigatedown nav-dropdown"><span>Expand Nav</span></a><div class="drop-content"><ul><li><a href="https://www.safaribooksonline.com/recent/" class="t-recent-nav l1 ss-recent None">Recent</a></li><li><a href="https://www.safaribooksonline.com/topics" class="t-topics-link l1 ss-hexbase None">Topics</a></li><li><a href="https://www.safaribooksonline.com/tutorials/" class="l1 ss-toots t-tutorials-nav js-toggle-menu-item None"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20" version="1.1"><title>icon for tutorials
  </title><desc></desc><g stroke="none" stroke-width="1" fill-rule="evenodd"><path d="M15.8 18.2C15.8 18.2 15.9 18.2 16 18.2 16.1 18.2 16.2 18.2 16.4 18.2 16.5 18.2 16.7 18.1 16.9 18 17 17.9 17.1 17.8 17.2 17.7 17.3 17.6 17.4 17.5 17.4 17.4 17.5 17.2 17.6 16.9 17.6 16.7 17.6 16.6 17.6 16.5 17.6 16.4 17.5 16.2 17.5 16.1 17.4 15.9 17.3 15.8 17.2 15.6 17 15.5 16.8 15.3 16.6 15.3 16.4 15.2 16.2 15.2 16 15.2 15.8 15.2 15.7 15.2 15.5 15.3 15.3 15.4 15.2 15.4 15.1 15.5 15 15.7 14.9 15.8 14.8 15.9 14.7 16 14.7 16.1 14.6 16.3 14.6 16.4 14.6 16.5 14.6 16.6 14.6 16.6 14.6 16.7 14.6 16.9 14.6 17 14.6 17.1 14.7 17.3 14.7 17.4 14.8 17.6 15 17.7 15.1 17.9 15.2 18 15.3 18 15.5 18.1 15.5 18.1 15.6 18.2 15.7 18.2 15.7 18.2 15.7 18.2 15.8 18.2L15.8 18.2ZM9.4 11.5C9.5 11.5 9.5 11.5 9.6 11.5 9.7 11.5 9.9 11.5 10 11.5 10.2 11.5 10.3 11.4 10.5 11.3 10.6 11.2 10.8 11.1 10.9 11 10.9 10.9 11 10.8 11.1 10.7 11.2 10.5 11.2 10.2 11.2 10 11.2 9.9 11.2 9.8 11.2 9.7 11.2 9.5 11.1 9.4 11 9.2 10.9 9.1 10.8 8.9 10.6 8.8 10.5 8.7 10.3 8.6 10 8.5 9.9 8.5 9.7 8.5 9.5 8.5 9.3 8.5 9.1 8.6 9 8.7 8.8 8.7 8.7 8.8 8.6 9 8.5 9.1 8.4 9.2 8.4 9.3 8.2 9.5 8.2 9.8 8.2 10 8.2 10.1 8.2 10.2 8.2 10.3 8.2 10.5 8.3 10.6 8.4 10.7 8.5 10.9 8.6 11.1 8.7 11.2 8.9 11.3 9 11.4 9.1 11.4 9.2 11.4 9.3 11.5 9.3 11.5 9.3 11.5 9.4 11.5 9.4 11.5L9.4 11.5ZM3 4.8C3.1 4.8 3.1 4.8 3.2 4.8 3.4 4.8 3.5 4.8 3.7 4.8 3.8 4.8 4 4.7 4.1 4.6 4.3 4.5 4.4 4.4 4.5 4.3 4.6 4.2 4.6 4.1 4.7 4 4.8 3.8 4.8 3.5 4.8 3.3 4.8 3.1 4.8 3 4.8 2.9 4.7 2.8 4.7 2.6 4.6 2.5 4.5 2.3 4.4 2.2 4.2 2.1 4 1.9 3.8 1.9 3.6 1.8 3.5 1.8 3.3 1.8 3.1 1.8 2.9 1.8 2.7 1.9 2.6 2 2.4 2.1 2.3 2.2 2.2 2.3 2.1 2.4 2 2.5 2 2.6 1.8 2.8 1.8 3 1.8 3.3 1.8 3.4 1.8 3.5 1.8 3.6 1.8 3.8 1.9 3.9 2 4 2.1 4.2 2.2 4.4 2.4 4.5 2.5 4.6 2.6 4.7 2.7 4.7 2.8 4.7 2.9 4.8 2.9 4.8 3 4.8 3 4.8 3 4.8L3 4.8ZM13.1 15.2C13.2 15.1 13.2 15.1 13.2 15.1 13.3 14.9 13.4 14.7 13.6 14.5 13.8 14.2 14.1 14 14.4 13.8 14.7 13.6 15.1 13.5 15.5 13.4 15.9 13.4 16.3 13.4 16.7 13.5 17.2 13.5 17.6 13.7 17.9 13.9 18.2 14.1 18.5 14.4 18.7 14.7 18.9 15 19.1 15.3 19.2 15.6 19.3 15.9 19.4 16.1 19.4 16.4 19.4 17 19.3 17.5 19.1 18.1 19 18.3 18.9 18.5 18.7 18.7 18.5 19 18.3 19.2 18 19.4 17.7 19.6 17.3 19.8 16.9 19.9 16.6 20 16.3 20 16 20 15.8 20 15.6 20 15.4 19.9 15.4 19.9 15.4 19.9 15.4 19.9 15.2 19.9 15 19.8 14.9 19.8 14.8 19.7 14.7 19.7 14.6 19.7 14.4 19.6 14.3 19.5 14.1 19.3 13.7 19.1 13.4 18.7 13.2 18.4 13.1 18.1 12.9 17.8 12.9 17.5 12.8 17.3 12.8 17.1 12.8 16.9L3.5 14.9C3.3 14.9 3.1 14.8 3 14.8 2.7 14.7 2.4 14.5 2.1 14.3 1.7 14 1.4 13.7 1.2 13.3 1 13 0.9 12.6 0.8 12.3 0.7 12 0.7 11.7 0.7 11.4 0.7 11 0.8 10.5 1 10.1 1.1 9.8 1.3 9.5 1.6 9.2 1.8 8.9 2.1 8.7 2.4 8.5 2.8 8.3 3.2 8.1 3.6 8.1 3.9 8 4.2 8 4.5 8 4.6 8 4.8 8 4.9 8.1L6.8 8.5C6.8 8.4 6.8 8.4 6.8 8.4 6.9 8.2 7.1 8 7.2 7.8 7.5 7.5 7.7 7.3 8 7.1 8.4 6.9 8.7 6.8 9.1 6.7 9.5 6.7 10 6.7 10.4 6.8 10.8 6.8 11.2 7 11.5 7.2 11.8 7.5 12.1 7.7 12.4 8 12.6 8.3 12.7 8.6 12.8 8.9 12.9 9.2 13 9.4 13 9.7 13 9.7 13 9.8 13 9.8 13.6 9.9 14.2 10.1 14.9 10.2 15 10.2 15 10.2 15.1 10.2 15.3 10.2 15.4 10.2 15.6 10.2 15.8 10.1 16 10 16.2 9.9 16.4 9.8 16.5 9.6 16.6 9.5 16.8 9.2 16.9 8.8 16.9 8.5 16.9 8.3 16.9 8.2 16.8 8 16.8 7.8 16.7 7.7 16.6 7.5 16.5 7.3 16.3 7.2 16.2 7.1 16 7 15.9 6.9 15.8 6.9 15.7 6.9 15.6 6.8 15.5 6.8L6.2 4.8C6.2 5 6 5.2 5.9 5.3 5.7 5.6 5.5 5.8 5.3 6 4.9 6.2 4.5 6.4 4.1 6.5 3.8 6.6 3.5 6.6 3.2 6.6 3 6.6 2.8 6.6 2.7 6.6 2.6 6.6 2.6 6.5 2.6 6.5 2.5 6.5 2.3 6.5 2.1 6.4 1.8 6.3 1.6 6.1 1.3 6 1 5.7 0.7 5.4 0.5 5 0.3 4.7 0.2 4.4 0.1 4.1 0 3.8 0 3.6 0 3.3 0 2.8 0.1 2.2 0.4 1.7 0.5 1.5 0.7 1.3 0.8 1.1 1.1 0.8 1.3 0.6 1.6 0.5 2 0.3 2.3 0.1 2.7 0.1 3.1 0 3.6 0 4 0.1 4.4 0.2 4.8 0.3 5.1 0.5 5.5 0.8 5.7 1 6 1.3 6.2 1.6 6.3 1.9 6.4 2.3 6.5 2.5 6.6 2.7 6.6 3 6.6 3 6.6 3.1 6.6 3.1 9.7 3.8 12.8 4.4 15.9 5.1 16.1 5.1 16.2 5.2 16.4 5.2 16.7 5.3 16.9 5.5 17.2 5.6 17.5 5.9 17.8 6.2 18.1 6.5 18.3 6.8 18.4 7.2 18.6 7.5 18.6 7.9 18.7 8.2 18.7 8.6 18.7 9 18.6 9.4 18.4 9.8 18.3 10.1 18.2 10.3 18 10.6 17.8 10.9 17.5 11.1 17.3 11.3 16.9 11.6 16.5 11.8 16 11.9 15.7 12 15.3 12 15 12 14.8 12 14.7 12 14.5 11.9 13.9 11.8 13.3 11.7 12.6 11.5 12.5 11.7 12.4 11.9 12.3 12 12.1 12.3 11.9 12.5 11.7 12.7 11.3 12.9 10.9 13.1 10.5 13.2 10.2 13.3 9.9 13.3 9.6 13.3 9.4 13.3 9.2 13.3 9 13.2 9 13.2 9 13.2 9 13.2 8.8 13.2 8.7 13.2 8.5 13.1 8.2 13 8 12.8 7.7 12.6 7.4 12.4 7.1 12 6.8 11.7 6.7 11.4 6.6 11.1 6.5 10.8 6.4 10.6 6.4 10.4 6.4 10.2 5.8 10.1 5.2 9.9 4.5 9.8 4.4 9.8 4.4 9.8 4.3 9.8 4.1 9.8 4 9.8 3.8 9.8 3.6 9.9 3.4 10 3.2 10.1 3 10.2 2.9 10.4 2.8 10.5 2.6 10.8 2.5 11.1 2.5 11.5 2.5 11.6 2.5 11.8 2.6 12 2.6 12.1 2.7 12.3 2.8 12.5 2.9 12.6 3.1 12.8 3.2 12.9 3.3 13 3.5 13.1 3.6 13.1 3.7 13.1 3.8 13.2 3.9 13.2L13.1 15.2 13.1 15.2Z" fill="currentColor"></path></g></svg><em>Tutorials</em></a></li><li class="nav-highlights"><a href="https://www.safaribooksonline.com/u/001o000000ijSMHAA2/" class="t-highlights-nav l1 ss-highlights None">Highlights</a></li><li><a href="https://www.safaribooksonline.com/u/" class="t-settings-nav l1 js-settings ss-settings None">Settings</a></li><li><a href="https://community.safaribooksonline.com/" class="l1 no-icon">Feedback</a></li><li><a href="https://www.safaribooksonline.com/accounts/logout/" class="l1 no-icon">Sign Out</a></li></ul><ul class="profile"><li><a href="https://www.safaribooksonline.com/u/" class="l2 None">Settings</a><span class="l2 t-nag-notification" id="nav-nag"><strong class="trial-green">10</strong> days left in your trial.
  
  

  
    
      

<a class="" href="https://www.safaribooksonline.com/subscribe/">Subscribe</a>.


    
  

  

</span></li><li><a href="https://community.safaribooksonline.com/" class="l2">Feedback</a></li><li><a href="https://www.safaribooksonline.com/accounts/logout/" class="l2">Sign Out</a></li></ul></div></li></ul></nav></header>


      </div>
      <div style="height: auto;" id="container" class="application">
        
          <div class="nav-container clearfix">
            


            
            
          </div>

          

  <div class="js-toc">
    
      <div class="sbo-reading-menu sbo-menu-top"><section class="sbo-toc-container toc-menu"><a href="#" class="sbo-toc-thumb"><span class="sbo-title ss-list"><h1><div class="visuallyhidden">Table of Contents for </div>
      
      Software Architecture in Practice, Third Edition
      
    </h1></span></a><div class="toc-contents"></div></section></div>

    

    <div class="interface-controls interface-controls-top">
      <ul class="interface-control-btns js-bitlist js-reader">
        <li class="js-search-in-archive search-in-archive t-search-in-archive"><a href="#" title="Search in archive" class="js-search-controls search-controls"><span class="icon">Search in book...</span></a><form class="search-archive-bar js-search-form"><input name="q" placeholder="Search inside this book..." autocomplete="off" type="search"></form><div class="js-search-results search-archive-results"></div></li><li class="queue-control"><button title="Add to Queue" aria-label="Add to Queue" data-for-analytics="9780132942799:ch13.html" type="button" class="rec-fav ss-queue js-queue js-current-chapter-queue" data-queue-endpoint="/api/v1/book/9780132942799/chapter/ch13.html"><span>Add to Queue</span></button></li><li class="js-font-control-panel font-control-activator"><a href="#" data-push-state="false" id="font-controls" title="Change font size" aria-label="Change font size"><span class="icon">Toggle Font Controls</span></a></li><li class="dropdown sharing-controls"><a href="#" class="trigger" data-push-state="false" title="Share" aria-label="Share"><i class="fa fa-share"></i></a><ul class="social-sharing dropdown-menu"><li><a class="twitter share-button t-twitter" target="_blank" aria-label="Share this section on Twitter" title="Share this section on Twitter" href="https://twitter.com/share?url=https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch10.html&amp;text=Software%20Architecture%20in%20Practice%2C%20Third%20Edition&amp;via=safari"><span>Twitter</span></a></li><li><a class="facebook share-button t-facebook" target="_blank" aria-label="Share this section on Facebook" title="Share this section on Facebook" href="https://www.facebook.com/sharer/sharer.php?u=https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch10.html"><span>Facebook</span></a></li><li><a class="googleplus share-button t-googleplus" target="_blank" aria-label="Share this secton on Google Plus" title="Share this secton on Google Plus" href="https://plus.google.com/share?url=https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch10.html"><span>Google Plus</span></a></li><li><a class="email share-button t-email" aria-label="Share this section via email" title="Share this section via email" href="mailto:?subject=Safari:%2010.%20Testability&amp;body=https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch10.html%0D%0Afrom%20Software%20Architecture%20in%20Practice%2C%20Third%20Edition%0D%0A"><span>Email</span></a></li></ul></li>
      </ul>
    </div>

    <section role="document">
	  <div class="t-sbo-prev sbo-prev sbo-nav-top">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch12.html" class="prev nav-link">
      
          <span aria-hidden="true" class="pagination-label t-prev-label">Prev</span>
          <span class="visuallyhidden">Previous Chapter</span>
          <div class="pagination-title t-prev-title">12. Other Quality Attributes</div>
        </a>
    
  
  </div>

  <div class="t-sbo-next sbo-next sbo-nav-top">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch14.html" class="next nav-link">
      
          <span aria-hidden="true" class="pagination-label t-next-label">Next</span>
          <span class="visuallyhidden">Next Chapter</span>
          <div class="pagination-title t-next-title">14. Quality Attribute Modeling and Analysis</div>
        </a>
    
  
  </div>



<div id="sbo-rt-content"><div class="annotator-wrapper"><h2 id="ch13"><a id="page_203"></a>13. Architectural Tactics and Patterns</h2>
<div class="attri">
<p class="blockquote"><em>I have not failed. I’ve just found 10,000 ways that won’t work.</em></p>
<p class="attribution">—Thomas Edison</p>
</div>
<p class="noindent">There are many ways to do design badly, and just a 
few ways to do it well. Because success in architectural design is 
complex and challenging, designers have been looking for ways to capture
 and reuse hard-won architectural knowledge. Architectural patterns and 
tactics are ways of capturing proven good design structures, so that 
they can be reused.</p>
<p class="indent">Architectural patterns have seen increased interest 
and attention, from both software practitioners and theorists, over the 
past 15 years or more. An architectural pattern</p>
<p class="indenthangingB">• is a package of design decisions that is found repeatedly in practice,</p>
<p class="indenthangingB">• has known properties that permit reuse, and</p>
<p class="indenthangingB">• describes a <em>class</em> of architectures.</p>
<p class="indent">Because patterns are (by definition) found in 
practice, one does not invent them; one discovers them. Cataloging 
patterns is akin to the job of a Linnaean botanist or zoologist: 
“discovering” patterns and describing their shared characteristics. And 
like the botanist, zoologist, or ecologist, the pattern cataloger 
strives to understand how the characteristics lead to different 
behaviors and different responses to environmental conditions. For this 
reason there will never be a complete list of patterns: patterns 
spontaneously emerge in reaction to environmental conditions, and as 
long as those conditions change, new patterns will emerge.</p>
<p class="indent">Architectural design seldom starts from first 
principles. Experienced architects typically think of creating an 
architecture as a process of selecting, tailoring, and combining 
patterns. The software architect must decide how to instantiate a 
pattern—how to make it fit with the specific context and the constraints
 of the problem.</p>
<p class="indent"><a id="page_204"></a>In <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch05.html#ch05">Chapters 5</a>–<a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch11.html#ch11">11</a>
 we have seen a variety of architectural tactics. These are simpler than
 patterns. Tactics typically use just a single structure or 
computational mechanism, and they are meant to address a single 
architectural force. For this reason they give more precise control to 
an architect when making design decisions than patterns, which typically
 combine multiple design decisions into a package. Tactics are the 
“building blocks” of design, from which architectural patterns are 
created. Tactics are atoms and patterns are molecules. Most patterns 
consist of (are constructed from) several different tactics. For this 
reason we say that patterns package tactics.</p>
<p class="indent">In this chapter we will take a very brief tour through
 the patterns universe, touching on some of the most important and most 
commonly used patterns for architecture, and we will then look at the 
relationships between patterns and tactics: showing how a pattern is 
constructed from tactics, and showing how tactics can be used to tailor 
patterns when the pattern that you find in a book or on a website 
doesn’t quite address your design needs.</p>
<h3 id="ch13lev1sec1">13.1. Architectural Patterns</h3>
<p class="noindent">An architectural pattern establishes a relationship between:</p>
<p class="indenthangingB">• <em>A context</em>. A recurring, common situation in the world that gives rise to a problem.</p>
<p class="indenthangingB">• <em>A problem.</em> The problem, 
appropriately generalized, that arises in the given context. The pattern
 description outlines the problem and its variants, and describes any 
complementary or opposing forces. The description of the problem often 
includes quality attributes that must be met.</p>
<p class="indenthangingB">• <em>A solution.</em> A successful 
architectural resolution to the problem, appropriately abstracted. The 
solution describes the architectural structures that solve the problem, 
including how to balance the many forces at work. The solution will 
describe the responsibilities of and static relationships among elements
 (using a module structure), or it will describe the runtime behavior of
 and interaction between elements (laying out a component-and-connector 
or allocation structure). The solution for a pattern is determined and 
described by:</p>
<p class="indenthangingBB">• A set of element types (for example, data repositories, processes, and objects)</p>
<p class="indenthangingBB">• A set of interaction mechanisms or connectors (for example, method calls, events, or message bus)</p>
<p class="indenthangingBB">• A topological layout of the components</p>
<p class="indenthangingBB">• A set of semantic constraints covering topology, element behavior, and interaction mechanisms</p>
<p class="indent"><a id="page_205"></a>The solution description should 
also make clear what quality attributes are provided by the static and 
runtime configurations of elements.</p>
<p class="indent">This {<em>context</em>, <em>problem</em>, <em>solution</em>} form constitutes a template for documenting a pattern.</p>
<p class="indent">Complex systems exhibit multiple patterns at once. A 
web-based system might employ a three-tier client-server architectural 
pattern, but within this pattern it might also use replication 
(mirroring), proxies, caches, firewalls, MVC, and so forth, each of 
which may employ more patterns and tactics. And all of these parts of 
the client-server pattern likely employ layering to internally structure
 their software modules.</p>
<h3 id="ch13lev1sec2">13.2. Overview of the Patterns Catalog</h3>
<p class="noindent">In this section we list an assortment of useful and 
widely used patterns. This catalog is not meant to be exhaustive—in fact
 no such catalog is possible. Rather it is meant to be representative. 
We show patterns of runtime elements (such as broker or client-server) 
and of design-time elements (such as layers). For each pattern we list 
the <em>context</em>, <em>problem</em>, and <em>solution</em>. As part of the solution, we briefly describe the <em>elements</em>, <em>relations</em>, and <em>constraints</em> of each pattern.</p>
<p class="indent">Applying a pattern is not an all-or-nothing 
proposition. Pattern definitions given in catalogs are strict, but in 
practice architects may choose to violate them in small ways when there 
is a good design tradeoff to be had (sacrificing a little of whatever 
the violation cost, but gaining something that the deviation gained). 
For example, the layered pattern expressly forbids software in lower 
layers from using software in upper layers, but there may be cases (such
 as to gain some performance) when an architecture might allow a few 
specific exceptions.</p>
<p class="indent">Patterns can be categorized by the dominant type of 
elements that they show: module patterns show modules, 
component-and-connector (C&amp;C) patterns show components and 
connectors, and allocation patterns show a combination of software 
elements (modules, components, connectors) and nonsoftware elements. 
Most published patterns are C&amp;C patterns, but there are module 
patterns and allocation patterns as well. We’ll begin with the 
granddaddy of module patterns, the layered pattern.</p>
<h4 id="ch13lev2sec1">Module Patterns</h4>
<h5 id="ch13lev3sec1">Layered Pattern</h5>
<p class="noindent"><strong>Context:</strong> All complex systems 
experience the need to develop and evolve portions of the system 
independently. For this reason the developers of the system need a clear
 and well-documented separation of concerns, so that modules of the 
system may be independently developed and maintained.</p>
<p class="noindent"><a id="page_206"></a><strong>Problem:</strong> The 
software needs to be segmented in such a way that the modules can be 
developed and evolved separately with little interaction among the 
parts, supporting portability, modifiability, and reuse.</p>
<p class="noindent"><strong>Solution:</strong> To achieve this 
separation of concerns, the layered pattern divides the software into 
units called layers. Each layer is a grouping of modules that offers a 
cohesive set of services. There are constraints on the <em>allowed-to-use</em>
 relationship among the layers: the relations must be unidirectional. 
Layers completely partition a set of software, and each partition is 
exposed through a public interface. The layers are created to interact 
according to a strict ordering relation. If (A,B) is in this relation, 
we say that the implementation of layer A is allowed to use any of the 
public facilities provided by layer B. In some cases, modules in one 
layer might be required to directly use modules in a nonadjacent lower 
layer; normally only next-lower-layer uses are allowed. This case of 
software in a higher layer using modules in a nonadjacent lower layer is
 called <em>layer bridging</em>. If many instances of layer bridging 
occur, the system may not meet its portability and modifiability goals 
that strict layering helps to achieve. Upward usages are not allowed in 
this pattern.</p>
<p class="indent">Of course, none of this comes for free. Someone must 
design and build the layers, which can often add up-front cost and 
complexity to a system. Also, if the layering is not designed correctly,
 it may actually get in the way, by not providing the lower-level 
abstractions that programmers at the higher levels need. And layering 
always adds a performance penalty to a system. If a call is made to a 
function in the top-most layer, this may have to traverse many lower 
layers before being executed by the hardware. Each of these layers adds 
some overhead of their own, at minimum in the form of context switching.</p>
<p class="indent"><a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13tab01">Table 13.1</a> summarizes the solution of the layered pattern.</p>
<p class="tab-caption"><a id="ch13tab01"></a>Table 13.1. Layered Pattern Solution</p>
<div class="image"><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/13tab01.jpg" src="13.%20Architectural%20Tactics%20and%20Patterns_files/13tab01.jpg" alt="Image" height="402" width="630"></div>
<p class="indent">Layers are almost always drawn as a stack of boxes. The <em>allowed-to-use</em> relation is denoted by geometric adjacency and is read from the top down, as in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13fig01">Figure 13.1</a>.</p>
<div class="image"><a id="ch13fig01"></a><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/13fig01.jpg" src="13.%20Architectural%20Tactics%20and%20Patterns_files/13fig01.jpg" alt="Image" height="169" width="548"></div>
<p class="fig-caption">Figure 13.1. Stack-of-boxes notation for layered designs</p>
<div class="sidebar"><a id="page_207"></a><hr>
<p class="title"><a id="ch13sb01"></a>Some Finer Points of Layers</p>
<p class="sb-noindent">A layered architecture is one of the few places 
where connections among components can be shown by adjacency, and where 
“above” and “below” matter. If you turn <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13fig01">Figure 13.1</a>
 upside-down so that C is on top, this would represent a completely 
different design. Diagrams that use arrows among the boxes to denote 
relations retain their semantic meaning no matter the orientation.</p>
<p class="sb-indent">The layered pattern is one of the most commonly 
used patterns in all of software engineering, but I’m often surprised by
 how many people still get it wrong.</p>
<p class="sb-indent">First, it is impossible to look at a stack of boxes
 and tell whether layer bridging is allowed or not. That is, can a layer
 use any lower layer, or just the next lower one? It is the easiest 
thing in the world to resolve this; all the architect has to do is 
include the answer in the key to the diagram’s notation (something we 
recommend for all diagrams). For example, consider the layered pattern 
presented in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13fig02">Figure 13.2</a> on the next page.</p>
<div class="image"><a id="ch13fig02"></a><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/13fig02.jpg" src="13.%20Architectural%20Tactics%20and%20Patterns_files/13fig02.jpg" alt="Image" height="393" width="708"></div>
<p class="fig-caption">Figure 13.2. A simple layer diagram, with a simple key answering the uses question</p>
<p class="sb-indent">But I’m still surprised at how few architects actually bother to do this. And if they don’t, their layer diagrams are ambiguous.</p>
<p class="sb-indent">Second, any old set of boxes stacked on top of each
 other does not constitute a layered architecture. For instance, look at
 the design shown in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13fig03">Figure 13.3</a>, which uses arrows instead of adjacency to indicate the <a id="page_208"></a>relationships among the boxes. Here, everything is allowed to use everything. This is decidedly <em>not</em>
 a layered architecture. The reason is that if Layer A is replaced by a 
different version, Layer C (which uses it in this figure) might well 
have to change. We don’t want our virtual machine layer to change every 
time our application layer changes. But I’m still surprised at how many 
people call a stack of boxes lined up with each other “layers” (or think
 that layers are the same as tiers in a multi-tier architecture).</p>
<div class="image"><a id="ch13fig03"></a><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/13fig03.jpg" src="13.%20Architectural%20Tactics%20and%20Patterns_files/13fig03.jpg" alt="Image" height="227" width="630"></div>
<p class="fig-caption">Figure 13.3. A wolf in layer’s clothing</p>
<p class="sb-indent"><a id="page_209"></a>Third, many architectures that purport to be layered look something like <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13fig04">Figure 13.4</a>. This diagram <em>probably</em>
 means that modules in A, B, or C can use modules in D, but without a 
key to tell us for sure, it could mean anything. “Sidecars” like this 
often contain common utilities (sometimes imported), such as error 
handlers, communication protocols, or database access mechanisms. This 
kind of diagram makes sense only in the case where no layer bridging is 
allowed in the main stack. Otherwise, D could simply be made the 
bottom-most layer in the main stack, and the “sidecar” geometry would be
 unnecessary. But I’m still surprised at how often I see this layout go 
unexplained.</p>
<div class="image"><a id="ch13fig04"></a><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/13fig04.jpg" src="13.%20Architectural%20Tactics%20and%20Patterns_files/13fig04.jpg" alt="Image" height="223" width="434"></div>
<p class="fig-caption">Figure 13.4. Layers with a “sidecar”</p>
<p class="sb-indent">Sometimes layers are divided into segments denoting
 a finer-grained decomposition of the modules. Sometimes this occurs 
when a preexisting set of units, such as imported modules, share the 
same <em>allowed-to-use</em> relation. When this happens, you have to 
specify what usage rules are in effect among the segments. Many usage 
rules are possible, but they must be made explicit. In <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13fig05">Figure 13.5</a>,
 the top and the bottom layers are segmented. Segments of the top layer 
are not allowed to use each other, but segments of the bottom layer are.
 If you draw the same diagram without the arrows, it will be harder to 
differentiate the different usage rules within segmented layers. Layered
 diagrams are often a source of hidden ambiguity because the diagram 
does not make explicit the <em>allowed-to-use</em> relations.</p>
<div class="image"><a id="ch13fig05"></a><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/13fig05.jpg" src="13.%20Architectural%20Tactics%20and%20Patterns_files/13fig05.jpg" alt="Image" height="242" width="502"></div>
<p class="fig-caption">Figure 13.5. Layered design with segmented layers</p>
<p class="sb-indent"><a id="page_210"></a>Finally, the most important point about layering is that a layer isn’t allowed to <em>use</em>
 any layer above it. A module “uses” another module when it depends on 
the answer it gets back. But a layer is allowed to make upward calls, as
 long as it isn’t expecting an answer from them. This is how the common 
error-handling scheme of callbacks works. A program in layer A calls a 
program in a lower layer B, and the parameters include a pointer to an 
error-handling program in A that the lower layer should call in case of 
error. The software in B makes the call to the program in A, but cares 
not in the least what it does. By not depending in any way on the 
contents of A, B is insulated from changes in A.</p>
<p class="attribution">—<em>PCC</em></p>
<hr></div>
<h4 id="ch13lev2sec2">Other Module Patterns</h4>
<p class="noindent">Designers in a particular domain often publish 
“standard” module decompositions for systems in that domain. These 
standard decompositions, if put in the “context, problem, solution” 
form, constitute module decomposition patterns.</p>
<p class="indent">Similarly in the object-oriented realm, “standard” or 
published class/object design solutions for a class of system constitute
 object-oriented patterns.</p>
<h4 id="ch13lev2sec3">Component-and-Connector Patterns</h4>
<h5 id="ch13lev3sec2">Broker Pattern</h5>
<p class="noindent"><strong>Context:</strong> Many systems are 
constructed from a collection of services distributed across multiple 
servers. Implementing these systems is complex because you need to worry
 about how the systems will interoperate—how they will connect to each 
other and how they will exchange information—as well as the availability
 of the component services.</p>
<p class="noindent"><strong>Problem:</strong> How do we structure 
distributed software so that service users do not need to know the 
nature and location of service providers, making it easy to dynamically 
change the bindings between users and providers?</p>
<p class="noindent"><strong>Solution:</strong> The broker pattern 
separates users of services (clients) from providers of services 
(servers) by inserting an intermediary, called a broker. When a client 
needs a service, it queries a broker via a service interface. The broker
 then forwards the client’s service request to a server, which processes
 the request. The service result is communicated from the server back to
 the broker, which then returns <a id="page_211"></a>the result (and any
 exceptions) back to the requesting client. In this way the client 
remains completely ignorant of the identity, location, and 
characteristics of the server. Because of this separation, if a server 
becomes unavailable, a replacement can be dynamically chosen by the 
broker. If a server is replaced with a different (compatible) service, 
again, the broker is the only component that needs to know of this 
change, and so the client is unaffected. Proxies are commonly introduced
 as intermediaries in addition to the broker to help with details of the
 interaction with the broker, such as marshaling and unmarshaling 
messages.</p>
<p class="indent">The down sides of brokers are that they add complexity
 (brokers and possibly proxies must be designed and implemented, along 
with messaging protocols) and add a level of indirection between a 
client and a server, which will add latency to their communication. 
Debugging brokers can be difficult because they are involved in highly 
dynamic environments where the conditions leading to a failure may be 
difficult to replicate. The broker would be an obvious point of attack, 
from a security perspective, and so it needs to be hardened 
appropriately. Also a broker, if it is not designed carefully, can be a 
single point of failure for a large and complex system. And brokers can 
potentially be bottlenecks for communication.</p>
<p class="indent"><a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13tab02">Table 13.2</a> summarizes the solution of the broker pattern.</p>
<p class="tab-caption"><a id="ch13tab02"></a>Table 13.2. Broker Pattern Solution</p>
<div class="image"><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/13tab02.jpg" src="13.%20Architectural%20Tactics%20and%20Patterns_files/13tab02.jpg" alt="Image" height="492" width="630"></div>
<p class="indent"><a id="page_212"></a>The broker is, of course, the 
critical component in this pattern. The pattern provides all of the 
modifiability benefits of the use-an-intermediary tactic (described in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch07.html#ch07">Chapter 7</a>),
 an availability benefit (because the broker pattern makes it easy to 
replace a failed server with another), and a performance benefit 
(because the broker pattern makes it easy to assign work to the 
least-busy server). However, the pattern also carries with it some 
liabilities. For example, the use of a broker precludes performance 
optimizations that you might make if you knew the precise location and 
characteristics of the server. Also the use of this pattern adds the 
overhead of the intermediary and thus latency.</p>
<p class="indent">The original version of the broker pattern, as documented by Gamma, Helm, Johnson, and Vlissides <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_073">[Gamma 94]</a>, is given in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13fig06">Figure 13.6</a>.</p>
<div class="image"><a id="ch13fig06"></a><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/13fig06.jpg" src="13.%20Architectural%20Tactics%20and%20Patterns_files/13fig06.jpg" alt="Image" height="455" width="721"></div>
<p class="fig-caption">Figure 13.6. The broker pattern</p>
<p class="indent">The first widely used implementation of the broker 
pattern was in the Common Object Request Broker Architecture (CORBA). 
Other common uses of this pattern are found in Enterprise Java Beans 
(EJB) and Microsoft’s .NET platform—essentially any modern platform for 
distributed service providers and consumers implements some form of a 
broker. The service-oriented architecture (SOA) approach depends 
crucially on brokers, most commonly in the form of an enterprise service
 bus.</p>
<h5 id="ch13lev3sec3">Model-View-Controller Pattern</h5>
<p class="noindent"><strong>Context:</strong> User interface software is
 typically the most frequently modified portion of an interactive 
application. For this reason it is important to keep modifications to 
the user interface software separate from the rest of the system. Users 
often wish to look at data from different perspectives, such as a bar 
graph or a pie chart. These representations should both reflect the 
current state of the data.</p>
<p class="noindent"><a id="page_213"></a><strong>Problem:</strong> How 
can user interface functionality be kept separate from application 
functionality and yet still be responsive to user input, or to changes 
in the underlying application’s data? And how can multiple views of the 
user interface be created, maintained, and coordinated when the 
underlying application data changes?</p>
<p class="noindent"><strong>Solution:</strong> The model-view-controller (MVC) pattern separates application functionality into three kinds of components:</p>
<p class="indenthangingB">• A <em>model</em>, which contains the application’s data</p>
<p class="indenthangingB">• A <em>view</em>, which displays some portion of the underlying data and interacts with the user</p>
<p class="indenthangingB">• A <em>controller</em>, which mediates between the <em>model</em> and the <em>view</em> and manages the notifications of state changes</p>
<p class="indent">MVC is not appropriate for every situation. The design
 and implementation of three distinct kinds of components, along with 
their various forms of interaction, may be costly, and this cost may not
 make sense for relatively simple user interfaces. Also, the match 
between the abstractions of MVC and commercial user interface toolkits 
is not perfect. The view and the controller split apart input and 
output, but these functions are often combined into individual widgets. 
This may result in a conceptual mismatch between the architecture and 
the user interface toolkit.</p>
<p class="indent"><a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13tab03">Table 13.3</a> summarizes the solution of the MVC pattern.</p>
<p class="tab-caption"><a id="ch13tab03"></a>Table 13.3. Model-View-Controller Pattern Solution</p>
<div class="image"><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/13tab03.jpg" src="13.%20Architectural%20Tactics%20and%20Patterns_files/13tab03.jpg" alt="Image" height="389" width="630"></div>
<p class="indent"><a id="page_214"></a>There may, in fact, be many views
 and many controllers associated with a model. For example, a set of 
business data may be represented as columns of numbers in a spreadsheet,
 as a scatter plot, or as a pie chart. Each of these is a separate view,
 and this view can be dynamically updated as the model changes (for 
example, showing live transactions in a transaction processing system). A
 model may be updated by different controllers; for example, a map could
 be zoomed and panned via mouse movements, trackball movements, keyboard
 clicks, or voice commands; each of these different forms of input needs
 to be managed by a controller.</p>
<p class="indent">The MVC components are connected to each other via 
some flavor of notification, such as events or callbacks. These 
notifications contain state updates. A change in the model needs to be 
communicated to the views so that they may be updated. An external 
event, such as a user input, needs to be communicated to the controller,
 which may in turn update the view and/or the model. Notifications may 
be either push or pull.</p>
<p class="indent">Because these components are loosely coupled, it is 
easy to develop and test them in parallel, and changes to one have 
minimal impact on the others. The relationships between the components 
of MVC are shown in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13fig07">Figure 13.7</a>.</p>
<div class="image"><a id="ch13fig07"></a><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/13fig07.jpg" src="13.%20Architectural%20Tactics%20and%20Patterns_files/13fig07.jpg" alt="Image" height="459" width="614"></div>
<p class="fig-caption">Figure 13.7. The model-view-controller pattern</p>
<p class="indent"><a id="page_215"></a>The MVC pattern is widely used in
 user interface libraries such as Java’s Swing classes, Microsoft’s 
ASP.NET framework, Adobe’s Flex software development kit, Nokia’s Qt 
framework, and many others. As such, it is common for a single 
application to contain many instances of MVC (often one per user 
interface object).</p>
<h5 id="ch13lev3sec4">Pipe-and-Filter Pattern</h5>
<p class="noindent"><strong>Context:</strong> Many systems are required 
to transform streams of discrete data items, from input to output. Many 
types of transformations occur repeatedly in practice, and so it is 
desirable to create these as independent, reusable parts.</p>
<p class="noindent"><strong>Problem:</strong> Such systems need to be 
divided into reusable, loosely coupled components with simple, generic 
interaction mechanisms. In this way they can be flexibly combined with 
each other. The components, being generic and loosely coupled, are 
easily reused. The components, being independent, can execute in 
parallel.</p>
<p class="noindent"><strong>Solution:</strong> The pattern of 
interaction in the pipe-and-filter pattern is characterized by 
successive transformations of streams of data. Data arrives at a 
filter’s input port(s), is transformed, and then is passed via its 
output port(s) through a pipe to the next filter. A single filter can 
consume data from, or produce data to, one or more ports.</p>
<p class="indent">There are several weaknesses associated with the 
pipe-and-filter pattern. For instance, this pattern is typically not a 
good choice for an interactive system, as it disallows cycles (which are
 important for user feedback). Also, having large numbers of independent
 filters can add substantial amounts of computational overhead, because 
each filter runs as its own thread or process. Also, pipe-and-filter 
systems may not be appropriate for long-running computations, without 
the addition of some form of checkpoint/restore functionality, as the 
failure of any filter (or pipe) can cause the entire pipeline to fail.</p>
<p class="indent">The solution of the pipe-and-filter pattern is summarized in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13tab04">Table 13.4</a>.</p>
<p class="tab-caption"><a id="ch13tab04"></a>Table 13.4. Pipe-and-Filter Pattern Solution</p>
<div class="image"><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/13tab04.jpg" src="13.%20Architectural%20Tactics%20and%20Patterns_files/13tab04.jpg" alt="Image" height="365" width="630"></div>
<div class="image"><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/13tab04a.jpg" src="13.%20Architectural%20Tactics%20and%20Patterns_files/13tab04a.jpg" alt="Image" height="292" width="630"></div>
<p class="indent">Pipes buffer data during communication. Because of 
this property, filters can execute asynchronously and concurrently. 
Moreover, a filter typically does not know the identity of its upstream 
or downstream filters. For this reason, pipeline pipe-and-filter systems
 have the property that the overall computation can be treated as the 
functional composition of the computations of the filters, making it 
easier for the architect to reason about end-to-end behavior.</p>
<p class="indent">Data transformation systems are typically structured 
as pipes and filters, with each filter responsible for one part of the 
overall transformation of the input data. The independent processing at 
each step supports reuse, parallelization, and simplified reasoning 
about overall behavior. Often such systems constitute the front end of 
signal-processing applications. These systems receive sensor data at a 
set of initial filters; each of these filters compresses the data and 
performs initial processing (such as smoothing). Downstream filters 
reduce the data further and <a id="page_216"></a>do synthesis across 
data derived from different sensors. The final filter typically passes 
its data to an application, for example providing input to modeling or 
visualization tools.</p>
<p class="indent">Other systems that use pipe-and-filter include those 
built using UNIX pipes, the request processing architecture of the 
Apache web server, the map-reduce pattern (presented later in this 
chapter), Yahoo! Pipes for processing RSS feeds, many workflow engines, 
and many scientific computation systems that have to process and analyze
 large streams of captured data. <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13fig08">Figure 13.8</a> shows a UML diagram of a pipe-and-filter system.</p>
<div class="image"><a id="ch13fig08"></a><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/13fig08.jpg" src="13.%20Architectural%20Tactics%20and%20Patterns_files/13fig08.jpg" alt="Image" height="332" width="720"></div>
<p class="fig-caption">Figure 13.8. A UML diagram of a pipe-and-filter-based system</p>
<h5 id="ch13lev3sec5"><a id="page_217"></a>Client-Server Pattern</h5>
<p class="noindent"><strong>Context:</strong> There are shared resources
 and services that large numbers of distributed clients wish to access, 
and for which we wish to control access or quality of service.</p>
<p class="noindent"><strong>Problem:</strong> By managing a set of 
shared resources and services, we can promote modifiability and reuse, 
by factoring out common services and having to modify these in a single 
location, or a small number of locations. We want to improve scalability
 and availability by centralizing the control of these resources and 
services, while distributing the resources themselves across multiple 
physical servers.</p>
<p class="noindent"><strong>Solution:</strong> Clients interact by 
requesting services of servers, which provide a set of services. Some 
components may act as both clients and servers. There may be one central
 server or multiple distributed ones.</p>
<p class="indent">The client-server pattern solution is summarized in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13tab05">Table 13.5</a>; the component types are <em>clients</em> and <em>servers</em>;
 the principal connector type for the client-server pattern is a data 
connector driven by a request/reply protocol used for invoking services.</p>
<p class="tab-caption"><a id="ch13tab05"></a>Table 13.5. Client-Server Pattern Solution</p>
<div class="image"><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/13tab05.jpg" src="13.%20Architectural%20Tactics%20and%20Patterns_files/13tab05.jpg" alt="Image" height="636" width="630"></div>
<p class="indent">Some of the disadvantages of the client-server pattern
 are that the server can be a performance bottleneck and it can be a 
single point of failure. Also, decisions about where to locate 
functionality (in the client or in the server) are often complex and 
costly to change after a system has been built.</p>
<p class="indent"><a id="page_218"></a>Some common examples of systems that use the client-server pattern are these:</p>
<p class="indenthangingB">• Information systems running on local 
networks where the clients are GUI-launched applications and the server 
is a database management system</p>
<p class="indenthangingB">• Web-based applications where the clients are web browsers and the servers are components running on an e-commerce site</p>
<p class="indent">The computational flow of pure client-server systems 
is asymmetric: clients initiate interactions by invoking services of 
servers. Thus, the client must know the identity of a service to invoke 
it, and clients initiate all interactions. In contrast, servers do not 
know the identity of clients in advance of a service request and must 
respond to the initiated client requests.</p>
<p class="indent">In early forms of client-server, service invocation is
 synchronous: the requester of a service waits, or is blocked, until a 
requested service completes its <a id="page_219"></a>actions, possibly 
providing a return result. However, variants of the client-server 
pattern may employ more-sophisticated connector protocols. For example:</p>
<p class="indenthangingB">• Web browsers don’t block until the data request is served up.</p>
<p class="indenthangingB">• In some client-server patterns, servers are 
permitted to initiate certain actions on their clients. This might be 
done by allowing a client to register notification procedures, or 
callbacks, that the server calls at specific times.</p>
<p class="indenthangingB">• In other systems service calls over a 
request/reply connector are bracketed by a “session” that delineates the
 start and end of a set of a client-server interaction.</p>
<p class="indent">The client-server pattern separates client 
applications from the services they use. This pattern simplifies systems
 by factoring out common services, which are reusable. Because servers 
can be accessed by any number of clients, it is easy to add new clients 
to a system. Similarly, servers may be replicated to support scalability
 or availability.</p>
<p class="indent">The World Wide Web is the best-known example of a 
system that is based on the client-server pattern, allowing clients (web
 browsers) to access information from servers across the Internet using 
HyperText Transfer Protocol (HTTP). HTTP is a request/reply protocol. 
HTTP is stateless; the connection between the client and the server is 
terminated after each response from the server.</p>
<p class="indent"><a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13fig09">Figure 13.9</a> uses an informal notation to describe the client-server view of an automatic teller machine (ATM) banking system.</p>
<div class="image"><a id="ch13fig09"></a><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/13fig09.jpg" src="13.%20Architectural%20Tactics%20and%20Patterns_files/13fig09.jpg" alt="Image" height="398" width="474"></div>
<p class="fig-caption">Figure 13.9. The client-server architecture of an ATM banking system</p>
<h5 id="ch13lev3sec6"><a id="page_220"></a>Peer-to-Peer Pattern</h5>
<p class="noindent"><strong>Context:</strong> Distributed computational 
entities—each of which is considered equally important in terms of 
initiating an interaction and each of which provides its own 
resources—need to cooperate and collaborate to provide a service to a 
distributed community of users.</p>
<p class="noindent"><strong>Problem:</strong> How can a set of “equal” 
distributed computational entities be connected to each other via a 
common protocol so that they can organize and share their services with 
high availability and scalability?</p>
<p class="noindent"><strong>Solution:</strong> In the peer-to-peer (P2P)
 pattern, components directly interact as peers. All peers are “equal” 
and no peer or group of peers can be critical for the health of the 
system. Peer-to-peer communication is typically a request/reply 
interaction without the asymmetry found in the client-server pattern. 
That is, any component can, in principle, interact with any other 
component by requesting its services. The interaction may be initiated 
by either party—that is, in client-server terms, each peer component is 
both a client and a server. Sometimes the interaction is just to forward
 data without the need for a reply. Each peer provides and consumes 
similar services and uses the same protocol. Connectors in peer-to-peer 
systems involve bidirectional interactions, reflecting the two-way 
communication that may exist between two or more peer-to-peer 
components.</p>
<p class="indent">Peers first connect to the peer-to-peer network on 
which they discover other peers they can interact with, and then 
initiate actions to achieve their computation by cooperating with other 
peers by requesting services. Often a peer’s search for another peer is 
propagated from one peer to its connected peers for a limited number of 
hops. A peer-to-peer architecture may have specialized peer nodes 
(called supernodes) that have indexing or routing capabilities and allow
 a regular peer’s search to reach a larger number of peers.</p>
<p class="indent">Peers can be added and removed from the peer-to-peer 
network with no significant impact, resulting in great scalability for 
the whole system. This provides flexibility for deploying the system 
across a highly distributed platform.</p>
<p class="indent">Typically multiple peers have overlapping 
capabilities, such as providing access to the same data or providing 
equivalent services. Thus, a peer acting as client can collaborate with 
multiple peers acting as servers to complete a certain task. If one of 
these multiple peers becomes unavailable, the others can still provide 
the services to complete the task. The result is improved overall 
availability. There are also performance advantages: The load on any 
given peer component acting as a server is reduced, and the 
responsibilities that might have required more server capacity and 
infrastructure to support it are distributed. This can decrease the need
 for other communication for updating data and for central server 
storage, but at the expense of storing the data locally.</p>
<p class="indent"><a id="page_221"></a>The drawbacks of the peer-to-peer
 pattern are strongly related to its strengths. Because peer-to-peer 
systems are decentralized, managing security, data consistency, data and
 service availability, backup, and recovery are all more complex. In 
many cases it is difficult to provide guarantees with peer-to-peer 
systems because the peers come and go; instead, the architect can, at 
best, offer probabilities that quality goals will be met, and these 
probabilities typically increase with the size of the population of 
peers.</p>
<p class="indent"><a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13tab06">Table 13.6</a> on the next page summarizes the peer-to-peer pattern solution.</p>
<p class="tab-caption"><a id="ch13tab06"></a>Table 13.6. Peer-to-Peer Pattern Solution</p>
<div class="image"><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/13tab06.jpg" src="13.%20Architectural%20Tactics%20and%20Patterns_files/13tab06.jpg" alt="Image" height="414" width="630"></div>
<p class="indent">Peer-to-peer computing is often used in distributed 
computing applications such as file sharing, instant messaging, desktop 
grid computing, routing, and wireless ad hoc networking. Examples of 
peer-to-peer systems include file-sharing networks such as BitTorrent 
and eDonkey, and instant messaging and VoIP applications such as Skype. <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13fig10">Figure 13.10</a> shows an example of an instantiation of the peer-to-peer pattern.</p>
<div class="image"><a id="ch13fig10"></a><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/13fig10.jpg" src="13.%20Architectural%20Tactics%20and%20Patterns_files/13fig10.jpg" alt="Image" height="482" width="626"></div>
<p class="fig-caption">Figure 13.10. A peer-to-peer view of a Gnutella 
network using an informal C&amp;C notation. For brevity, only a few 
peers are identified. Each of the identified leaf peers uploads and 
downloads files directly from other peers.</p>
<h5 id="ch13lev3sec7"><a id="page_222"></a>Service-Oriented Architecture Pattern</h5>
<p class="noindent"><strong>Context:</strong> A number of services are 
offered (and described) by service providers and consumed by service 
consumers. Service consumers need to be able to understand and use these
 services without any detailed knowledge of their implementation.</p>
<p class="noindent"><strong>Problem:</strong> How can we support 
interoperability of distributed components running on different 
platforms and written in different implementation languages, provided by
 different organizations, and distributed across the Internet? How can 
we locate services and combine (and dynamically recombine) them into 
meaningful coalitions while achieving reasonable performance, security, 
and availability?</p>
<p class="noindent"><strong>Solution:</strong> The service-oriented 
architecture (SOA) pattern describes a collection of distributed 
components that provide and/or consume services. In an SOA, <em>service provider</em> components and <em>service consumer</em>
 components can use different implementation languages and platforms. 
Services are largely standalone: service providers and service consumers
 are usually deployed independently, and often belong to different 
systems or even different organizations. Components have interfaces that
 describe the services they request from other components and the 
services they provide. A service’s quality attributes can be specified 
and guaranteed with a service-level agreement (SLA). In some cases, 
these are legally binding. Components achieve their computation by 
requesting services from one another.</p>
<p class="indent"><a id="page_223"></a>The elements in this pattern 
include service providers and service consumers, which in practice can 
take different forms, from JavaScript running on a web browser to CICS 
transactions running on a mainframe. In addition to the service provider
 and service consumer components, an SOA application may use specialized
 components that act as intermediaries and provide infrastructure 
services:</p>
<p class="indenthangingB">• Service invocation can be mediated by an <em>enterprise service bus</em>
 (ESB). An ESB routes messages between service consumers and service 
providers. In addition, an ESB can convert messages from one protocol or
 technology to another, perform various data transformations (e.g., 
format, content, splitting, merging), perform security checks, and 
manage transactions. Using an ESB promotes interoperability, security, 
and modifiability. Of course, communicating through an ESB adds overhead
 thereby lowering performance, and introduces an additional point of 
failure. When an ESB is not in place, service providers and consumers 
communicate with each other in a point-to-point fashion.</p>
<p class="indenthangingB">• To improve the independence of service providers, a <em>service registry</em>
 can be used in SOA architectures. The registry is a component that 
allows services to be registered at runtime. This enables runtime 
discovery of services, which increases system modifiability by hiding 
the location and identity of the service provider. A registry can even 
permit multiple live versions of the same service.</p>
<p class="indenthangingB">• An <em>orchestration server</em> (or 
orchestration engine) orchestrates the interaction among various service
 consumers and providers in an SOA system. It executes scripts upon the 
occurrence of a specific event (e.g., a purchase order request arrived).
 Applications with well-defined business processes or workflows that 
involve interactions with distributed components or systems gain in 
modifiability, interoperability, and reliability by using an 
orchestration server. Many commercially available orchestration servers 
support various workflow or business process language standards.</p>
<p class="indent">The basic types of connectors used in SOA are these:</p>
<p class="indenthangingB">• <em>SOAP</em>. The standard protocol for 
communication in the web services technology. Service consumers and 
providers interact by exchanging request/reply XML messages typically on
 top of HTTP.</p>
<p class="indenthangingB">• <em>Representational State Transfer (REST)</em>.
 A service consumer sends nonblocking HTTP requests. These requests rely
 on the four basic HTTP commands (POST, GET, PUT, DELETE) to tell the 
service provider to create, retrieve, update, or delete a resource.</p>
<p class="indenthangingB">• <em>Asynchronous messaging</em>, a 
“fire-and-forget” information exchange. Participants do not have to wait
 for an acknowledgment of receipt, because the infrastructure is assumed
 to have delivered the message successfully. The messaging connector can
 be point-to-point or publish-subscribe.</p>
<p class="indent"><a id="page_224"></a>In practice, SOA environments may
 involve a mix of the three connectors just listed, along with legacy 
protocols and other communication alternatives (e.g., SMTP). Commercial 
products such as IBM’s WebSphere MQ, Microsoft’s MSMQ, or Apache’s 
ActiveMQ are infrastructure components that provide asynchronous 
messaging. SOAP and REST are described in more detail in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch06.html#ch06">Chapter 6</a>.</p>
<p class="indent">As you can see, the SOA pattern can be quite complex 
to design and implement (due to dynamic binding and the concomitant use 
of metadata). Other potential problems with this pattern include the 
performance overhead of the middleware that is interposed between 
services and clients and the lack of performance guarantees (because 
services are shared and, in general, not under control of the 
requester). These weaknesses are all shared with the broker pattern, 
which is not surprising because the SOA pattern shares many of the 
design concepts and goals of broker. In addition, because you do not, in
 general, control the evolution of the services that you use, you may 
have to endure high and unplanned-for maintenance costs.</p>
<p class="indent"><a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13tab07">Table 13.7</a> summarizes the SOA pattern.</p>
<p class="tab-caption"><a id="ch13tab07"></a>Table 13.7. Service-Oriented Architecture Pattern Solution</p>
<div class="image"><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/13tab07.jpg" src="13.%20Architectural%20Tactics%20and%20Patterns_files/13tab07.jpg" alt="Image" height="371" width="614"></div>
<div class="image"><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/13tab07a.jpg" src="13.%20Architectural%20Tactics%20and%20Patterns_files/13tab07a.jpg" alt="Image" height="436" width="614"></div>
<p class="indent">The main benefit and the major driver of SOA is 
interoperability. Because service providers and service consumers may 
run on different platforms, service-oriented architectures often 
integrate a variety of systems, including legacy systems. SOA also 
offers the necessary elements to interact with external services 
available over the Internet. Special SOA components such as the registry
 or the ESB also allow dynamic reconfiguration, which is useful when 
there’s a need to replace or add versions of components with no system 
interruption.</p>
<p class="indent"><a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13fig11">Figure 13.11</a>
 shows the SOA view of a system called Adventure Builder. Adventure 
Builder allows a customer on the web to assemble a vacation by choosing 
an activity and lodging at and transportation to a destination. The 
Adventure Builder system interacts with external service providers to 
construct the vacation, and with bank services to process payment. The 
central OPC (Order Processing Center) component coordinates the 
interaction with internal and external service consumers and providers. 
Note that the external providers can be legacy mainframe systems, Java 
systems, .NET systems, and so on. The nature of these external 
components is transparent because SOAP provides the necessary 
interoperability.</p>
<div class="image"><a id="ch13fig11"></a><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/13fig11.jpg" src="13.%20Architectural%20Tactics%20and%20Patterns_files/13fig11.jpg" alt="Image" height="896" width="588"></div>
<p class="fig-caption">Figure 13.11. Diagram of the SOA view for the Adventure Builder system. OPC stands for “Order Processing Center.”</p>
<h5 id="ch13lev3sec8"><a id="page_225"></a><a id="page_226"></a>Publish-Subscribe Pattern</h5>
<p class="noindent"><strong>Context:</strong> There are a number of 
independent producers and consumers of data that must interact. The 
precise number and nature of the data producers and consumers are not 
predetermined or fixed, nor is the data that they share.</p>
<p class="noindent"><a id="page_227"></a><strong>Problem:</strong> How 
can we create integration mechanisms that support the ability to 
transmit messages among the producers and consumers in such a way that 
they are unaware of each other’s identity, or potentially even their 
existence?</p>
<p class="noindent"><strong>Solution:</strong> In the publish-subscribe pattern, summarized in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13tab08">Table 13.8</a>,
 components interact via announced messages, or events. Components may 
subscribe to a set of events. It is the job of the publish-subscribe 
runtime infrastructure to make sure that each published event is 
delivered to all subscribers of that event. Thus, the main form of 
connector in these patterns is an <em>event bus</em>. Publisher 
components place events on the bus by announcing them; the connector 
then delivers those events to the subscriber components that have 
registered an interest in those events. Any component may be both a 
publisher and a subscriber.</p>
<p class="tab-caption"><a id="ch13tab08"></a>Table 13.8. Publish-Subscribe Pattern Solution</p>
<div class="image"><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/13tab08.jpg" src="13.%20Architectural%20Tactics%20and%20Patterns_files/13tab08.jpg" alt="Image" height="459" width="630"></div>
<p class="indent">Publish-subscribe adds a layer of indirection between 
senders and receivers. This has a negative effect on latency and 
potentially scalability, depending on how it is implemented. One would 
typically not want to use publish-subscribe in a system that had hard 
real-time deadlines to meet, as it introduces uncertainty in message 
delivery times.</p>
<p class="indent">Also, the publish-subscribe pattern suffers in that it
 provides less control over ordering of messages, and delivery of 
messages is not guaranteed (because the sender cannot know if a receiver
 is listening). This can make the publish-subscribe pattern 
inappropriate for complex interactions where shared state is critical.</p>
<p class="indent"><a id="page_228"></a>There are some specific 
refinements of this pattern that are in common use. We will describe 
several of these later in this section.</p>
<p class="indent">The computational model for the publish-subscribe 
pattern is best thought of as a system of independent processes or 
objects, which react to events generated by their environment, and which
 in turn cause reactions in other components as a side effect of their 
event announcements. An example of the publish-subscribe pattern, 
implemented on top of the Eclipse platform, is shown in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13fig12">Figure 13.12</a>.</p>
<div class="image"><a id="ch13fig12"></a><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/13fig12.jpg" src="13.%20Architectural%20Tactics%20and%20Patterns_files/13fig12.jpg" alt="Image" height="486" width="604"></div>
<p class="fig-caption">Figure 13.12. A typical publish-subscribe pattern realization</p>
<p class="indent">Typical examples of systems that employ the publish-subscribe pattern are the following:</p>
<p class="indenthangingB">• Graphical user interfaces, in which a user’s
 low-level input actions are treated as events that are routed to 
appropriate input handlers</p>
<p class="indenthangingB">• MVC-based applications, in which view components are notified when the state of a model object changes</p>
<p class="indenthangingB">• Enterprise resource planning (ERP) systems, 
which integrate many components, each of which is only interested in a 
subset of system events</p>
<p class="indenthangingB">• Extensible programming environments, in which tools are coordinated through events</p>
<p class="indenthangingB">• Mailing lists, where a set of subscribers can register interest in specific topics</p>
<p class="indenthangingB"><a id="page_229"></a>• Social networks, where “friends” are notified when changes occur to a person’s website</p>
<p class="indent">The publish-subscribe pattern is used to send events 
and messages to an unknown set of recipients. Because the set of event 
recipients is unknown to the event producer, the correctness of the 
producer cannot, in general, depend on those recipients. Thus, new 
recipients can be added without modification to the producers.</p>
<p class="indent">Having components be ignorant of each other’s identity
 results in easy modification of the system (adding or removing 
producers and consumers of data) but at the cost of runtime performance,
 because the publish-subscribe infrastructure is a kind of indirection, 
which adds latency. In addition, if the publish-subscribe connector 
fails completely, this is a single point of failure for the entire 
system.</p>
<p class="indent">The publish-subscribe pattern can take several forms:</p>
<p class="indenthangingB">• <em>List-based publish-subscribe</em> is a 
realization of the pattern where every publisher maintains a 
subscription list—a list of subscribers that have registered an interest
 in receiving the event. This version of the pattern is less decoupled 
than others, as we shall see below, and hence it does not provide as 
much modifiability, but it can be quite efficient in terms of runtime 
overhead. Also, if the components are distributed, there is no single 
point of failure.</p>
<p class="indenthangingB">• <em>Broadcast-based publish-subscribe</em> 
differs from list-based publish-subscribe in that publishers have less 
(or no) knowledge of the subscribers. Publishers simply publish events, 
which are then broadcast. Subscribers (or in a distributed system, 
services that act on behalf of the subscribers) examine each event as it
 arrives and determine whether the published event is of interest. This 
version has the potential to be very inefficient if there are lots of 
messages and most messages are not of interest to a particular 
subscriber.</p>
<p class="indenthangingB">• <em>Content-based publish-subscribe</em> is 
distinguished from the previous two variants, which are broadly 
categorized as “topic-based.” Topics are predefined events, or messages,
 and a component subscribes to all events within the topic. Content, on 
the other hand, is much more general. Each event is associated with a 
set of attributes and is delivered to a subscriber only if those 
attributes match subscriber-defined patterns.</p>
<p class="indent">In practice the publish-subscribe pattern is typically
 realized by some form of message-oriented middleware, where the 
middleware is realized as a broker, managing the connections and 
channels of information between producers and consumers. This middleware
 is often responsible for the transformation of messages (or message 
protocols), in addition to routing and sometimes storing the messages. 
Thus the publish-subscribe pattern inherits the strengths and weaknesses
 of the broker pattern.</p>
<h5 id="ch13lev3sec9"><a id="page_230"></a>Shared-Data Pattern</h5>
<p class="noindent"><strong>Context:</strong> Various computational 
components need to share and manipulate large amounts of data. This data
 does not belong solely to any one of those components.</p>
<p class="noindent"><strong>Problem:</strong> How can systems store and manipulate persistent data that is accessed by multiple independent components?</p>
<p class="noindent"><strong>Solution:</strong> In the shared-data pattern, interaction is dominated by the exchange of persistent data between multiple <em>data accessors</em> and at least one <em>shared-data store</em>. Exchange may be initiated by the accessors or the data store. The connector type is <em>data reading and writing</em>.
 The general computational model associated with shared-data systems is 
that data accessors perform operations that require data from the data 
store and write results to one or more data stores. That data can be 
viewed and acted on by other data accessors. In a pure shared-data 
system, data accessors interact only through one or more shared-data 
stores. However, in practice shared-data systems also allow direct 
interactions between data accessors. The data-store components of a 
shared-data system provide shared access to data, support data 
persistence, manage concurrent access to data through transaction 
management, provide fault tolerance, support access control, and handle 
the distribution and caching of data values.</p>
<p class="indent">Specializations of the shared-data pattern differ with
 respect to the nature of the stored data—existing approaches include 
relational, object structures, layered, and hierarchical structures.</p>
<p class="indent">Although the sharing of data is a critical task for 
most large, complex systems, there are a number of potential problems 
associated with this pattern. For one, the shared-data store may be a 
performance bottleneck. For this reason, performance optimization has 
been a common theme in database research. The shared-data store is also 
potentially a single point of failure. Also, the producers and consumers
 of the shared data may be tightly coupled, through their knowledge of 
the structure of the shared data.</p>
<p class="indent">The shared-data pattern solution is summarized in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13tab09">Table 13.9</a>.</p>
<p class="tab-caption"><a id="ch13tab09"></a>Table 13.9. Shared-Data Pattern Solution</p>
<div class="image"><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/13tab09.jpg" src="13.%20Architectural%20Tactics%20and%20Patterns_files/13tab09.jpg" alt="Image" height="337" width="630"></div>
<p class="indent">The shared-data pattern is useful whenever various 
data items are persistent and have multiple accessors. Use of this 
pattern has the effect of decoupling the producer of the data from the 
consumers of the data; hence, this pattern supports modifiability, as 
the producers do not have direct knowledge of the consumers. 
Consolidating the data in one or more locations and accessing it in a 
common fashion facilitates performance tuning. Analyses associated with 
this pattern usually center on qualities such as data consistency, 
performance, security, privacy, availability, scalability, and 
compatibility with, for example, existing repositories and their data.</p>
<p class="indent">When a system has more than one data store, a key 
architecture concern is the mapping of data and computation to the data.
 Use of multiple stores may occur because the data is naturally, or 
historically, partitioned into separable stores. In other cases data may
 be replicated over several stores to improve performance or 
availability through redundancy. Such choices can strongly affect the 
qualities noted above.</p>
<p class="indent"><a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13fig13">Figure 13.13</a>
 shows the diagram of a shared-data view of an enterprise access 
management system. There are three types of accessor components: <a id="page_231"></a>Windows
 applications, web applications, and headless programs (programs or 
scripts that run in background and don’t provide any user interface).</p>
<div class="image"><a id="ch13fig13"></a><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/13fig13.jpg" src="13.%20Architectural%20Tactics%20and%20Patterns_files/13fig13.jpg" alt="Image" height="542" width="542"></div>
<p class="fig-caption">Figure 13.13. The shared-data diagram of an enterprise access management system</p>
<h4 id="ch13lev2sec4"><a id="page_232"></a>Allocation Patterns</h4>
<h5 id="ch13lev3sec10">Map-Reduce Pattern</h5>
<p class="noindent"><strong>Context:</strong> Businesses have a pressing
 need to quickly analyze enormous volumes of data they generate or 
access, at petabyte scale. Examples include logs of interactions in a 
social network site, massive document or data repositories, and pairs of
 &lt;source, target&gt; web links for a search engine. Programs for the 
analysis of this data should be easy to write, run efficiently, and be 
resilient with respect to hardware failure.</p>
<p class="noindent"><strong>Problem:</strong> For many applications with
 ultra-large data sets, sorting the data and then analyzing the grouped 
data is sufficient. The problem the map-reduce pattern solves is to 
efficiently perform a distributed and parallel sort of a large data set 
and provide a simple means for the programmer to specify the analysis to
 be done.</p>
<p class="noindent"><strong>Solution:</strong> The map-reduce pattern 
requires three parts: First, a specialized infrastructure takes care of 
allocating software to the hardware nodes in a massively parallel 
computing environment and handles sorting the data as needed. A node may
 be a standalone processor or a core in a multi-core chip. Second and 
third are two programmer-coded functions called, predictably enough, <em>map</em> and <em>reduce</em>.</p>
<p class="indent">The map function takes as input a key (key1) and a 
data set. The purpose of the map function is to filter and sort the data
 set. All of the heavy analysis takes place in the reduce function. The 
input key in the map function is used to filter the data. Whether a data
 record is to be involved in further processing is determined by the map
 function. A second key (key2) is also important in the map function. 
This is the key that is used for sorting. The output of the map function
 consists of a &lt;key2, value&gt; pair, where the key2 is the sorting 
value and the value is derived from the input record.</p>
<p class="indent">Sorting is performed by a combination of the map and 
the infrastructure. Each record output by map is hashed by key2 into a 
disk partition. The infrastructure maintains an index file for key2 on 
the disk partition. This allows for the values on the disk partition to 
be retrieved in key2 order.</p>
<p class="indent">The performance of the map phase of map-reduce is 
enhanced by having multiple map instances, each processing a different 
portion of the disk file being processed. <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13fig14">Figure 13.14</a>
 shows how the map portion of map-reduce processes data. An input file 
is divided into portions, and a number of map instances are created to 
process each portion. The map function processes its portion into a 
number of partitions, based on programmer-specified logic.</p>
<div class="image"><a id="ch13fig14"></a><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/13fig14.jpg" src="13.%20Architectural%20Tactics%20and%20Patterns_files/13fig14.jpg" alt="Image" height="453" width="721"></div>
<p class="fig-caption">Figure 13.14. A component-and-connector view of 
map-reduce showing how the data processed by map is partitioned and 
subsequently processed by reduce</p>
<p class="indent">The reduce function is provided with all the sets of 
&lt;key2, value&gt; pairs emitted by all the map instances in sorted 
order. Reduce does some programmer-specified analysis and then emits the
 results of that analysis. The output set is almost always much smaller 
than the input sets, hence the name “reduce.” The term “load” is 
sometimes used to describe the final set of data emitted. <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13fig14">Figure 13.14</a> also shows one instance (of many possible instances) of the reduce processing, <a id="page_233"></a>called
 Reduce Instance 2. Reduce Instance 2 is receiving data from all of the 
Partition 2s produced by the various map instances. It is possible that 
there are several iterations of reduce for large files, but this is not 
shown in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13fig14">Figure 13.14</a>.</p>
<p class="indent">A classic teaching problem for map-reduce is counting 
word occurrences in a document. This example can be carried out with a 
single map function. The document is the data set. The map function will
 find every word in the document and output a &lt;word, 1&gt; pair for 
each. For example, if the document begins with the words “Having a whole
 book ...,” then the first results of map will be</p>
<p class="pre">&lt;Having, 1&gt;<br>
&lt;a, 1&gt;<br>
&lt;whole, 1&gt;<br>
&lt;book, 1&gt;</p>
<p class="noindent">In practice, the “a” would be one of the words filtered by map.</p>
<p class="indent">Pseudocode for map might look like this:</p>
<p class="codelink"><a id="p232pro01" href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13img.html#p232pro01a">Click here to view code image</a></p>
<p class="pre">map(String key, String value):<br>
// key: document name<br>
// value: document contents<br>
for each word w in value:<br>
Emit (w, "1");</p>
<p class="indent"><a id="page_234"></a>The reduce function will take that list in sorted order, add up the 1s for each word to get a count, and output the result.</p>
<p class="indent">The corresponding reduce function would look like this:</p>
<p class="codelink"><a id="p234pro01" href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13img.html#p234pro01a">Click here to view code image</a></p>
<p class="pre">reduce(List &lt;key, value&gt;):<br>
// key: a word<br>
// value: an integer<br>
int result = 0;<br>
sort input<br>
for each input value:<br>
for each input pair with same word<br>
result ++ ;<br>
Emit (word, result)<br>
result = 0</p>
<p class="indent">Larger data sets lead to a much more interesting solution. Suppose we want to continuously analyze Twitter posts over the last hour to see what topics are currently “trending.” This is analogous to counting word occurrences in millions of documents. In that case, each document (tweet) can be assigned to its own instance of the map function. (If you don’t have millions of processors handy, you can break the tweet collection into groups that match the number of processors in your processor farm, and process the collection in waves, one group after the other.) Or we can use a dictionary to give us a list of words, and each map function can be assigned its own word to look for across all tweets.</p>
<p class="indent">There can also be multiple instances of reduce. These are usually arranged so that the reduction happens in stages, with each stage processing a smaller list (with a smaller number of reduce instances) than the previous stage. The final stage is handled by a single reduce function that produces the final output.</p>
<p class="indent">Of course, the map-reduce pattern is not appropriate in all instances. Some considerations that would argue against adopting this pattern are these:</p>
<p class="indenthangingB">• If you do not have large data sets, then the overhead of map-reduce is not justified.</p>
<p class="indenthangingB">• If you cannot divide your data set into similar sized subsets, the advantages of parallelism are lost.</p>
<p class="indenthangingB">• If you have operations that require multiple reduces, this will be complex to orchestrate.</p>
<p class="indent">Commercial implementations of map-reduce provide infrastructure that takes care of assignment of function instances to hardware, recovery and reassignment in case of hardware failure (a common occurrence in massively parallel computing environments), and utilities like sorting of the massive lists that are produced along the way.</p>
<p class="indent"><a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13tab10">Table 13.10</a> summarizes the solution of the map-reduce pattern.</p>
<p class="tab-caption"><a id="ch13tab10"></a>Table 13.10. Map-Reduce Pattern Solution</p>
<div class="image"><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/13tab10.jpg" src="13.%20Architectural%20Tactics%20and%20Patterns_files/13tab10.jpg" alt="Image" height="610" width="630"></div>
<p class="indent">Map-reduce is a cornerstone of the software of some of the most familiar names on the web, including Google, Facebook, eBay, and Yahoo!</p>
<h5 id="ch13lev3sec11"><a id="page_235"></a>Multi-tier Pattern</h5>
<p class="noindent">The multi-tier pattern is a C&amp;C pattern or an allocation pattern, depending on the criteria used to define the tiers. Tiers can be created to group components of similar functionality, in which case it is a C&amp;C pattern. However, in many, if not most, cases tiers are defined with an eye toward the computing environment on which the software will run: A client tier in an enterprise system will not be running on the computer that hosts the database. That makes it an allocation pattern, mapping software elements—perhaps produced by applying C&amp;C patterns—to computing elements. Because of that reason, we have chosen to list it as an allocation pattern.</p>
<p class="noindent"><strong>Context:</strong> In a distributed deployment, there is often a need to distribute a system’s infrastructure into distinct subsets. This may be for operational or business reasons (for example, different parts of the infrastructure may belong to different organizations).</p>
<p class="noindent"><a id="page_236"></a><strong>Problem:</strong> How can we split the system into a number of computationally independent execution structures—groups of software and hardware—connected by some communications media? This is done to provide specific server environments optimized for operational requirements and resource usage.</p>
<p class="noindent"><strong>Solution:</strong> The execution structures of many systems are organized as a set of logical groupings of components. Each grouping is termed a <em>tier</em>. The grouping of components into tiers may be based on a variety of criteria, such as the type of component, sharing the same execution environment, or having the same runtime purpose.</p>
<p class="indent">The use of tiers may be applied to any collection (or pattern) of runtime components, although in practice it is most often used in the context of client-server patterns. Tiers induce topological constraints that restrict which components may communicate with other components. Specifically, connectors may exist only between components in the same tier or residing in adjacent tiers. The multi-tier pattern found in many Java EE and Microsoft .NET applications is an example of organization in tiers derived from the client-server pattern.</p>
<p class="indent">Additionally, tiers may constrain the <em>kinds</em> of communication that can take place across adjacent tiers. For example, some tiered patterns require call-return communication in one direction but event-based notification in the other.</p>
<p class="indent">The main weakness with the multi-tier architecture is its cost and complexity. For simple systems, the benefits of the multi-tier architecture may not justify its up-front and ongoing costs, in terms of hardware, software, and design and implementation complexity.</p>
<p class="indent">Tiers are not components, but rather logical groupings of components. Also, don’t confuse tiers with layers! Layering is a pattern of modules (a unit of implementation), while tiers applies only to runtime entities.</p>
<p class="indent"><a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13tab11">Table 13.11</a> summarizes the solution part of the multi-tier pattern.</p>
<p class="tab-caption"><a id="ch13tab11"></a>Table 13.11. Multi-tier Pattern Solution</p>
<div class="image"><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/13tab11.jpg" src="13.%20Architectural%20Tactics%20and%20Patterns_files/13tab11.jpg" alt="Image" height="312" width="630"></div>
<p class="indent">Tiers make it easier to ensure security, and to optimize performance and availability in specialized ways. They also enhance the modifiability of the system, as the computationally independent subgroups need to agree on protocols for interaction, thus reducing their coupling.</p>
<p class="indent"><a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13fig15">Figure 13.15</a> uses an informal notation to describe the multi-tier architecture of the Consumer Website Java EE application. This application is part of the Adventure Builder system. Many component-and-connector types are specific to the supporting platform, which is Java EE in this case.</p>
<div class="image"><a id="ch13fig15"></a><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/13fig15.jpg" src="13.%20Architectural%20Tactics%20and%20Patterns_files/13fig15.jpg" alt="Image" height="563" width="752"></div>
<p class="fig-caption">Figure 13.15. A multi-tier view of the Consumer Website Java EE application, which is part of the Adventure Builder system</p>
<h5 id="ch13lev3sec12"><a id="page_237"></a><a id="page_238"></a>Other Allocation Patterns</h5>
<p class="noindent">There are several published deployment styles. Microsoft publishes a “Tiered Distribution” pattern, which prescribes a particular allocation of components in a multi-tier architecture to the hardware they will run on. Similarly, IBM’s WebSphere handbooks describe a number of what they call “topologies” along with the quality attribute criteria for choosing among them. There are 11 topologies (specialized deployment patterns) described for WebSphere version 6, including the “single machine topology (stand-alone server),” “reverse proxy topology,” “vertical scaling topology,” “horizontal scaling topology,” and “horizontal scaling with IP sprayer topology.”</p>
<p class="indent">There are also published work assignment patterns. These take the form of often-used team structures. For example, patterns for globally distributed Agile projects include these:</p>
<p class="indenthangingB">• <em>Platform.</em> In software product line development, one site is tasked with developing reusable core assets of the product line, and other sites develop applications that use the core assets.</p>
<p class="indenthangingB">• <em>Competence center.</em> Work is allocated to sites depending on the technical or domain expertise located at a site. For example, user interface design is done at a site where usability engineering experts are located.</p>
<p class="indenthangingB">• <em>Open source.</em> Many independent contributors develop the software product in accordance with a technical integration strategy. Centralized control is minimal, except when an independent contributor integrates his code into the product line.</p>
<h3 id="ch13lev1sec3">13.3. Relationships between Tactics and Patterns</h3>
<p class="noindent">Patterns and tactics together constitute the software architect’s primary tools of the trade. How do they relate to each other?</p>
<h4 id="ch13lev2sec5">Patterns Comprise Tactics</h4>
<p class="noindent">As we said in the introduction to this chapter, tactics are the “building blocks” of design from which architectural patterns are created. Tactics are atoms and patterns are molecules. Most patterns consist of (are constructed from) several different tactics, and although these tactics might all serve a common purpose—such as promoting modifiability, for example—they are often chosen to promote <em>different</em> quality attributes. For example, a tactic might be chosen that makes an availability pattern more secure, or that mitigates the performance impact of a modifiability pattern.</p>
<p class="indent">Consider the example of the layered pattern, the most common pattern in all of software architecture (virtually all nontrivial systems employ layering). The <a id="page_239"></a>layered pattern can be seen as the amalgam of several tactics—increase semantic coherence, abstract common services, encapsulate, restrict communication paths, and use an intermediary. For example:</p>
<p class="indenthangingB">• <em>Increase semantic coherence</em>. The goal of ensuring that a layer’s responsibilities all work together without excessive reliance on other layers is achieved by choosing responsibilities that have semantic coherence. Doing so binds responsibilities that are likely to be affected by a change. For example, responsibilities that deal with hardware should be allocated to a hardware layer and not to an application layer; a hardware responsibility typically does not have semantic coherence with the application responsibilities.</p>
<p class="indenthangingB">• <em>Restrict dependencies</em>. Layers define an ordering and only allow a layer to use the services of its adjacent lower layer. The possible communication paths are reduced to the number of layers minus one. This limitation has a great influence on the dependencies between the layers and makes it much easier to limit the side effects of replacing a layer.</p>
<p class="indent">Without any one of its tactics, the pattern might be ineffective. For example, if the restrict dependencies tactic is not employed, then any function in any layer can call any other function in any other layer, destroying the low coupling that makes the layering pattern effective. If the increase semantic coherence tactic is not employed, then functionality could be randomly sprinkled throughout the layers, destroying the separation of concerns, and hence ease of modification, which is the prime motivation for employing layers in the first place.</p>
<p class="indent"><a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13tab12">Table 13.12</a> shows a number of the architectural patterns described in the book <em>Pattern-Oriented Software Architecture Volume 1: A System of Patterns</em>, by Buschmann et al., and shows which modifiability tactics they employ.</p>
<p class="tab-caption"><a id="ch13tab12"></a>Table 13.12. Architecture Patterns and Corresponding Tactics (<a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_008">[Bachmann 07]</a>)</p>
<div class="image"><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/13tab12.jpg" src="13.%20Architectural%20Tactics%20and%20Patterns_files/13tab12.jpg" alt="Image" height="483" width="632"></div>
<h4 id="ch13lev2sec6">Using Tactics to Augment Patterns</h4>
<p class="noindent">A pattern is described as a solution to a class of problems in a general context. When a pattern is chosen and applied, the context of its application becomes very specific. A documented pattern is therefore underspecified with respect to applying it in a specific situation.</p>
<p class="indent">To make a pattern work in a given architectural context, we need to examine it from two perspectives:</p>
<p class="indenthangingB">• The inherent quality attribute tradeoffs that the pattern makes. Patterns exist to achieve certain quality attributes, and we need to compare the ones they promote (and the ones they diminish) with our needs.</p>
<p class="indenthangingB">• Other quality attributes that the pattern isn’t directly concerned with, but which it nevertheless affects, and which are important in our application.</p>
<p class="indent"><a id="page_240"></a>To illustrate these concerns in particular, and how to use tactics to augment patterns in general, we’ll use the broker pattern as a starting point.</p>
<p class="indent">The broker pattern is widely used in distributed systems and dates back at least to its critical role in CORBA-based systems. Broker is a crucial component of any large-scale, dynamic, service-oriented architecture.</p>
<p class="indent">Using this pattern, a client requesting some information from a server does not need to know the location or APIs of the server. The client simply contacts the broker (typically through a client-side proxy); this is illustrated in the UML sequence diagram in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13fig16">Figure 13.16</a>.</p>
<div class="image"><a id="ch13fig16"></a><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/13fig16.jpg" src="13.%20Architectural%20Tactics%20and%20Patterns_files/13fig16.jpg" alt="Image" height="662" width="721"></div>
<p class="fig-caption">Figure 13.16. A sequence diagram showing a typical client-server interaction mediated by a broker</p>
<h5 id="ch13lev3sec13">Weaknesses of the Broker Pattern</h5>
<p class="noindent">In <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13lev1sec2">Section 13.2</a> we enumerated several weaknesses of the broker pattern. Here we will examine these weaknesses in more detail. The broker pattern has several weaknesses with respect to certain quality attributes. For example:</p>
<p class="indenthangingB">• <em>Availability</em>. The broker, if implemented as suggested in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13fig06">Figure 13.6</a>, is a single point of failure. The liveness of servers, the broker, and perhaps even the clients need to be monitored, and repair mechanisms must be provided.</p>
<p class="indenthangingB"><a id="page_241"></a>• <em>Performance</em>. The levels of indirection between the client (requesting the information or service) and the server (providing the information or service) add overhead, and hence add latency. Also, the broker is a potential performance bottleneck if direct communication between the client and server is not desired (for example, for security reasons).</p>
<p class="indenthangingB">• <em>Testability</em>. Brokers are employed in complex multi-process and multi-processor systems. Such systems are typically highly dynamic. Requests and responses are typically asynchronous. All of this makes testing and debugging such systems extremely difficult. But the description of the broker pattern provides no testing functionality, such as testing interfaces, state or activity capture and playback capabilities, and so forth.</p>
<p class="indenthangingB"><a id="page_242"></a>• <em>Security</em>. Because the broker pattern is primarily used when the system spans process and processor boundaries—such as on web-based systems—security is a legitimate concern. However, the broker pattern as presented does not offer any means to authenticate or authorize clients or servers, and provides no means of protecting the communication between clients and servers.</p>
<p class="indent">Of these quality attributes, the broker pattern is mainly associated with poor performance (the well-documented price for the loose coupling it brings to systems). It is largely unconcerned with the other quality attributes in this list; they aren’t mentioned in most published descriptions. But as the other bullets show, they can be unacceptable “collateral damage” that come with the broker’s benefits.</p>
<h5 id="ch13lev3sec14">Improving the Broker Pattern with Tactics</h5>
<p class="noindent">How can we use tactics to plug the gaps between the “out of the box” broker pattern and a version of it that will let us meet the requirements of a demanding distributed system? Here are some options:</p>
<p class="indenthangingB">• The increase available resources performance tactic would lead to multiple brokers, to help with performance and availability.</p>
<p class="indenthangingB">• The maintain multiple copies tactic would allow each of these brokers to share state, to ensure that they respond identically to client requests.</p>
<p class="indenthangingB">• Load balancing (an application of the scheduling resources tactic) would ensure that one broker is not overloaded while another one sits idle.</p>
<p class="indenthangingB">• Heartbeat, exception detection, or ping/echo would give the replicated brokers a way of notifying clients and notifying each other when one of them is out of service, as a means of detecting faults.</p>
<p class="indent">Of course, each of these tactics brings a tradeoff. Each complicates the design, which will now take longer to implement, be more costly to acquire, and be more costly to maintain. Load balancing introduces indirection that will add latency to each transaction, thus giving back some of the performance it was intended to increase. And the load balancer is a single point of failure, so it too must be replicated, further increasing the design cost and complexity.</p>
<h3 id="ch13lev1sec4">13.4. Using Tactics Together</h3>
<p class="noindent">Tactics, as described in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch05.html#ch05">Chapters 5</a>–<a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch11.html#ch11">11</a>, are design primitives aimed at managing a single quality attribute response. Of course, this is almost never true in practice; every tactic has its main effect—to manage modifiability or performance or safety, and so on—and it has its side effects, its tradeoffs. On the face of it, the situation for an architect sounds hopeless. Whatever you do to improve one <a id="page_243"></a>quality attribute endangers another. We are able to use tactics profitably because we can gauge the direct and side effects of a tactic, and when the tradeoff is acceptable, we employ the tactic. In doing so we gain some benefit in our quality attribute of interest while giving up something else (with respect to a different quality attribute and, we hope, of a much smaller magnitude).</p>
<p class="indent">This section will walk through an example that shows how applying tactics to a pattern can produce negative effects in one area, but how adding other tactics can bring relief and put you back in an acceptable design space. The point is to show the interplay between tactics that you can use to your advantage. Just as some combinations of liquids are noxious whereas others yield lovely things like strawberry lemonade, tactics can either make things worse or put you in a happy design space. Here, then, is a walkthrough of tactic mixology.</p>
<p class="indent">Consider a system that needs to detect faults in its components. A common tactic for detecting faults is ping/echo. Let us assume that the architect has decided to employ ping/echo as a way to detect failed components in the system. Every tactic has one or more side effects, and ping/echo is no different. Common considerations associated with ping/echo are these:</p>
<p class="indenthangingB">• <em>Security</em>. How to prevent a ping flood attack?</p>
<p class="indenthangingB">• <em>Performance</em>. How to ensure that the performance overhead of ping/echo is small?</p>
<p class="indenthangingB">• <em>Modifiability</em>. How to add ping/echo to the existing architecture?</p>
<p class="indent">We can represent the architect’s reasoning and decisions thus far as shown in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13fig17">Figure 13.17</a>.</p>
<div class="image"><a id="ch13fig17"></a><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/13fig17.jpg" src="13.%20Architectural%20Tactics%20and%20Patterns_files/13fig17.jpg" alt="Image" height="300" width="630"></div>
<p class="fig-caption">Figure 13.17. Partial availability decisions</p>
<p class="indent"><a id="page_244"></a>Suppose the architect determines that the performance tradeoff (the overhead of adding ping/echo to the system) is the most severe. A tactic to address the performance side effect is <em>increase available resources</em>. Considerations associated with increase available resources are these:</p>
<p class="indenthangingB">• <em>Cost</em>. Increased resources cost more.</p>
<p class="indenthangingB">• <em>Performance</em>. How to utilize the increased resources efficiently?</p>
<p class="indent">This set of design decisions can now be represented as shown in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13fig18">Figure 13.18</a>.</p>
<div class="image"><a id="ch13fig18"></a><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/13fig18.jpg" src="13.%20Architectural%20Tactics%20and%20Patterns_files/13fig18.jpg" alt="Image" height="498" width="631"></div>
<p class="fig-caption">Figure 13.18. More availability decisions</p>
<p class="indent">Now the architect chooses to deal with the resource utilization consequence of employing increase available resources. These resources must be used efficiently or else they are simply adding cost and complexity to the system. A tactic that can address the efficient use of resources is the employment of a <em>scheduling policy</em>. Considerations associated with the scheduling policy tactic are these:</p>
<p class="indenthangingB">• <em>Modifiability</em>. How to add the scheduling policy to the existing architecture?</p>
<p class="indenthangingB">• <em>Modifiability</em>. How to change the scheduling policy in the future?</p>
<p class="indent"><a id="page_245"></a>The set of design decisions that includes the scheduling policy tactic can now be represented as in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13fig19">Figure 13.19</a>.</p>
<div class="image"><a id="ch13fig19"></a><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/13fig19.jpg" src="13.%20Architectural%20Tactics%20and%20Patterns_files/13fig19.jpg" alt="Image" height="674" width="630"></div>
<p class="fig-caption">Figure 13.19. Still more availability decisions</p>
<p class="indent">Next the architect chooses to deal with the modifiability consequence of employing a scheduling policy tactic. A tactic to address the addition of the scheduler to the system is to <em>use an intermediary</em>, which will insulate the choice of scheduling policy from the rest of the system. One consideration associated with use an intermediary is this:</p>
<p class="indenthangingB">• <em>Modifiability</em>. How to ensure that all communication passes through the intermediary?</p>
<p class="indent"><a id="page_246"></a>We can now represent the tactics-based set of architectural design decisions made thus far as in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13fig20">Figure 13.20</a>.</p>
<div class="image"><a id="ch13fig20"></a><img data-mfp-src="/library/view/software-architecture-in/9780132942799/graphics/13fig20.jpg" src="13.%20Architectural%20Tactics%20and%20Patterns_files/13fig20.jpg" alt="Image" height="666" width="630"></div>
<p class="fig-caption">Figure 13.20. As far as we go with availability decisions</p>
<p class="indent">A tactic to address the concern that all communication passes through the intermediary is <em>restrict dependencies</em>. One consideration associated with the restrict dependencies tactic is this:</p>
<p class="indenthangingB">• <em>Performance</em>. How to ensure that the performance overhead of the intermediary is not excessive?</p>
<p class="indent">This design problem has now become recursive! At this point (or in fact, at any point in the tree of design decisions that we have described) the architect might determine that the performance overhead of the intermediary is small enough that no further design decisions need to be made.</p>
<p class="indent"><a id="page_247"></a>Applying successive tactics is like moving through a game space, and it’s a little like chess: Good players are able to see the consequences of the move they’re considering, and the very good players are able to look several moves ahead. In <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch17.html#ch17">Chapter 17</a> we’ll see the activity of design treated as an exercise of “generate and test”: propose a design and test it to see if it’s satisfactory. Applying tactics to an existing design solution, such as a pattern, is one technique for generating a design for subsequent testing.</p>
<h3 id="ch13lev1sec5">13.5. Summary</h3>
<p class="noindent">An architectural pattern</p>
<p class="indenthangingB">• is a package of design decisions that is found repeatedly in practice,</p>
<p class="indenthangingB">• has known properties that permit reuse, and</p>
<p class="indenthangingB">• describes a <em>class</em> of architectures.</p>
<p class="indent">Because patterns are (by definition) found repeatedly in practice, one does not <em>invent</em> them; one <em>discovers</em> them.</p>
<p class="indent">Tactics are simpler than patterns. Tactics typically use just a single structure or computational mechanism, and they are meant to address a single architectural force. For this reason they give more precise control to an architect when making design decisions than patterns, which typically combine multiple design decisions into a package. Tactics are the “building blocks” of design from which architectural patterns are created. Tactics are atoms and patterns are molecules.</p>
<p class="indent">An architectural pattern establishes a relationship between:</p>
<p class="indenthangingB">• <em>A context</em>. A recurring, common situation in the world that gives rise to a problem.</p>
<p class="indenthangingB">• <em>A problem.</em> The problem, appropriately generalized, that arises in the given context.</p>
<p class="indenthangingB">• <em>A solution.</em> A successful architectural resolution to the problem, appropriately abstracted.</p>
<p class="indent">Complex systems exhibit multiple patterns at once.</p>
<p class="indent">Patterns can be categorized by the dominant type of elements that they show: module patterns show modules, component-and-connector patterns show components and connectors, and allocation patterns show a combination of software elements (modules, components, connectors) and nonsoftware elements. Most published patterns are C&amp;C patterns, but there are module patterns and allocation patterns as well. This chapter showed examples of each type.</p>
<p class="indent">A pattern is described as a solution to a class of problems in a general context. When a pattern is chosen and applied, the context of its application becomes very specific. A documented pattern is therefore underspecified with respect to <a id="page_248"></a>applying it in a specific situation. We can make a pattern more specific to our problem by augmenting it with tactics. Applying successive tactics is like moving through a game space, and is a little like chess: the consequences of the next move are important, and looking several moves ahead is helpful.</p>
<h3 id="ch13lev1sec6">13.6. For Further Reading</h3>
<p class="noindent">There are many existing repositories of patterns and books written about patterns. The original and most well-known work on object-oriented design patterns is by the “Gang of Four” <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_073">[Gamma 94]</a>.</p>
<p class="indent">The Gang of Four’s discussion of patterns included patterns at many levels of abstraction. In this chapter we have focused entirely on architectural patterns. The patterns that we have presented here are intended as representative examples. This chapter’s inventory of patterns is in no way meant to be exhaustive. For example, while we describe the SOA pattern, entire repositories of SOA patterns (refinements of the basic SOA pattern) have been created. A good place to start is <a href="http://www.soapatterns.org/">www.soapatterns.org</a>.</p>
<p class="indent">Some good references for pattern-oriented architecture are <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_039">[Buschmann 96]</a>, <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_084">[Hanmer 07]</a>, <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_166">[Schmidt 00]</a>, and <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_111">[Kircher 03]</a>.</p>
<p class="indent">A good place to learn more about the map-reduce pattern is Google’s foundational paper on it <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_059">[Dean 04]</a>.</p>
<p class="indent">Map-reduce is the tip of the spear of the so-called “NoSQL” movement, which seeks to displace the relational database from its venerable and taken-for-granted status in large data-processing systems. The movement has some of the revolutionary flavor of the Agile movement, except that NoSQL advocates are claiming a better (for them) technology, as opposed to a better process. You can easily find NoSQL podcasts, user forums, conferences, and blogs; it’s also discussed in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch26.html#ch26">Chapter 26</a>.</p>
<p class="indent"><a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_008">[Bachmann 07]</a> discusses the use of tactics in the layered pattern and is the source for some of our discussion of that.</p>
<p class="indent">The passage in this chapter about augmenting ping/echo with other tactics to achieve the desired combination of quality attributes is based on the work of Kiran Kumar and TV Prabhakar <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_118">[Kumar 10a]</a> and <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_119">[Kumar 10b]</a>.</p>
<p class="indent"><a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_186">[Urdangarin 08]</a> is the source of the work assignment patterns described in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13lev1sec2">Section 13.2</a>.</p>
<p class="indent">The Adventure Builder system shown in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13fig11">Figures 13.11</a> and <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13fig15">13.15</a> comes from <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/app01.html#bib01_002">[AdvBuilder 10]</a>.</p>
<h3 id="ch13lev1sec7"><a id="page_249"></a>13.7. Discussion Questions</h3>
<p class="question"><strong>1.</strong> What’s the difference between an <em>architectural</em> pattern, such as those described in this chapter and in the Pattern-Oriented Software Architecture series of books, and <em>design</em> patterns, such as those collected by the Gang of Four in 1994 and many other people subsequently? Given a pattern, how would you decide whether it was an architectural pattern, a design pattern, a code pattern, or something else?</p>
<p class="question"><strong>2.</strong> SOA systems feature dynamic service registration and discovery. Which quality attributes does this capability enhance and which does it threaten? If you had to make a recommendation to your boss about whether your company’s SOA system should use external services it discovers at runtime, what would you say?</p>
<p class="question"><strong>3.</strong> Write a complete pattern description for the “competence center” work assignment pattern mentioned in <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch13.html#ch13lev1sec2">Section 13.2</a>.</p>
<p class="question"><strong>4.</strong> For a data set that is a set of web pages, sketch a map function and a reduce function that together provide a basic search engine capability.</p>
<p class="question"><strong>5.</strong> Describe how the layered pattern makes use of these tactics: abstract common services, encapsulate, and use an intermediary.</p>
<div class="annotator-outer annotator-viewer annotator-hide viewer">
  <ul class="annotator-widget annotator-listing"></ul>
</div><div class="annotator-editor-wrapper"><div class="annotator-outer annotator-editor annotator-hide">
  <h3 class="title">Highlight</h3><form class="annotator-widget">
    <ul class="annotator-listing"><li class="annotator-item"><textarea maxlength="750" placeholder="Add a note (optional)" id="annotator-field-3"></textarea></li></ul>
    <div class="annotator-controls">
      <a href="#cancel" class="annotator-cancel button">Cancel</a>
<a href="#save" class="annotator-save annotator-focus button positive">Save</a>
    </div>
  </form>
</div></div><div style="display: none;" class="annotator-adder"><button><span></span></button></div></div></div>



  <div class="t-sbo-prev sbo-prev sbo-nav-bottom">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch12.html" class="prev nav-link">
      
          <span aria-hidden="true" class="pagination-label t-prev-label">Prev</span>
          <span class="visuallyhidden">Previous Chapter</span>
          <div class="pagination-title t-prev-title">12. Other Quality Attributes</div>
        </a>
    
  
  </div>

  <div class="t-sbo-next sbo-next sbo-nav-bottom">
  
    
      
        <a href="https://www.safaribooksonline.com/library/view/software-architecture-in/9780132942799/ch14.html" class="next nav-link">
      
          <span aria-hidden="true" class="pagination-label t-next-label">Next</span>
          <span class="visuallyhidden">Next Chapter</span>
          <div class="pagination-title t-next-title">14. Quality Attribute Modeling and Analysis</div>
        </a>
    
  
  </div>

</section>
    <div class="reading-controls-bottom">
      <ul class="interface-controls js-bitlist">
        <li class="queue-control">
            <button title="Add to Queue" aria-label="Add to Queue" data-for-analytics="9780132942799:ch13.html" type="button" class="rec-fav ss-queue js-queue js-current-chapter-queue" data-queue-endpoint="/api/v1/book/9780132942799/chapter/ch13.html">
      <span>Add to Queue</span>
  </button>
        </li>
      </ul>
    </div>
  </div>
  <div class="js-related-container related"></div>
<section class="sbo-saved-archives"></section>



          
          
  





    
    
      <div id="js-subscribe-nag" class="subscribe-nag clearfix trial-panel  collapsed slideUp">
        <a href="#" class="js-toggle-nag ss-navigateup" title="Toggle open or close footer"></a>
        <div class="sample-message">
          <p class="usage-data t-collapsed-text">Enjoy Safari? 
            <a href="https://www.safaribooksonline.com/subscribe/">
              Subscribe Today
              
            </a>
          </p>
          

        <div class="expanded">
          <h2>You have 10 days left in your trial, Aejunknaja. </h2>
          <p class="t-expanded-text">Safari is your trusted guide for building a remarkable career. We hope you've been enjoying your trial—ready to join?</p>
          <a href="https://www.safaribooksonline.com/subscribe/" class="bigbutton positive">
            Subscribe Today
            
          </a>
          
            <footer style="padding-bottom: 69.2px;" class="pagefoot js-pagefoot">
    <div class="wrapper">
      <a href="https://www.safaribooksonline.com/" id="logo">Safari</a>
      <nav>
        <a href="https://www.safaribooksonline.com/public/support" class="full-support">Support</a> /
        <a href="https://www.safaribooksonline.com/contact/">Contact Us</a> /
        <a href="https://www.safaribooksonline.com/blog/">Blog</a>
      </nav>
      <div id="legal">
        <ul>
          <li>© 2016 <a class="copyright" href="https://www.safaribooksonline.com/">Safari</a> <br class="mobile-support"> <a href="https://www.safaribooksonline.com/terms/">Terms of Service</a> </li>
          <li><a href="https://www.safaribooksonline.com/membership-agreement/">Membership Agreement</a></li>
          <li><a href="https://www.safaribooksonline.com/privacy/">Privacy Policy</a></li>
        </ul>
      </div>
    </div>
  </footer>

        </div>
      </div>
    </div>

    
    



        
      </div>
      



  <footer style="padding-bottom: 69.2px;" class="pagefoot t-pagefoot">
    <a style="display: none;" href="#" class="icon-up"><div class="visuallyhidden">Back to top</div></a>
    <ul class="js-footer-nav">
      
        <li><a class="t-recommendations-footer" href="https://www.safaribooksonline.com/r/">Recommended</a></li>
      
      <li><a class="t-queue-footer" href="https://www.safaribooksonline.com/s/">Queue</a></li>
      
        <li><a class="t-recent-footer" href="https://www.safaribooksonline.com/recent/">Recent</a></li>
        <li><a class="t-topics-footer" href="https://www.safaribooksonline.com/topics?q=*&amp;limit=21">Topics</a></li>
      
      
        <li><a class="t-tutorials-footer" href="https://www.safaribooksonline.com/tutorials/">Tutorials</a></li>
      
      <li><a class="t-settings-footer js-settings" href="https://www.safaribooksonline.com/u/">Settings</a></li>
      <li><a href="https://www.safaribooksonline.com/blog/">Blog</a></li>
      <li class="full-support"><a href="https://www.safaribooksonline.com/public/support">Support</a></li>
      <li><a href="https://community.safaribooksonline.com/">Feedback</a></li>
      <li><a href="https://www.safaribooksonline.com/accounts/logout/">Sign Out</a></li>
    </ul>
    <span class="copyright">© 2016 <a href="https://www.safaribooksonline.com/" target="_blank">Safari</a>.</span>
    <br class="mobile-support">
    <a href="https://www.safaribooksonline.com/terms/">Terms of Service</a> /
    <a href="https://www.safaribooksonline.com/privacy/">Privacy Policy</a>
  </footer>

<script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"applicationTime":146,"agent":"js-agent.newrelic.com/nr-768.min.js","applicationID":"3275661","errorBeacon":"bam.nr-data.net","beacon":"bam.nr-data.net","queueTime":0,"transactionName":"YgdaZ0NSW0cEB0RdWltNfkZfUEFdCgofXFBHDVYdR1pQQxZeRl1QQj1aWkU=","licenseKey":"510f1a6865"}</script>


    

    <script src="13.%20Architectural%20Tactics%20and%20Patterns_files/a_002" charset="utf-8"></script>
    <script src="13.%20Architectural%20Tactics%20and%20Patterns_files/a" charset="utf-8"></script>
    
      <script src="13.%20Architectural%20Tactics%20and%20Patterns_files/require.js"></script>
      <script>
        require(["/static/js/pages/_config.1113c6153f5e.js"], function (common) {
          require(["/static/js/nest/_init.1198db94d0a6.js"]);
        });
      </script>
    
    
  
  
  
  <script> // <![CDATA[
    var g = {
      position_cache: {
        
          "chapter": "/api/v1/book/9780132942799/chapter/ch10.html",
          "book_id": "9780132942799",
          "chapter_uri": "ch10.html",
          "position": 0,
          "user_uuid": "10f9e41b-1414-4ac1-bc80-973364aac808",
          "next_chapter_uri": "/library/view/software-architecture-in/9780132942799/ch11.html"
        
      },
      title: "Software Architecture in Practice, Third Edition",
      author_list: "Rick Kazman, Paul Clements, Len Bass",
      format: "book",
      source: "application/epub+zip",
      is_system_book: true,
      is_public: false,
      loaded_from_server: true,
      allow_scripts: false,
      has_mathml: false
    };
    // ]]>
  </script>
  
  


  
  <script>
    
      
        

        
          
            window.PUBLIC_ANNOTATIONS = true;
          
        

      

      
        window.MOBILE_PUBLIC_ANNOTATIONS = false;
      

    

  </script>

  
    
  


    
    


  

<div style="top: 200px; left: 1450px;" class="font-flyout"><div class="font-controls-panel">
	<div class="nightmodes">
		<ul>
			<li class="day"><a href="#" id="day-mode" title="Day Mode">
				<i class="fa fa-sun-o"></i>
				<span>Day Mode</span></a></li>
			<li class="cloudy"><a href="#" id="cloudy-mode" title="Cloudy Mode">
				<i class="fa fa-cloud"></i>
				<span>Cloud Mode</span>
			</a></li>
			<li class="night"><a href="#" id="night-mode" title="Night Mode">
				<i class="fa fa-moon-o"></i>
				<span>Night Mode</span>
			</a></li>
		</ul>
	</div>

	<div class="font-resizer resizer">
		<div class="draggable-containment-wrapper">
			<i class="fa fa-font left"></i>
			<span style="width: 50%;" class="filler"></span>
			<div style="position: relative; left: 80px;" id="js-font-size-draggable" class="draggable ui-widget-content ui-draggable ui-draggable-handle"></div>
			<i class="fa fa-font right"></i>
		</div>
	</div>

	<div class="column-resizer resizer">
		<div class="draggable-containment-wrapper">
			<i class="fa fa-compress left"></i>
			<span style="width: 50%;" class="filler"></span>
			<div style="position: relative; left: 80px;" id="js-column-size-draggable" class="draggable ui-widget-content ui-draggable ui-draggable-handle"></div>
			<i class="fa fa-expand right"></i>
		</div>
	</div>

	<a id="reset" class="button" href="#">Reset</a>
</div>
</div><div class="annotator-notice"></div></body></html>